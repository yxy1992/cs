package cs
class opengl {
/////////////////常量///////////////////
public let GL_DEPTH_BUFFER_BIT=0x00000100
public let GL_STENCIL_BUFFER_BIT=0x00000400
public let GL_COLOR_BUFFER_BIT=0x00004000
public let GL_FALSE=0
public let GL_TRUE=1
public let GL_POINTS=0x0000
public let GL_LINES=0x0001
public let GL_LINE_LOOP=0x0002
public let GL_LINE_STRIP=0x0003
public let GL_TRIANGLES=0x0004
public let GL_TRIANGLE_STRIP=0x0005
public let GL_TRIANGLE_FAN=0x0006
public let GL_QUADS=0x0007
public let GL_NEVER=0x0200
public let GL_LESS=0x0201
public let GL_EQUAL=0x0202
public let GL_LEQUAL=0x0203
public let GL_GREATER=0x0204
public let GL_NOTEQUAL=0x0205
public let GL_GEQUAL=0x0206
public let GL_ALWAYS=0x0207
public let GL_ZERO=0
public let GL_ONE=1
public let GL_SRC_COLOR=0x0300
public let GL_ONE_MINUS_SRC_COLOR=0x0301
public let GL_SRC_ALPHA=0x0302
public let GL_ONE_MINUS_SRC_ALPHA=0x0303
public let GL_DST_ALPHA=0x0304
public let GL_ONE_MINUS_DST_ALPHA=0x0305
public let GL_DST_COLOR=0x0306
public let GL_ONE_MINUS_DST_COLOR=0x0307
public let GL_SRC_ALPHA_SATURATE=0x0308
public let GL_NONE=0
public let GL_FRONT_LEFT=0x0400
public let GL_FRONT_RIGHT=0x0401
public let GL_BACK_LEFT=0x0402
public let GL_BACK_RIGHT=0x0403
public let GL_FRONT=0x0404
public let GL_BACK=0x0405
public let GL_LEFT=0x0406
public let GL_RIGHT=0x0407
public let GL_FRONT_AND_BACK=0x0408
public let GL_NO_ERROR=0
public let GL_INVALID_ENUM=0x0500
public let GL_INVALID_VALUE=0x0501
public let GL_INVALID_OPERATION=0x0502
public let GL_OUT_OF_MEMORY=0x0505
public let GL_CW=0x0900
public let GL_CCW=0x0901
public let GL_POINT_SIZE=0x0B11
public let GL_POINT_SIZE_RANGE=0x0B12
public let GL_POINT_SIZE_GRANULARITY=0x0B13
public let GL_LINE_SMOOTH=0x0B20
public let GL_LINE_WIDTH=0x0B21
public let GL_LINE_WIDTH_RANGE=0x0B22
public let GL_LINE_WIDTH_GRANULARITY=0x0B23
public let GL_POLYGON_MODE=0x0B40
public let GL_POLYGON_SMOOTH=0x0B41
public let GL_CULL_FACE=0x0B44
public let GL_CULL_FACE_MODE=0x0B45
public let GL_FRONT_FACE=0x0B46
public let GL_DEPTH_RANGE=0x0B70
public let GL_DEPTH_TEST=0x0B71
public let GL_DEPTH_WRITEMASK=0x0B72
public let GL_DEPTH_CLEAR_VALUE=0x0B73
public let GL_DEPTH_FUNC=0x0B74
public let GL_STENCIL_TEST=0x0B90
public let GL_STENCIL_CLEAR_VALUE=0x0B91
public let GL_STENCIL_FUNC=0x0B92
public let GL_STENCIL_VALUE_MASK=0x0B93
public let GL_STENCIL_FAIL=0x0B94
public let GL_STENCIL_PASS_DEPTH_FAIL=0x0B95
public let GL_STENCIL_PASS_DEPTH_PASS=0x0B96
public let GL_STENCIL_REF=0x0B97
public let GL_STENCIL_WRITEMASK=0x0B98
public let GL_VIEWPORT=0x0BA2
public let GL_DITHER=0x0BD0
public let GL_BLEND_DST=0x0BE0
public let GL_BLEND_SRC=0x0BE1
public let GL_BLEND=0x0BE2
public let GL_LOGIC_OP_MODE=0x0BF0
public let GL_DRAW_BUFFER=0x0C01
public let GL_READ_BUFFER=0x0C02
public let GL_SCISSOR_BOX=0x0C10
public let GL_SCISSOR_TEST=0x0C11
public let GL_COLOR_CLEAR_VALUE=0x0C22
public let GL_COLOR_WRITEMASK=0x0C23
public let GL_DOUBLEBUFFER=0x0C32
public let GL_STEREO=0x0C33
public let GL_LINE_SMOOTH_HINT=0x0C52
public let GL_POLYGON_SMOOTH_HINT=0x0C53
public let GL_UNPACK_SWAP_BYTES=0x0CF0
public let GL_UNPACK_LSB_FIRST=0x0CF1
public let GL_UNPACK_ROW_LENGTH=0x0CF2
public let GL_UNPACK_SKIP_ROWS=0x0CF3
public let GL_UNPACK_SKIP_PIXELS=0x0CF4
public let GL_UNPACK_ALIGNMENT=0x0CF5
public let GL_PACK_SWAP_BYTES=0x0D00
public let GL_PACK_LSB_FIRST=0x0D01
public let GL_PACK_ROW_LENGTH=0x0D02
public let GL_PACK_SKIP_ROWS=0x0D03
public let GL_PACK_SKIP_PIXELS=0x0D04
public let GL_PACK_ALIGNMENT=0x0D05
public let GL_MAX_TEXTURE_SIZE=0x0D33
public let GL_MAX_VIEWPORT_DIMS=0x0D3A
public let GL_SUBPIXEL_BITS=0x0D50
public let GL_TEXTURE_1D=0x0DE0
public let GL_TEXTURE_2D=0x0DE1
public let GL_TEXTURE_WIDTH=0x1000
public let GL_TEXTURE_HEIGHT=0x1001
public let GL_TEXTURE_BORDER_COLOR=0x1004
public let GL_DONT_CARE=0x1100
public let GL_FASTEST=0x1101
public let GL_NICEST=0x1102
public let GL_BYTE=0x1400
public let GL_UNSIGNED_BYTE=0x1401
public let GL_SHORT=0x1402
public let GL_UNSIGNED_SHORT=0x1403
public let GL_INT=0x1404
public let GL_UNSIGNED_INT=0x1405
public let GL_FLOAT=0x1406
public let GL_STACK_OVERFLOW=0x0503
public let GL_STACK_UNDERFLOW=0x0504
public let GL_CLEAR=0x1500
public let GL_AND=0x1501
public let GL_AND_REVERSE=0x1502
public let GL_COPY=0x1503
public let GL_AND_INVERTED=0x1504
public let GL_NOOP=0x1505
public let GL_XOR=0x1506
public let GL_OR=0x1507
public let GL_NOR=0x1508
public let GL_EQUIV=0x1509
public let GL_INVERT=0x150A
public let GL_OR_REVERSE=0x150B
public let GL_COPY_INVERTED=0x150C
public let GL_OR_INVERTED=0x150D
public let GL_NAND=0x150E
public let GL_SET=0x150F
public let GL_TEXTURE=0x1702
public let GL_COLOR=0x1800
public let GL_DEPTH=0x1801
public let GL_STENCIL=0x1802
public let GL_STENCIL_INDEX=0x1901
public let GL_DEPTH_COMPONENT=0x1902
public let GL_RED=0x1903
public let GL_GREEN=0x1904
public let GL_BLUE=0x1905
public let GL_ALPHA=0x1906
public let GL_RGB=0x1907
public let GL_RGBA=0x1908
public let GL_POINT=0x1B00
public let GL_LINE=0x1B01
public let GL_FILL=0x1B02
public let GL_KEEP=0x1E00
public let GL_REPLACE=0x1E01
public let GL_INCR=0x1E02
public let GL_DECR=0x1E03
public let GL_VENDOR=0x1F00
public let GL_RENDERER=0x1F01
public let GL_VERSION:UInt=0x1F02
public let GL_EXTENSIONS=0x1F03
public let GL_NEAREST=0x2600
public let GL_LINEAR=0x2601
public let GL_NEAREST_MIPMAP_NEAREST=0x2700
public let GL_LINEAR_MIPMAP_NEAREST=0x2701
public let GL_NEAREST_MIPMAP_LINEAR=0x2702
public let GL_LINEAR_MIPMAP_LINEAR=0x2703
public let GL_TEXTURE_MAG_FILTER=0x2800
public let GL_TEXTURE_MIN_FILTER=0x2801
public let GL_TEXTURE_WRAP_S=0x2802
public let GL_TEXTURE_WRAP_T=0x2803
public let GL_REPEAT=0x2901
public let GL_CURRENT_BIT=0x00000001
public let GL_POINT_BIT=0x00000002
public let GL_LINE_BIT=0x00000004
public let GL_POLYGON_BIT=0x00000008
public let GL_POLYGON_STIPPLE_BIT=0x00000010
public let GL_PIXEL_MODE_BIT=0x00000020
public let GL_LIGHTING_BIT=0x00000040
public let GL_FOG_BIT=0x00000080
public let GL_ACCUM_BUFFER_BIT=0x00000200
public let GL_VIEWPORT_BIT=0x00000800
public let GL_TRANSFORM_BIT=0x00001000
public let GL_ENABLE_BIT=0x00002000
public let GL_HINT_BIT=0x00008000
public let GL_EVAL_BIT=0x00010000
public let GL_LIST_BIT=0x00020000
public let GL_TEXTURE_BIT=0x00040000
public let GL_SCISSOR_BIT=0x00080000
public let GL_ALL_ATTRIB_BITS=0xFFFFFFFF
public let GL_QUAD_STRIP=0x0008
public let GL_POLYGON=0x0009
public let GL_ACCUM=0x0100
public let GL_LOAD=0x0101
public let GL_RETURN=0x0102
public let GL_MULT=0x0103
public let GL_ADD=0x0104
public let GL_AUX0=0x0409
public let GL_AUX1=0x040A
public let GL_AUX2=0x040B
public let GL_AUX3=0x040C
public let GL_2D=0x0600
public let GL_3D=0x0601
public let GL_3D_COLOR=0x0602
public let GL_3D_COLOR_TEXTURE=0x0603
public let GL_4D_COLOR_TEXTURE=0x0604
public let GL_PASS_THROUGH_TOKEN=0x0700
public let GL_POINT_TOKEN=0x0701
public let GL_LINE_TOKEN=0x0702
public let GL_POLYGON_TOKEN=0x0703
public let GL_BITMAP_TOKEN=0x0704
public let GL_DRAW_PIXEL_TOKEN=0x0705
public let GL_COPY_PIXEL_TOKEN=0x0706
public let GL_LINE_RESET_TOKEN=0x0707
public let GL_EXP=0x0800
public let GL_EXP2=0x0801
public let GL_COEFF=0x0A00
public let GL_ORDER=0x0A01
public let GL_DOMAIN=0x0A02
public let GL_PIXEL_MAP_I_TO_I=0x0C70
public let GL_PIXEL_MAP_S_TO_S=0x0C71
public let GL_PIXEL_MAP_I_TO_R=0x0C72
public let GL_PIXEL_MAP_I_TO_G=0x0C73
public let GL_PIXEL_MAP_I_TO_B=0x0C74
public let GL_PIXEL_MAP_I_TO_A=0x0C75
public let GL_PIXEL_MAP_R_TO_R=0x0C76
public let GL_PIXEL_MAP_G_TO_G=0x0C77
public let GL_PIXEL_MAP_B_TO_B=0x0C78
public let GL_PIXEL_MAP_A_TO_A=0x0C79
public let GL_CURRENT_COLOR=0x0B00
public let GL_CURRENT_INDEX=0x0B01
public let GL_CURRENT_NORMAL=0x0B02
public let GL_CURRENT_TEXTURE_COORDS=0x0B03
public let GL_CURRENT_RASTER_COLOR=0x0B04
public let GL_CURRENT_RASTER_INDEX=0x0B05
public let GL_CURRENT_RASTER_TEXTURE_COORDS=0x0B06
public let GL_CURRENT_RASTER_POSITION=0x0B07
public let GL_CURRENT_RASTER_POSITION_VALID=0x0B08
public let GL_CURRENT_RASTER_DISTANCE=0x0B09
public let GL_POINT_SMOOTH=0x0B10
public let GL_LINE_STIPPLE=0x0B24
public let GL_LINE_STIPPLE_PATTERN=0x0B25
public let GL_LINE_STIPPLE_REPEAT=0x0B26
public let GL_LIST_MODE=0x0B30
public let GL_MAX_LIST_NESTING=0x0B31
public let GL_LIST_BASE=0x0B32
public let GL_LIST_INDEX=0x0B33
public let GL_POLYGON_STIPPLE=0x0B42
public let GL_EDGE_FLAG=0x0B43
public let GL_LIGHTING=0x0B50
public let GL_LIGHT_MODEL_LOCAL_VIEWER=0x0B51
public let GL_LIGHT_MODEL_TWO_SIDE=0x0B52
public let GL_LIGHT_MODEL_AMBIENT=0x0B53
public let GL_SHADE_MODEL=0x0B54
public let GL_COLOR_MATERIAL_FACE=0x0B55
public let GL_COLOR_MATERIAL_PARAMETER=0x0B56
public let GL_COLOR_MATERIAL=0x0B57
public let GL_FOG=0x0B60
public let GL_FOG_INDEX=0x0B61
public let GL_FOG_DENSITY=0x0B62
public let GL_FOG_START=0x0B63
public let GL_FOG_END=0x0B64
public let GL_FOG_MODE=0x0B65
public let GL_FOG_COLOR=0x0B66
public let GL_ACCUM_CLEAR_VALUE=0x0B80
public let GL_MATRIX_MODE=0x0BA0
public let GL_NORMALIZE=0x0BA1
public let GL_MODELVIEW_STACK_DEPTH=0x0BA3
public let GL_PROJECTION_STACK_DEPTH=0x0BA4
public let GL_TEXTURE_STACK_DEPTH=0x0BA5
public let GL_MODELVIEW_MATRIX=0x0BA6
public let GL_PROJECTION_MATRIX=0x0BA7
public let GL_TEXTURE_MATRIX=0x0BA8
public let GL_ATTRIB_STACK_DEPTH=0x0BB0
public let GL_ALPHA_TEST=0x0BC0
public let GL_ALPHA_TEST_FUNC=0x0BC1
public let GL_ALPHA_TEST_REF=0x0BC2
public let GL_LOGIC_OP=0x0BF1
public let GL_AUX_BUFFERS=0x0C00
public let GL_INDEX_CLEAR_VALUE=0x0C20
public let GL_INDEX_WRITEMASK=0x0C21
public let GL_INDEX_MODE=0x0C30
public let GL_RGBA_MODE=0x0C31
public let GL_RENDER_MODE=0x0C40
public let GL_PERSPECTIVE_CORRECTION_HINT=0x0C50
public let GL_POINT_SMOOTH_HINT=0x0C51
public let GL_FOG_HINT=0x0C54
public let GL_TEXTURE_GEN_S=0x0C60
public let GL_TEXTURE_GEN_T=0x0C61
public let GL_TEXTURE_GEN_R=0x0C62
public let GL_TEXTURE_GEN_Q=0x0C63
public let GL_PIXEL_MAP_I_TO_I_SIZE=0x0CB0
public let GL_PIXEL_MAP_S_TO_S_SIZE=0x0CB1
public let GL_PIXEL_MAP_I_TO_R_SIZE=0x0CB2
public let GL_PIXEL_MAP_I_TO_G_SIZE=0x0CB3
public let GL_PIXEL_MAP_I_TO_B_SIZE=0x0CB4
public let GL_PIXEL_MAP_I_TO_A_SIZE=0x0CB5
public let GL_PIXEL_MAP_R_TO_R_SIZE=0x0CB6
public let GL_PIXEL_MAP_G_TO_G_SIZE=0x0CB7
public let GL_PIXEL_MAP_B_TO_B_SIZE=0x0CB8
public let GL_PIXEL_MAP_A_TO_A_SIZE=0x0CB9
public let GL_MAP_COLOR=0x0D10
public let GL_MAP_STENCIL=0x0D11
public let GL_INDEX_SHIFT=0x0D12
public let GL_INDEX_OFFSET=0x0D13
public let GL_RED_SCALE=0x0D14
public let GL_RED_BIAS=0x0D15
public let GL_ZOOM_X=0x0D16
public let GL_ZOOM_Y=0x0D17
public let GL_GREEN_SCALE=0x0D18
public let GL_GREEN_BIAS=0x0D19
public let GL_BLUE_SCALE=0x0D1A
public let GL_BLUE_BIAS=0x0D1B
public let GL_ALPHA_SCALE=0x0D1C
public let GL_ALPHA_BIAS=0x0D1D
public let GL_DEPTH_SCALE=0x0D1E
public let GL_DEPTH_BIAS=0x0D1F
public let GL_MAX_EVAL_ORDER=0x0D30
public let GL_MAX_LIGHTS=0x0D31
public let GL_MAX_CLIP_PLANES=0x0D32
public let GL_MAX_PIXEL_MAP_TABLE=0x0D34
public let GL_MAX_ATTRIB_STACK_DEPTH=0x0D35
public let GL_MAX_MODELVIEW_STACK_DEPTH=0x0D36
public let GL_MAX_NAME_STACK_DEPTH=0x0D37
public let GL_MAX_PROJECTION_STACK_DEPTH=0x0D38
public let GL_MAX_TEXTURE_STACK_DEPTH=0x0D39
public let GL_INDEX_BITS=0x0D51
public let GL_RED_BITS=0x0D52
public let GL_GREEN_BITS=0x0D53
public let GL_BLUE_BITS=0x0D54
public let GL_ALPHA_BITS=0x0D55
public let GL_DEPTH_BITS=0x0D56
public let GL_STENCIL_BITS=0x0D57
public let GL_ACCUM_RED_BITS=0x0D58
public let GL_ACCUM_GREEN_BITS=0x0D59
public let GL_ACCUM_BLUE_BITS=0x0D5A
public let GL_ACCUM_ALPHA_BITS=0x0D5B
public let GL_NAME_STACK_DEPTH=0x0D70
public let GL_AUTO_NORMAL=0x0D80
public let GL_MAP1_COLOR_4=0x0D90
public let GL_MAP1_INDEX=0x0D91
public let GL_MAP1_NORMAL=0x0D92
public let GL_MAP1_TEXTURE_COORD_1=0x0D93
public let GL_MAP1_TEXTURE_COORD_2=0x0D94
public let GL_MAP1_TEXTURE_COORD_3=0x0D95
public let GL_MAP1_TEXTURE_COORD_4=0x0D96
public let GL_MAP1_VERTEX_3=0x0D97
public let GL_MAP1_VERTEX_4=0x0D98
public let GL_MAP2_COLOR_4=0x0DB0
public let GL_MAP2_INDEX=0x0DB1
public let GL_MAP2_NORMAL=0x0DB2
public let GL_MAP2_TEXTURE_COORD_1=0x0DB3
public let GL_MAP2_TEXTURE_COORD_2=0x0DB4
public let GL_MAP2_TEXTURE_COORD_3=0x0DB5
public let GL_MAP2_TEXTURE_COORD_4=0x0DB6
public let GL_MAP2_VERTEX_3=0x0DB7
public let GL_MAP2_VERTEX_4=0x0DB8
public let GL_MAP1_GRID_DOMAIN=0x0DD0
public let GL_MAP1_GRID_SEGMENTS=0x0DD1
public let GL_MAP2_GRID_DOMAIN=0x0DD2
public let GL_MAP2_GRID_SEGMENTS=0x0DD3
public let GL_TEXTURE_COMPONENTS=0x1003
public let GL_TEXTURE_BORDER=0x1005
public let GL_AMBIENT=0x1200
public let GL_DIFFUSE=0x1201
public let GL_SPECULAR=0x1202
public let GL_POSITION=0x1203
public let GL_SPOT_DIRECTION=0x1204
public let GL_SPOT_EXPONENT=0x1205
public let GL_SPOT_CUTOFF=0x1206
public let GL_CONSTANT_ATTENUATION=0x1207
public let GL_LINEAR_ATTENUATION=0x1208
public let GL_QUADRATIC_ATTENUATION=0x1209
public let GL_COMPILE=0x1300
public let GL_COMPILE_AND_EXECUTE=0x1301
public let GL_2_BYTES=0x1407
public let GL_3_BYTES=0x1408
public let GL_4_BYTES=0x1409
public let GL_EMISSION=0x1600
public let GL_SHININESS=0x1601
public let GL_AMBIENT_AND_DIFFUSE=0x1602
public let GL_COLOR_INDEXES=0x1603
public let GL_MODELVIEW=0x1700
public let GL_PROJECTION=0x1701
public let GL_COLOR_INDEX=0x1900
public let GL_LUMINANCE=0x1909
public let GL_LUMINANCE_ALPHA=0x190A
public let GL_BITMAP=0x1A00
public let GL_RENDER=0x1C00
public let GL_FEEDBACK=0x1C01
public let GL_SELECT=0x1C02
public let GL_FLAT=0x1D00
public let GL_SMOOTH=0x1D01
public let GL_S=0x2000
public let GL_T=0x2001
public let GL_R=0x2002
public let GL_Q=0x2003
public let GL_MODULATE=0x2100
public let GL_DECAL=0x2101
public let GL_TEXTURE_ENV_MODE=0x2200
public let GL_TEXTURE_ENV_COLOR=0x2201
public let GL_TEXTURE_ENV=0x2300
public let GL_EYE_LINEAR=0x2400
public let GL_OBJECT_LINEAR=0x2401
public let GL_SPHERE_MAP=0x2402
public let GL_TEXTURE_GEN_MODE=0x2500
public let GL_OBJECT_PLANE=0x2501
public let GL_EYE_PLANE=0x2502
public let GL_CLAMP=0x2900
public let GL_CLIP_PLANE0=0x3000
public let GL_CLIP_PLANE1=0x3001
public let GL_CLIP_PLANE2=0x3002
public let GL_CLIP_PLANE3=0x3003
public let GL_CLIP_PLANE4=0x3004
public let GL_CLIP_PLANE5=0x3005
public let GL_LIGHT0=0x4000
public let GL_LIGHT1=0x4001
public let GL_LIGHT2=0x4002
public let GL_LIGHT3=0x4003
public let GL_LIGHT4=0x4004
public let GL_LIGHT5=0x4005
public let GL_LIGHT6=0x4006
public let GL_LIGHT7=0x4007
public let GL_COLOR_LOGIC_OP=0x0BF2
public let GL_POLYGON_OFFSET_UNITS=0x2A00
public let GL_POLYGON_OFFSET_POINT=0x2A01
public let GL_POLYGON_OFFSET_LINE=0x2A02
public let GL_POLYGON_OFFSET_FILL=0x8037
public let GL_POLYGON_OFFSET_FACTOR=0x8038
public let GL_TEXTURE_BINDING_1D=0x8068
public let GL_TEXTURE_BINDING_2D=0x8069
public let GL_TEXTURE_INTERNAL_FORMAT=0x1003
public let GL_TEXTURE_RED_SIZE=0x805C
public let GL_TEXTURE_GREEN_SIZE=0x805D
public let GL_TEXTURE_BLUE_SIZE=0x805E
public let GL_TEXTURE_ALPHA_SIZE=0x805F
public let GL_DOUBLE=0x140A
public let GL_PROXY_TEXTURE_1D=0x8063
public let GL_PROXY_TEXTURE_2D=0x8064
public let GL_R3_G3_B2=0x2A10
public let GL_RGB4=0x804F
public let GL_RGB5=0x8050
public let GL_RGB8=0x8051
public let GL_RGB10=0x8052
public let GL_RGB12=0x8053
public let GL_RGB16=0x8054
public let GL_RGBA2=0x8055
public let GL_RGBA4=0x8056
public let GL_RGB5_A1=0x8057
public let GL_RGBA8=0x8058
public let GL_RGB10_A2=0x8059
public let GL_RGBA12=0x805A
public let GL_RGBA16=0x805B
public let GL_CLIENT_PIXEL_STORE_BIT=0x00000001
public let GL_CLIENT_VERTEX_ARRAY_BIT=0x00000002
public let GL_CLIENT_ALL_ATTRIB_BITS=0xFFFFFFFF
public let GL_VERTEX_ARRAY_POINTER=0x808E
public let GL_NORMAL_ARRAY_POINTER=0x808F
public let GL_COLOR_ARRAY_POINTER=0x8090
public let GL_INDEX_ARRAY_POINTER=0x8091
public let GL_TEXTURE_COORD_ARRAY_POINTER=0x8092
public let GL_EDGE_FLAG_ARRAY_POINTER=0x8093
public let GL_FEEDBACK_BUFFER_POINTER=0x0DF0
public let GL_SELECTION_BUFFER_POINTER=0x0DF3
public let GL_CLIENT_ATTRIB_STACK_DEPTH=0x0BB1
public let GL_INDEX_LOGIC_OP=0x0BF1
public let GL_MAX_CLIENT_ATTRIB_STACK_DEPTH=0x0D3B
public let GL_FEEDBACK_BUFFER_SIZE=0x0DF1
public let GL_FEEDBACK_BUFFER_TYPE=0x0DF2
public let GL_SELECTION_BUFFER_SIZE=0x0DF4
public let GL_VERTEX_ARRAY=0x8074
public let GL_NORMAL_ARRAY=0x8075
public let GL_COLOR_ARRAY=0x8076
public let GL_INDEX_ARRAY=0x8077
public let GL_TEXTURE_COORD_ARRAY=0x8078
public let GL_EDGE_FLAG_ARRAY=0x8079
public let GL_VERTEX_ARRAY_SIZE=0x807A
public let GL_VERTEX_ARRAY_TYPE=0x807B
public let GL_VERTEX_ARRAY_STRIDE=0x807C
public let GL_NORMAL_ARRAY_TYPE=0x807E
public let GL_NORMAL_ARRAY_STRIDE=0x807F
public let GL_COLOR_ARRAY_SIZE=0x8081
public let GL_COLOR_ARRAY_TYPE=0x8082
public let GL_COLOR_ARRAY_STRIDE=0x8083
public let GL_INDEX_ARRAY_TYPE=0x8085
public let GL_INDEX_ARRAY_STRIDE=0x8086
public let GL_TEXTURE_COORD_ARRAY_SIZE=0x8088
public let GL_TEXTURE_COORD_ARRAY_TYPE=0x8089
public let GL_TEXTURE_COORD_ARRAY_STRIDE=0x808A
public let GL_EDGE_FLAG_ARRAY_STRIDE=0x808C
public let GL_TEXTURE_LUMINANCE_SIZE=0x8060
public let GL_TEXTURE_INTENSITY_SIZE=0x8061
public let GL_TEXTURE_PRIORITY=0x8066
public let GL_TEXTURE_RESIDENT=0x8067
public let GL_ALPHA4=0x803B
public let GL_ALPHA8=0x803C
public let GL_ALPHA12=0x803D
public let GL_ALPHA16=0x803E
public let GL_LUMINANCE4=0x803F
public let GL_LUMINANCE8=0x8040
public let GL_LUMINANCE12=0x8041
public let GL_LUMINANCE16=0x8042
public let GL_LUMINANCE4_ALPHA4=0x8043
public let GL_LUMINANCE6_ALPHA2=0x8044
public let GL_LUMINANCE8_ALPHA8=0x8045
public let GL_LUMINANCE12_ALPHA4=0x8046
public let GL_LUMINANCE12_ALPHA12=0x8047
public let GL_LUMINANCE16_ALPHA16=0x8048
public let GL_INTENSITY=0x8049
public let GL_INTENSITY4=0x804A
public let GL_INTENSITY8=0x804B
public let GL_INTENSITY12=0x804C
public let GL_INTENSITY16=0x804D
public let GL_V2F=0x2A20
public let GL_V3F=0x2A21
public let GL_C4UB_V2F=0x2A22
public let GL_C4UB_V3F=0x2A23
public let GL_C3F_V3F=0x2A24
public let GL_N3F_V3F=0x2A25
public let GL_C4F_N3F_V3F=0x2A26
public let GL_T2F_V3F=0x2A27
public let GL_T4F_V4F=0x2A28
public let GL_T2F_C4UB_V3F=0x2A29
public let GL_T2F_C3F_V3F=0x2A2A
public let GL_T2F_N3F_V3F=0x2A2B
public let GL_T2F_C4F_N3F_V3F=0x2A2C
public let GL_T4F_C4F_N3F_V4F=0x2A2D
public let GL_UNSIGNED_BYTE_3_3_2=0x8032
public let GL_UNSIGNED_SHORT_4_4_4_4=0x8033
public let GL_UNSIGNED_SHORT_5_5_5_1=0x8034
public let GL_UNSIGNED_INT_8_8_8_8=0x8035
public let GL_UNSIGNED_INT_10_10_10_2=0x8036
public let GL_TEXTURE_BINDING_3D=0x806A
public let GL_PACK_SKIP_IMAGES=0x806B
public let GL_PACK_IMAGE_HEIGHT=0x806C
public let GL_UNPACK_SKIP_IMAGES=0x806D
public let GL_UNPACK_IMAGE_HEIGHT=0x806E
public let GL_TEXTURE_3D=0x806F
public let GL_PROXY_TEXTURE_3D=0x8070
public let GL_TEXTURE_DEPTH=0x8071
public let GL_TEXTURE_WRAP_R=0x8072
public let GL_MAX_3D_TEXTURE_SIZE=0x8073
public let GL_UNSIGNED_BYTE_2_3_3_REV=0x8362
public let GL_UNSIGNED_SHORT_5_6_5=0x8363
public let GL_UNSIGNED_SHORT_5_6_5_REV=0x8364
public let GL_UNSIGNED_SHORT_4_4_4_4_REV=0x8365
public let GL_UNSIGNED_SHORT_1_5_5_5_REV=0x8366
public let GL_UNSIGNED_INT_8_8_8_8_REV=0x8367
public let GL_UNSIGNED_INT_2_10_10_10_REV=0x8368
public let GL_BGR=0x80E0
public let GL_BGRA=0x80E1
public let GL_MAX_ELEMENTS_VERTICES=0x80E8
public let GL_MAX_ELEMENTS_INDICES=0x80E9
public let GL_CLAMP_TO_EDGE=0x812F
public let GL_TEXTURE_MIN_LOD=0x813A
public let GL_TEXTURE_MAX_LOD=0x813B
public let GL_TEXTURE_BASE_LEVEL=0x813C
public let GL_TEXTURE_MAX_LEVEL=0x813D
public let GL_SMOOTH_POINT_SIZE_RANGE=0x0B12
public let GL_SMOOTH_POINT_SIZE_GRANULARITY=0x0B13
public let GL_SMOOTH_LINE_WIDTH_RANGE=0x0B22
public let GL_SMOOTH_LINE_WIDTH_GRANULARITY=0x0B23
public let GL_ALIASED_LINE_WIDTH_RANGE=0x846E
public let GL_RESCALE_NORMAL=0x803A
public let GL_LIGHT_MODEL_COLOR_CONTROL=0x81F8
public let GL_SINGLE_COLOR=0x81F9
public let GL_SEPARATE_SPECULAR_COLOR=0x81FA
public let GL_ALIASED_POINT_SIZE_RANGE=0x846D
public let GL_TEXTURE0=0x84C0
public let GL_TEXTURE1=0x84C1
public let GL_TEXTURE2=0x84C2
public let GL_TEXTURE3=0x84C3
public let GL_TEXTURE4=0x84C4
public let GL_TEXTURE5=0x84C5
public let GL_TEXTURE6=0x84C6
public let GL_TEXTURE7=0x84C7
public let GL_TEXTURE8=0x84C8
public let GL_TEXTURE9=0x84C9
public let GL_TEXTURE10=0x84CA
public let GL_TEXTURE11=0x84CB
public let GL_TEXTURE12=0x84CC
public let GL_TEXTURE13=0x84CD
public let GL_TEXTURE14=0x84CE
public let GL_TEXTURE15=0x84CF
public let GL_TEXTURE16=0x84D0
public let GL_TEXTURE17=0x84D1
public let GL_TEXTURE18=0x84D2
public let GL_TEXTURE19=0x84D3
public let GL_TEXTURE20=0x84D4
public let GL_TEXTURE21=0x84D5
public let GL_TEXTURE22=0x84D6
public let GL_TEXTURE23=0x84D7
public let GL_TEXTURE24=0x84D8
public let GL_TEXTURE25=0x84D9
public let GL_TEXTURE26=0x84DA
public let GL_TEXTURE27=0x84DB
public let GL_TEXTURE28=0x84DC
public let GL_TEXTURE29=0x84DD
public let GL_TEXTURE30=0x84DE
public let GL_TEXTURE31=0x84DF
public let GL_ACTIVE_TEXTURE=0x84E0
public let GL_MULTISAMPLE=0x809D
public let GL_SAMPLE_ALPHA_TO_COVERAGE=0x809E
public let GL_SAMPLE_ALPHA_TO_ONE=0x809F
public let GL_SAMPLE_COVERAGE=0x80A0
public let GL_SAMPLE_BUFFERS=0x80A8
public let GL_SAMPLES=0x80A9
public let GL_SAMPLE_COVERAGE_VALUE=0x80AA
public let GL_SAMPLE_COVERAGE_INVERT=0x80AB
public let GL_TEXTURE_CUBE_MAP=0x8513
public let GL_TEXTURE_BINDING_CUBE_MAP=0x8514
public let GL_TEXTURE_CUBE_MAP_POSITIVE_X=0x8515
public let GL_TEXTURE_CUBE_MAP_NEGATIVE_X=0x8516
public let GL_TEXTURE_CUBE_MAP_POSITIVE_Y=0x8517
public let GL_TEXTURE_CUBE_MAP_NEGATIVE_Y=0x8518
public let GL_TEXTURE_CUBE_MAP_POSITIVE_Z=0x8519
public let GL_TEXTURE_CUBE_MAP_NEGATIVE_Z=0x851A
public let GL_PROXY_TEXTURE_CUBE_MAP=0x851B
public let GL_MAX_CUBE_MAP_TEXTURE_SIZE=0x851C
public let GL_COMPRESSED_RGB=0x84ED
public let GL_COMPRESSED_RGBA=0x84EE
public let GL_TEXTURE_COMPRESSION_HINT=0x84EF
public let GL_TEXTURE_COMPRESSED_IMAGE_SIZE=0x86A0
public let GL_TEXTURE_COMPRESSED=0x86A1
public let GL_NUM_COMPRESSED_TEXTURE_FORMATS=0x86A2
public let GL_COMPRESSED_TEXTURE_FORMATS=0x86A3
public let GL_CLAMP_TO_BORDER=0x812D
public let GL_CLIENT_ACTIVE_TEXTURE=0x84E1
public let GL_MAX_TEXTURE_UNITS=0x84E2
public let GL_TRANSPOSE_MODELVIEW_MATRIX=0x84E3
public let GL_TRANSPOSE_PROJECTION_MATRIX=0x84E4
public let GL_TRANSPOSE_TEXTURE_MATRIX=0x84E5
public let GL_TRANSPOSE_COLOR_MATRIX=0x84E6
public let GL_MULTISAMPLE_BIT=0x20000000
public let GL_NORMAL_MAP=0x8511
public let GL_REFLECTION_MAP=0x8512
public let GL_COMPRESSED_ALPHA=0x84E9
public let GL_COMPRESSED_LUMINANCE=0x84EA
public let GL_COMPRESSED_LUMINANCE_ALPHA=0x84EB
public let GL_COMPRESSED_INTENSITY=0x84EC
public let GL_COMBINE=0x8570
public let GL_COMBINE_RGB=0x8571
public let GL_COMBINE_ALPHA=0x8572
public let GL_SOURCE0_RGB=0x8580
public let GL_SOURCE1_RGB=0x8581
public let GL_SOURCE2_RGB=0x8582
public let GL_SOURCE0_ALPHA=0x8588
public let GL_SOURCE1_ALPHA=0x8589
public let GL_SOURCE2_ALPHA=0x858A
public let GL_OPERAND0_RGB=0x8590
public let GL_OPERAND1_RGB=0x8591
public let GL_OPERAND2_RGB=0x8592
public let GL_OPERAND0_ALPHA=0x8598
public let GL_OPERAND1_ALPHA=0x8599
public let GL_OPERAND2_ALPHA=0x859A
public let GL_RGB_SCALE=0x8573
public let GL_ADD_SIGNED=0x8574
public let GL_INTERPOLATE=0x8575
public let GL_SUBTRACT=0x84E7
public let GL_CONSTANT=0x8576
public let GL_PRIMARY_COLOR=0x8577
public let GL_PREVIOUS=0x8578
public let GL_DOT3_RGB=0x86AE
public let GL_DOT3_RGBA=0x86AF
public let GL_BLEND_DST_RGB=0x80C8
public let GL_BLEND_SRC_RGB=0x80C9
public let GL_BLEND_DST_ALPHA=0x80CA
public let GL_BLEND_SRC_ALPHA=0x80CB
public let GL_POINT_FADE_THRESHOLD_SIZE=0x8128
public let GL_DEPTH_COMPONENT16=0x81A5
public let GL_DEPTH_COMPONENT24=0x81A6
public let GL_DEPTH_COMPONENT32=0x81A7
public let GL_MIRRORED_REPEAT=0x8370
public let GL_MAX_TEXTURE_LOD_BIAS=0x84FD
public let GL_TEXTURE_LOD_BIAS=0x8501
public let GL_INCR_WRAP=0x8507
public let GL_DECR_WRAP=0x8508
public let GL_TEXTURE_DEPTH_SIZE=0x884A
public let GL_TEXTURE_COMPARE_MODE=0x884C
public let GL_TEXTURE_COMPARE_FUNC=0x884D
public let GL_POINT_SIZE_MIN=0x8126
public let GL_POINT_SIZE_MAX=0x8127
public let GL_POINT_DISTANCE_ATTENUATION=0x8129
public let GL_GENERATE_MIPMAP=0x8191
public let GL_GENERATE_MIPMAP_HINT=0x8192
public let GL_FOG_COORDINATE_SOURCE=0x8450
public let GL_FOG_COORDINATE=0x8451
public let GL_FRAGMENT_DEPTH=0x8452
public let GL_CURRENT_FOG_COORDINATE=0x8453
public let GL_FOG_COORDINATE_ARRAY_TYPE=0x8454
public let GL_FOG_COORDINATE_ARRAY_STRIDE=0x8455
public let GL_FOG_COORDINATE_ARRAY_POINTER=0x8456
public let GL_FOG_COORDINATE_ARRAY=0x8457
public let GL_COLOR_SUM=0x8458
public let GL_CURRENT_SECONDARY_COLOR=0x8459
public let GL_SECONDARY_COLOR_ARRAY_SIZE=0x845A
public let GL_SECONDARY_COLOR_ARRAY_TYPE=0x845B
public let GL_SECONDARY_COLOR_ARRAY_STRIDE=0x845C
public let GL_SECONDARY_COLOR_ARRAY_POINTER=0x845D
public let GL_SECONDARY_COLOR_ARRAY=0x845E
public let GL_TEXTURE_FILTER_CONTROL=0x8500
public let GL_DEPTH_TEXTURE_MODE=0x884B
public let GL_COMPARE_R_TO_TEXTURE=0x884E
public let GL_BLEND_COLOR=0x8005
public let GL_BLEND_EQUATION=0x8009
public let GL_CONSTANT_COLOR=0x8001
public let GL_ONE_MINUS_CONSTANT_COLOR=0x8002
public let GL_CONSTANT_ALPHA=0x8003
public let GL_ONE_MINUS_CONSTANT_ALPHA=0x8004
public let GL_FUNC_ADD=0x8006
public let GL_FUNC_REVERSE_SUBTRACT=0x800B
public let GL_FUNC_SUBTRACT=0x800A
public let GL_MIN=0x8007
public let GL_MAX=0x8008
public let GL_BUFFER_SIZE=0x8764
public let GL_BUFFER_USAGE=0x8765
public let GL_QUERY_COUNTER_BITS=0x8864
public let GL_CURRENT_QUERY=0x8865
public let GL_QUERY_RESULT=0x8866
public let GL_QUERY_RESULT_AVAILABLE=0x8867
public let GL_ARRAY_BUFFER=0x8892
public let GL_ELEMENT_ARRAY_BUFFER=0x8893
public let GL_ARRAY_BUFFER_BINDING=0x8894
public let GL_ELEMENT_ARRAY_BUFFER_BINDING=0x8895
public let GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING=0x889F
public let GL_READ_ONLY=0x88B8
public let GL_WRITE_ONLY=0x88B9
public let GL_READ_WRITE=0x88BA
public let GL_BUFFER_ACCESS=0x88BB
public let GL_BUFFER_MAPPED=0x88BC
public let GL_BUFFER_MAP_POINTER=0x88BD
public let GL_STREAM_DRAW=0x88E0
public let GL_STREAM_READ=0x88E1
public let GL_STREAM_COPY=0x88E2
public let GL_STATIC_DRAW=0x88E4
public let GL_STATIC_READ=0x88E5
public let GL_STATIC_COPY=0x88E6
public let GL_DYNAMIC_DRAW=0x88E8
public let GL_DYNAMIC_READ=0x88E9
public let GL_DYNAMIC_COPY=0x88EA
public let GL_SAMPLES_PASSED=0x8914
public let GL_SRC1_ALPHA=0x8589
public let GL_VERTEX_ARRAY_BUFFER_BINDING=0x8896
public let GL_NORMAL_ARRAY_BUFFER_BINDING=0x8897
public let GL_COLOR_ARRAY_BUFFER_BINDING=0x8898
public let GL_INDEX_ARRAY_BUFFER_BINDING=0x8899
public let GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING=0x889A
public let GL_EDGE_FLAG_ARRAY_BUFFER_BINDING=0x889B
public let GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING=0x889C
public let GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING=0x889D
public let GL_WEIGHT_ARRAY_BUFFER_BINDING=0x889E
public let GL_FOG_COORD_SRC=0x8450
public let GL_FOG_COORD=0x8451
public let GL_CURRENT_FOG_COORD=0x8453
public let GL_FOG_COORD_ARRAY_TYPE=0x8454
public let GL_FOG_COORD_ARRAY_STRIDE=0x8455
public let GL_FOG_COORD_ARRAY_POINTER=0x8456
public let GL_FOG_COORD_ARRAY=0x8457
public let GL_FOG_COORD_ARRAY_BUFFER_BINDING=0x889D
public let GL_SRC0_RGB=0x8580
public let GL_SRC1_RGB=0x8581
public let GL_SRC2_RGB=0x8582
public let GL_SRC0_ALPHA=0x8588
public let GL_SRC2_ALPHA=0x858A
public let GL_BLEND_EQUATION_RGB=0x8009
public let GL_VERTEX_ATTRIB_ARRAY_ENABLED=0x8622
public let GL_VERTEX_ATTRIB_ARRAY_SIZE=0x8623
public let GL_VERTEX_ATTRIB_ARRAY_STRIDE=0x8624
public let GL_VERTEX_ATTRIB_ARRAY_TYPE=0x8625
public let GL_CURRENT_VERTEX_ATTRIB=0x8626
public let GL_VERTEX_PROGRAM_POINT_SIZE=0x8642
public let GL_VERTEX_ATTRIB_ARRAY_POINTER=0x8645
public let GL_STENCIL_BACK_FUNC=0x8800
public let GL_STENCIL_BACK_FAIL=0x8801
public let GL_STENCIL_BACK_PASS_DEPTH_FAIL=0x8802
public let GL_STENCIL_BACK_PASS_DEPTH_PASS=0x8803
public let GL_MAX_DRAW_BUFFERS=0x8824
public let GL_DRAW_BUFFER0=0x8825
public let GL_DRAW_BUFFER1=0x8826
public let GL_DRAW_BUFFER2=0x8827
public let GL_DRAW_BUFFER3=0x8828
public let GL_DRAW_BUFFER4=0x8829
public let GL_DRAW_BUFFER5=0x882A
public let GL_DRAW_BUFFER6=0x882B
public let GL_DRAW_BUFFER7=0x882C
public let GL_DRAW_BUFFER8=0x882D
public let GL_DRAW_BUFFER9=0x882E
public let GL_DRAW_BUFFER10=0x882F
public let GL_DRAW_BUFFER11=0x8830
public let GL_DRAW_BUFFER12=0x8831
public let GL_DRAW_BUFFER13=0x8832
public let GL_DRAW_BUFFER14=0x8833
public let GL_DRAW_BUFFER15=0x8834
public let GL_BLEND_EQUATION_ALPHA=0x883D
public let GL_MAX_VERTEX_ATTRIBS=0x8869
public let GL_VERTEX_ATTRIB_ARRAY_NORMALIZED=0x886A
public let GL_MAX_TEXTURE_IMAGE_UNITS=0x8872
public let GL_FRAGMENT_SHADER=0x8B30
public let GL_VERTEX_SHADER=0x8B31
public let GL_MAX_FRAGMENT_UNIFORM_COMPONENTS=0x8B49
public let GL_MAX_VERTEX_UNIFORM_COMPONENTS=0x8B4A
public let GL_MAX_VARYING_FLOATS=0x8B4B
public let GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS=0x8B4C
public let GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS=0x8B4D
public let GL_SHADER_TYPE=0x8B4F
public let GL_FLOAT_VEC2=0x8B50
public let GL_FLOAT_VEC3=0x8B51
public let GL_FLOAT_VEC4=0x8B52
public let GL_INT_VEC2=0x8B53
public let GL_INT_VEC3=0x8B54
public let GL_INT_VEC4=0x8B55
public let GL_BOOL=0x8B56
public let GL_BOOL_VEC2=0x8B57
public let GL_BOOL_VEC3=0x8B58
public let GL_BOOL_VEC4=0x8B59
public let GL_FLOAT_MAT2=0x8B5A
public let GL_FLOAT_MAT3=0x8B5B
public let GL_FLOAT_MAT4=0x8B5C
public let GL_SAMPLER_1D=0x8B5D
public let GL_SAMPLER_2D=0x8B5E
public let GL_SAMPLER_3D=0x8B5F
public let GL_SAMPLER_CUBE=0x8B60
public let GL_SAMPLER_1D_SHADOW=0x8B61
public let GL_SAMPLER_2D_SHADOW=0x8B62
public let GL_DELETE_STATUS=0x8B80
public let GL_COMPILE_STATUS=0x8B81
public let GL_LINK_STATUS=0x8B82
public let GL_VALIDATE_STATUS=0x8B83
public let GL_INFO_LOG_LENGTH=0x8B84
public let GL_ATTACHED_SHADERS=0x8B85
public let GL_ACTIVE_UNIFORMS=0x8B86
public let GL_ACTIVE_UNIFORM_MAX_LENGTH=0x8B87
public let GL_SHADER_SOURCE_LENGTH=0x8B88
public let GL_ACTIVE_ATTRIBUTES=0x8B89
public let GL_ACTIVE_ATTRIBUTE_MAX_LENGTH=0x8B8A
public let GL_FRAGMENT_SHADER_DERIVATIVE_HINT=0x8B8B
public let GL_SHADING_LANGUAGE_VERSION=0x8B8C
public let GL_CURRENT_PROGRAM=0x8B8D
public let GL_POINT_SPRITE_COORD_ORIGIN=0x8CA0
public let GL_LOWER_LEFT=0x8CA1
public let GL_UPPER_LEFT=0x8CA2
public let GL_STENCIL_BACK_REF=0x8CA3
public let GL_STENCIL_BACK_VALUE_MASK=0x8CA4
public let GL_STENCIL_BACK_WRITEMASK=0x8CA5
public let GL_VERTEX_PROGRAM_TWO_SIDE=0x8643
public let GL_POINT_SPRITE=0x8861
public let GL_COORD_REPLACE=0x8862
public let GL_MAX_TEXTURE_COORDS=0x8871
public let GL_PIXEL_PACK_BUFFER=0x88EB
public let GL_PIXEL_UNPACK_BUFFER=0x88EC
public let GL_PIXEL_PACK_BUFFER_BINDING=0x88ED
public let GL_PIXEL_UNPACK_BUFFER_BINDING=0x88EF
public let GL_FLOAT_MAT2x3=0x8B65
public let GL_FLOAT_MAT2x4=0x8B66
public let GL_FLOAT_MAT3x2=0x8B67
public let GL_FLOAT_MAT3x4=0x8B68
public let GL_FLOAT_MAT4x2=0x8B69
public let GL_FLOAT_MAT4x3=0x8B6A
public let GL_SRGB=0x8C40
public let GL_SRGB8=0x8C41
public let GL_SRGB_ALPHA=0x8C42
public let GL_SRGB8_ALPHA8=0x8C43
public let GL_COMPRESSED_SRGB=0x8C48
public let GL_COMPRESSED_SRGB_ALPHA=0x8C49
public let GL_CURRENT_RASTER_SECONDARY_COLOR=0x845F
public let GL_SLUMINANCE_ALPHA=0x8C44
public let GL_SLUMINANCE8_ALPHA8=0x8C45
public let GL_SLUMINANCE=0x8C46
public let GL_SLUMINANCE8=0x8C47
public let GL_COMPRESSED_SLUMINANCE=0x8C4A
public let GL_COMPRESSED_SLUMINANCE_ALPHA=0x8C4B
public let GL_COMPARE_REF_TO_TEXTURE=0x884E
public let GL_CLIP_DISTANCE0=0x3000
public let GL_CLIP_DISTANCE1=0x3001
public let GL_CLIP_DISTANCE2=0x3002
public let GL_CLIP_DISTANCE3=0x3003
public let GL_CLIP_DISTANCE4=0x3004
public let GL_CLIP_DISTANCE5=0x3005
public let GL_CLIP_DISTANCE6=0x3006
public let GL_CLIP_DISTANCE7=0x3007
public let GL_MAX_CLIP_DISTANCES=0x0D32
public let GL_MAJOR_VERSION=0x821B
public let GL_MINOR_VERSION=0x821C
public let GL_NUM_EXTENSIONS=0x821D
public let GL_CONTEXT_FLAGS=0x821E
public let GL_COMPRESSED_RED=0x8225
public let GL_COMPRESSED_RG=0x8226
public let GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT=0x00000001
public let GL_RGBA32F=0x8814
public let GL_RGB32F=0x8815
public let GL_RGBA16F=0x881A
public let GL_RGB16F=0x881B
public let GL_VERTEX_ATTRIB_ARRAY_INTEGER=0x88FD
public let GL_MAX_ARRAY_TEXTURE_LAYERS=0x88FF
public let GL_MIN_PROGRAM_TEXEL_OFFSET=0x8904
public let GL_MAX_PROGRAM_TEXEL_OFFSET=0x8905
public let GL_CLAMP_READ_COLOR=0x891C
public let GL_FIXED_ONLY=0x891D
public let GL_MAX_VARYING_COMPONENTS=0x8B4B
public let GL_TEXTURE_1D_ARRAY=0x8C18
public let GL_PROXY_TEXTURE_1D_ARRAY=0x8C19
public let GL_TEXTURE_2D_ARRAY=0x8C1A
public let GL_PROXY_TEXTURE_2D_ARRAY=0x8C1B
public let GL_TEXTURE_BINDING_1D_ARRAY=0x8C1C
public let GL_TEXTURE_BINDING_2D_ARRAY=0x8C1D
public let GL_R11F_G11F_B10F=0x8C3A
public let GL_UNSIGNED_INT_10F_11F_11F_REV=0x8C3B
public let GL_RGB9_E5=0x8C3D
public let GL_UNSIGNED_INT_5_9_9_9_REV=0x8C3E
public let GL_TEXTURE_SHARED_SIZE=0x8C3F
public let GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH=0x8C76
public let GL_TRANSFORM_FEEDBACK_BUFFER_MODE=0x8C7F
public let GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS=0x8C80
public let GL_TRANSFORM_FEEDBACK_VARYINGS=0x8C83
public let GL_TRANSFORM_FEEDBACK_BUFFER_START=0x8C84
public let GL_TRANSFORM_FEEDBACK_BUFFER_SIZE=0x8C85
public let GL_PRIMITIVES_GENERATED=0x8C87
public let GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN=0x8C88
public let GL_RASTERIZER_DISCARD=0x8C89
public let GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS=0x8C8A
public let GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS=0x8C8B
public let GL_INTERLEAVED_ATTRIBS=0x8C8C
public let GL_SEPARATE_ATTRIBS=0x8C8D
public let GL_TRANSFORM_FEEDBACK_BUFFER=0x8C8E
public let GL_TRANSFORM_FEEDBACK_BUFFER_BINDING=0x8C8F
public let GL_RGBA32UI=0x8D70
public let GL_RGB32UI=0x8D71
public let GL_RGBA16UI=0x8D76
public let GL_RGB16UI=0x8D77
public let GL_RGBA8UI=0x8D7C
public let GL_RGB8UI=0x8D7D
public let GL_RGBA32I=0x8D82
public let GL_RGB32I=0x8D83
public let GL_RGBA16I=0x8D88
public let GL_RGB16I=0x8D89
public let GL_RGBA8I=0x8D8E
public let GL_RGB8I=0x8D8F
public let GL_RED_INTEGER=0x8D94
public let GL_GREEN_INTEGER=0x8D95
public let GL_BLUE_INTEGER=0x8D96
public let GL_RGB_INTEGER=0x8D98
public let GL_RGBA_INTEGER=0x8D99
public let GL_BGR_INTEGER=0x8D9A
public let GL_BGRA_INTEGER=0x8D9B
public let GL_SAMPLER_1D_ARRAY=0x8DC0
public let GL_SAMPLER_2D_ARRAY=0x8DC1
public let GL_SAMPLER_1D_ARRAY_SHADOW=0x8DC3
public let GL_SAMPLER_2D_ARRAY_SHADOW=0x8DC4
public let GL_SAMPLER_CUBE_SHADOW=0x8DC5
public let GL_UNSIGNED_INT_VEC2=0x8DC6
public let GL_UNSIGNED_INT_VEC3=0x8DC7
public let GL_UNSIGNED_INT_VEC4=0x8DC8
public let GL_INT_SAMPLER_1D=0x8DC9
public let GL_INT_SAMPLER_2D=0x8DCA
public let GL_INT_SAMPLER_3D=0x8DCB
public let GL_INT_SAMPLER_CUBE=0x8DCC
public let GL_INT_SAMPLER_1D_ARRAY=0x8DCE
public let GL_INT_SAMPLER_2D_ARRAY=0x8DCF
public let GL_UNSIGNED_INT_SAMPLER_1D=0x8DD1
public let GL_UNSIGNED_INT_SAMPLER_2D=0x8DD2
public let GL_UNSIGNED_INT_SAMPLER_3D=0x8DD3
public let GL_UNSIGNED_INT_SAMPLER_CUBE=0x8DD4
public let GL_UNSIGNED_INT_SAMPLER_1D_ARRAY=0x8DD6
public let GL_UNSIGNED_INT_SAMPLER_2D_ARRAY=0x8DD7
public let GL_QUERY_WAIT=0x8E13
public let GL_QUERY_NO_WAIT=0x8E14
public let GL_QUERY_BY_REGION_WAIT=0x8E15
public let GL_QUERY_BY_REGION_NO_WAIT=0x8E16
public let GL_BUFFER_ACCESS_FLAGS=0x911F
public let GL_BUFFER_MAP_LENGTH=0x9120
public let GL_BUFFER_MAP_OFFSET=0x9121
public let GL_DEPTH_COMPONENT32F=0x8CAC
public let GL_DEPTH32F_STENCIL8=0x8CAD
public let GL_FLOAT_32_UNSIGNED_INT_24_8_REV=0x8DAD
public let GL_INVALID_FRAMEBUFFER_OPERATION=0x0506
public let GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING=0x8210
public let GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE=0x8211
public let GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE=0x8212
public let GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE=0x8213
public let GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE=0x8214
public let GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE=0x8215
public let GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE=0x8216
public let GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE=0x8217
public let GL_FRAMEBUFFER_DEFAULT=0x8218
public let GL_FRAMEBUFFER_UNDEFINED=0x8219
public let GL_DEPTH_STENCIL_ATTACHMENT=0x821A
public let GL_MAX_RENDERBUFFER_SIZE=0x84E8
public let GL_DEPTH_STENCIL=0x84F9
public let GL_UNSIGNED_INT_24_8=0x84FA
public let GL_DEPTH24_STENCIL8=0x88F0
public let GL_TEXTURE_STENCIL_SIZE=0x88F1
public let GL_TEXTURE_RED_TYPE=0x8C10
public let GL_TEXTURE_GREEN_TYPE=0x8C11
public let GL_TEXTURE_BLUE_TYPE=0x8C12
public let GL_TEXTURE_ALPHA_TYPE=0x8C13
public let GL_TEXTURE_DEPTH_TYPE=0x8C16
public let GL_UNSIGNED_NORMALIZED=0x8C17
public let GL_FRAMEBUFFER_BINDING=0x8CA6
public let GL_DRAW_FRAMEBUFFER_BINDING=0x8CA6
public let GL_RENDERBUFFER_BINDING=0x8CA7
public let GL_READ_FRAMEBUFFER=0x8CA8
public let GL_DRAW_FRAMEBUFFER=0x8CA9
public let GL_READ_FRAMEBUFFER_BINDING=0x8CAA
public let GL_RENDERBUFFER_SAMPLES=0x8CAB
public let GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE=0x8CD0
public let GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME=0x8CD1
public let GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL=0x8CD2
public let GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE=0x8CD3
public let GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER=0x8CD4
public let GL_FRAMEBUFFER_COMPLETE=0x8CD5
public let GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT=0x8CD6
public let GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT=0x8CD7
public let GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER=0x8CDB
public let GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER=0x8CDC
public let GL_FRAMEBUFFER_UNSUPPORTED=0x8CDD
public let GL_MAX_COLOR_ATTACHMENTS=0x8CDF
public let GL_COLOR_ATTACHMENT0=0x8CE0
public let GL_COLOR_ATTACHMENT1=0x8CE1
public let GL_COLOR_ATTACHMENT2=0x8CE2
public let GL_COLOR_ATTACHMENT3=0x8CE3
public let GL_COLOR_ATTACHMENT4=0x8CE4
public let GL_COLOR_ATTACHMENT5=0x8CE5
public let GL_COLOR_ATTACHMENT6=0x8CE6
public let GL_COLOR_ATTACHMENT7=0x8CE7
public let GL_COLOR_ATTACHMENT8=0x8CE8
public let GL_COLOR_ATTACHMENT9=0x8CE9
public let GL_COLOR_ATTACHMENT10=0x8CEA
public let GL_COLOR_ATTACHMENT11=0x8CEB
public let GL_COLOR_ATTACHMENT12=0x8CEC
public let GL_COLOR_ATTACHMENT13=0x8CED
public let GL_COLOR_ATTACHMENT14=0x8CEE
public let GL_COLOR_ATTACHMENT15=0x8CEF
public let GL_COLOR_ATTACHMENT16=0x8CF0
public let GL_COLOR_ATTACHMENT17=0x8CF1
public let GL_COLOR_ATTACHMENT18=0x8CF2
public let GL_COLOR_ATTACHMENT19=0x8CF3
public let GL_COLOR_ATTACHMENT20=0x8CF4
public let GL_COLOR_ATTACHMENT21=0x8CF5
public let GL_COLOR_ATTACHMENT22=0x8CF6
public let GL_COLOR_ATTACHMENT23=0x8CF7
public let GL_COLOR_ATTACHMENT24=0x8CF8
public let GL_COLOR_ATTACHMENT25=0x8CF9
public let GL_COLOR_ATTACHMENT26=0x8CFA
public let GL_COLOR_ATTACHMENT27=0x8CFB
public let GL_COLOR_ATTACHMENT28=0x8CFC
public let GL_COLOR_ATTACHMENT29=0x8CFD
public let GL_COLOR_ATTACHMENT30=0x8CFE
public let GL_COLOR_ATTACHMENT31=0x8CFF
public let GL_DEPTH_ATTACHMENT=0x8D00
public let GL_STENCIL_ATTACHMENT=0x8D20
public let GL_FRAMEBUFFER=0x8D40
public let GL_RENDERBUFFER=0x8D41
public let GL_RENDERBUFFER_WIDTH=0x8D42
public let GL_RENDERBUFFER_HEIGHT=0x8D43
public let GL_RENDERBUFFER_INTERNAL_FORMAT=0x8D44
public let GL_STENCIL_INDEX1=0x8D46
public let GL_STENCIL_INDEX4=0x8D47
public let GL_STENCIL_INDEX8=0x8D48
public let GL_STENCIL_INDEX16=0x8D49
public let GL_RENDERBUFFER_RED_SIZE=0x8D50
public let GL_RENDERBUFFER_GREEN_SIZE=0x8D51
public let GL_RENDERBUFFER_BLUE_SIZE=0x8D52
public let GL_RENDERBUFFER_ALPHA_SIZE=0x8D53
public let GL_RENDERBUFFER_DEPTH_SIZE=0x8D54
public let GL_RENDERBUFFER_STENCIL_SIZE=0x8D55
public let GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE=0x8D56
public let GL_MAX_SAMPLES=0x8D57
public let GL_INDEX=0x8222
public let GL_TEXTURE_LUMINANCE_TYPE=0x8C14
public let GL_TEXTURE_INTENSITY_TYPE=0x8C15
public let GL_FRAMEBUFFER_SRGB=0x8DB9
public let GL_HALF_FLOAT=0x140B
public let GL_MAP_READ_BIT=0x0001
public let GL_MAP_WRITE_BIT=0x0002
public let GL_MAP_INVALIDATE_RANGE_BIT=0x0004
public let GL_MAP_INVALIDATE_BUFFER_BIT=0x0008
public let GL_MAP_FLUSH_EXPLICIT_BIT=0x0010
public let GL_MAP_UNSYNCHRONIZED_BIT=0x0020
public let GL_COMPRESSED_RED_RGTC1=0x8DBB
public let GL_COMPRESSED_SIGNED_RED_RGTC1=0x8DBC
public let GL_COMPRESSED_RG_RGTC2=0x8DBD
public let GL_COMPRESSED_SIGNED_RG_RGTC2=0x8DBE
public let GL_RG=0x8227
public let GL_RG_INTEGER=0x8228
public let GL_R8=0x8229
public let GL_R16=0x822A
public let GL_RG8=0x822B
public let GL_RG16=0x822C
public let GL_R16F=0x822D
public let GL_R32F=0x822E
public let GL_RG16F=0x822F
public let GL_RG32F=0x8230
public let GL_R8I=0x8231
public let GL_R8UI=0x8232
public let GL_R16I=0x8233
public let GL_R16UI=0x8234
public let GL_R32I=0x8235
public let GL_R32UI=0x8236
public let GL_RG8I=0x8237
public let GL_RG8UI=0x8238
public let GL_RG16I=0x8239
public let GL_RG16UI=0x823A
public let GL_RG32I=0x823B
public let GL_RG32UI=0x823C
public let GL_VERTEX_ARRAY_BINDING=0x85B5
public let GL_CLAMP_VERTEX_COLOR=0x891A
public let GL_CLAMP_FRAGMENT_COLOR=0x891B
public let GL_ALPHA_INTEGER=0x8D97
public let GL_SAMPLER_2D_RECT=0x8B63
public let GL_SAMPLER_2D_RECT_SHADOW=0x8B64
public let GL_SAMPLER_BUFFER=0x8DC2
public let GL_INT_SAMPLER_2D_RECT=0x8DCD
public let GL_INT_SAMPLER_BUFFER=0x8DD0
public let GL_UNSIGNED_INT_SAMPLER_2D_RECT=0x8DD5
public let GL_UNSIGNED_INT_SAMPLER_BUFFER=0x8DD8
public let GL_TEXTURE_BUFFER=0x8C2A
public let GL_MAX_TEXTURE_BUFFER_SIZE=0x8C2B
public let GL_TEXTURE_BINDING_BUFFER=0x8C2C
public let GL_TEXTURE_BUFFER_DATA_STORE_BINDING=0x8C2D
public let GL_TEXTURE_RECTANGLE=0x84F5
public let GL_TEXTURE_BINDING_RECTANGLE=0x84F6
public let GL_PROXY_TEXTURE_RECTANGLE=0x84F7
public let GL_MAX_RECTANGLE_TEXTURE_SIZE=0x84F8
public let GL_R8_SNORM=0x8F94
public let GL_RG8_SNORM=0x8F95
public let GL_RGB8_SNORM=0x8F96
public let GL_RGBA8_SNORM=0x8F97
public let GL_R16_SNORM=0x8F98
public let GL_RG16_SNORM=0x8F99
public let GL_RGB16_SNORM=0x8F9A
public let GL_RGBA16_SNORM=0x8F9B
public let GL_SIGNED_NORMALIZED=0x8F9C
public let GL_PRIMITIVE_RESTART=0x8F9D
public let GL_PRIMITIVE_RESTART_INDEX=0x8F9E
public let GL_COPY_READ_BUFFER=0x8F36
public let GL_COPY_WRITE_BUFFER=0x8F37
public let GL_UNIFORM_BUFFER=0x8A11
public let GL_UNIFORM_BUFFER_BINDING=0x8A28
public let GL_UNIFORM_BUFFER_START=0x8A29
public let GL_UNIFORM_BUFFER_SIZE=0x8A2A
public let GL_MAX_VERTEX_UNIFORM_BLOCKS=0x8A2B
public let GL_MAX_GEOMETRY_UNIFORM_BLOCKS=0x8A2C
public let GL_MAX_FRAGMENT_UNIFORM_BLOCKS=0x8A2D
public let GL_MAX_COMBINED_UNIFORM_BLOCKS=0x8A2E
public let GL_MAX_UNIFORM_BUFFER_BINDINGS=0x8A2F
public let GL_MAX_UNIFORM_BLOCK_SIZE=0x8A30
public let GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS=0x8A31
public let GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS=0x8A32
public let GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS=0x8A33
public let GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT=0x8A34
public let GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH=0x8A35
public let GL_ACTIVE_UNIFORM_BLOCKS=0x8A36
public let GL_UNIFORM_TYPE=0x8A37
public let GL_UNIFORM_SIZE=0x8A38
public let GL_UNIFORM_NAME_LENGTH=0x8A39
public let GL_UNIFORM_BLOCK_INDEX=0x8A3A
public let GL_UNIFORM_OFFSET=0x8A3B
public let GL_UNIFORM_ARRAY_STRIDE=0x8A3C
public let GL_UNIFORM_MATRIX_STRIDE=0x8A3D
public let GL_UNIFORM_IS_ROW_MAJOR=0x8A3E
public let GL_UNIFORM_BLOCK_BINDING=0x8A3F
public let GL_UNIFORM_BLOCK_DATA_SIZE=0x8A40
public let GL_UNIFORM_BLOCK_NAME_LENGTH=0x8A41
public let GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS=0x8A42
public let GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES=0x8A43
public let GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER=0x8A44
public let GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER=0x8A45
public let GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER=0x8A46
public let GL_INVALID_INDEX=0xFFFFFFFF
public let GL_CONTEXT_CORE_PROFILE_BIT=0x00000001
public let GL_CONTEXT_COMPATIBILITY_PROFILE_BIT=0x00000002
public let GL_LINES_ADJACENCY=0x000A
public let GL_LINE_STRIP_ADJACENCY=0x000B
public let GL_TRIANGLES_ADJACENCY=0x000C
public let GL_TRIANGLE_STRIP_ADJACENCY=0x000D
public let GL_PROGRAM_POINT_SIZE=0x8642
public let GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS=0x8C29
public let GL_FRAMEBUFFER_ATTACHMENT_LAYERED=0x8DA7
public let GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS=0x8DA8
public let GL_GEOMETRY_SHADER=0x8DD9
public let GL_GEOMETRY_VERTICES_OUT=0x8916
public let GL_GEOMETRY_INPUT_TYPE=0x8917
public let GL_GEOMETRY_OUTPUT_TYPE=0x8918
public let GL_MAX_GEOMETRY_UNIFORM_COMPONENTS=0x8DDF
public let GL_MAX_GEOMETRY_OUTPUT_VERTICES=0x8DE0
public let GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS=0x8DE1
public let GL_MAX_VERTEX_OUTPUT_COMPONENTS=0x9122
public let GL_MAX_GEOMETRY_INPUT_COMPONENTS=0x9123
public let GL_MAX_GEOMETRY_OUTPUT_COMPONENTS=0x9124
public let GL_MAX_FRAGMENT_INPUT_COMPONENTS=0x9125
public let GL_CONTEXT_PROFILE_MASK=0x9126
public let GL_DEPTH_CLAMP=0x864F
public let GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION=0x8E4C
public let GL_FIRST_VERTEX_CONVENTION=0x8E4D
public let GL_LAST_VERTEX_CONVENTION=0x8E4E
public let GL_PROVOKING_VERTEX=0x8E4F
public let GL_TEXTURE_CUBE_MAP_SEAMLESS=0x884F
public let GL_MAX_SERVER_WAIT_TIMEOUT=0x9111
public let GL_OBJECT_TYPE=0x9112
public let GL_SYNC_CONDITION=0x9113
public let GL_SYNC_STATUS=0x9114
public let GL_SYNC_FLAGS=0x9115
public let GL_SYNC_FENCE=0x9116
public let GL_SYNC_GPU_COMMANDS_COMPLETE=0x9117
public let GL_UNSIGNALED=0x9118
public let GL_SIGNALED=0x9119
public let GL_ALREADY_SIGNALED=0x911A
public let GL_TIMEOUT_EXPIRED=0x911B
public let GL_CONDITION_SATISFIED=0x911C
public let GL_WAIT_FAILED=0x911D
public let GL_TIMEOUT_IGNORED:UInt64=0xFFFFFFFFFFFFFFFF
public let GL_SYNC_FLUSH_COMMANDS_BIT=0x00000001
public let GL_SAMPLE_POSITION=0x8E50
public let GL_SAMPLE_MASK=0x8E51
public let GL_SAMPLE_MASK_VALUE=0x8E52
public let GL_MAX_SAMPLE_MASK_WORDS=0x8E59
public let GL_TEXTURE_2D_MULTISAMPLE=0x9100
public let GL_PROXY_TEXTURE_2D_MULTISAMPLE=0x9101
public let GL_TEXTURE_2D_MULTISAMPLE_ARRAY=0x9102
public let GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY=0x9103
public let GL_TEXTURE_BINDING_2D_MULTISAMPLE=0x9104
public let GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY=0x9105
public let GL_TEXTURE_SAMPLES=0x9106
public let GL_TEXTURE_FIXED_SAMPLE_LOCATIONS=0x9107
public let GL_SAMPLER_2D_MULTISAMPLE=0x9108
public let GL_INT_SAMPLER_2D_MULTISAMPLE=0x9109
public let GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE=0x910A
public let GL_SAMPLER_2D_MULTISAMPLE_ARRAY=0x910B
public let GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY=0x910C
public let GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY=0x910D
public let GL_MAX_COLOR_TEXTURE_SAMPLES=0x910E
public let GL_MAX_DEPTH_TEXTURE_SAMPLES=0x910F
public let GL_MAX_INTEGER_SAMPLES=0x9110
public let GL_VERTEX_ATTRIB_ARRAY_DIVISOR=0x88FE
public let GL_SRC1_COLOR=0x88F9
public let GL_ONE_MINUS_SRC1_COLOR=0x88FA
public let GL_ONE_MINUS_SRC1_ALPHA=0x88FB
public let GL_MAX_DUAL_SOURCE_DRAW_BUFFERS=0x88FC
public let GL_ANY_SAMPLES_PASSED=0x8C2F
public let GL_SAMPLER_BINDING=0x8919
public let GL_RGB10_A2UI=0x906F
public let GL_TEXTURE_SWIZZLE_R=0x8E42
public let GL_TEXTURE_SWIZZLE_G=0x8E43
public let GL_TEXTURE_SWIZZLE_B=0x8E44
public let GL_TEXTURE_SWIZZLE_A=0x8E45
public let GL_TEXTURE_SWIZZLE_RGBA=0x8E46
public let GL_TIME_ELAPSED=0x88BF
public let GL_TIMESTAMP=0x8E28
public let GL_INT_2_10_10_10_REV=0x8D9F
public let GL_SAMPLE_SHADING=0x8C36
public let GL_MIN_SAMPLE_SHADING_VALUE=0x8C37
public let GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET=0x8E5E
public let GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET=0x8E5F
public let GL_TEXTURE_CUBE_MAP_ARRAY=0x9009
public let GL_TEXTURE_BINDING_CUBE_MAP_ARRAY=0x900A
public let GL_PROXY_TEXTURE_CUBE_MAP_ARRAY=0x900B
public let GL_SAMPLER_CUBE_MAP_ARRAY=0x900C
public let GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW=0x900D
public let GL_INT_SAMPLER_CUBE_MAP_ARRAY=0x900E
public let GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY=0x900F
public let GL_DRAW_INDIRECT_BUFFER=0x8F3F
public let GL_DRAW_INDIRECT_BUFFER_BINDING=0x8F43
public let GL_GEOMETRY_SHADER_INVOCATIONS=0x887F
public let GL_MAX_GEOMETRY_SHADER_INVOCATIONS=0x8E5A
public let GL_MIN_FRAGMENT_INTERPOLATION_OFFSET=0x8E5B
public let GL_MAX_FRAGMENT_INTERPOLATION_OFFSET=0x8E5C
public let GL_FRAGMENT_INTERPOLATION_OFFSET_BITS=0x8E5D
public let GL_MAX_VERTEX_STREAMS=0x8E71
public let GL_DOUBLE_VEC2=0x8FFC
public let GL_DOUBLE_VEC3=0x8FFD
public let GL_DOUBLE_VEC4=0x8FFE
public let GL_DOUBLE_MAT2=0x8F46
public let GL_DOUBLE_MAT3=0x8F47
public let GL_DOUBLE_MAT4=0x8F48
public let GL_DOUBLE_MAT2x3=0x8F49
public let GL_DOUBLE_MAT2x4=0x8F4A
public let GL_DOUBLE_MAT3x2=0x8F4B
public let GL_DOUBLE_MAT3x4=0x8F4C
public let GL_DOUBLE_MAT4x2=0x8F4D
public let GL_DOUBLE_MAT4x3=0x8F4E
public let GL_ACTIVE_SUBROUTINES=0x8DE5
public let GL_ACTIVE_SUBROUTINE_UNIFORMS=0x8DE6
public let GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS=0x8E47
public let GL_ACTIVE_SUBROUTINE_MAX_LENGTH=0x8E48
public let GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH=0x8E49
public let GL_MAX_SUBROUTINES=0x8DE7
public let GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS=0x8DE8
public let GL_NUM_COMPATIBLE_SUBROUTINES=0x8E4A
public let GL_COMPATIBLE_SUBROUTINES=0x8E4B
public let GL_PATCHES=0x000E
public let GL_PATCH_VERTICES=0x8E72
public let GL_PATCH_DEFAULT_INNER_LEVEL=0x8E73
public let GL_PATCH_DEFAULT_OUTER_LEVEL=0x8E74
public let GL_TESS_CONTROL_OUTPUT_VERTICES=0x8E75
public let GL_TESS_GEN_MODE=0x8E76
public let GL_TESS_GEN_SPACING=0x8E77
public let GL_TESS_GEN_VERTEX_ORDER=0x8E78
public let GL_TESS_GEN_POINT_MODE=0x8E79
public let GL_ISOLINES=0x8E7A
public let GL_FRACTIONAL_ODD=0x8E7B
public let GL_FRACTIONAL_EVEN=0x8E7C
public let GL_MAX_PATCH_VERTICES=0x8E7D
public let GL_MAX_TESS_GEN_LEVEL=0x8E7E
public let GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS=0x8E7F
public let GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS=0x8E80
public let GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS=0x8E81
public let GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS=0x8E82
public let GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS=0x8E83
public let GL_MAX_TESS_PATCH_COMPONENTS=0x8E84
public let GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS=0x8E85
public let GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS=0x8E86
public let GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS=0x8E89
public let GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS=0x8E8A
public let GL_MAX_TESS_CONTROL_INPUT_COMPONENTS=0x886C
public let GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS=0x886D
public let GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS=0x8E1E
public let GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS=0x8E1F
public let GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER=0x84F0
public let GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER=0x84F1
public let GL_TESS_EVALUATION_SHADER=0x8E87
public let GL_TESS_CONTROL_SHADER=0x8E88
public let GL_TRANSFORM_FEEDBACK=0x8E22
public let GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED=0x8E23
public let GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE=0x8E24
public let GL_TRANSFORM_FEEDBACK_BINDING=0x8E25
public let GL_MAX_TRANSFORM_FEEDBACK_BUFFERS=0x8E70
public let GL_FIXED=0x140C
public let GL_IMPLEMENTATION_COLOR_READ_TYPE=0x8B9A
public let GL_IMPLEMENTATION_COLOR_READ_FORMAT=0x8B9B
public let GL_LOW_FLOAT=0x8DF0
public let GL_MEDIUM_FLOAT=0x8DF1
public let GL_HIGH_FLOAT=0x8DF2
public let GL_LOW_INT=0x8DF3
public let GL_MEDIUM_INT=0x8DF4
public let GL_HIGH_INT=0x8DF5
public let GL_SHADER_COMPILER=0x8DFA
public let GL_SHADER_BINARY_FORMATS=0x8DF8
public let GL_NUM_SHADER_BINARY_FORMATS=0x8DF9
public let GL_MAX_VERTEX_UNIFORM_VECTORS=0x8DFB
public let GL_MAX_VARYING_VECTORS=0x8DFC
public let GL_MAX_FRAGMENT_UNIFORM_VECTORS=0x8DFD
public let GL_RGB565=0x8D62
public let GL_PROGRAM_BINARY_RETRIEVABLE_HINT=0x8257
public let GL_PROGRAM_BINARY_LENGTH=0x8741
public let GL_NUM_PROGRAM_BINARY_FORMATS=0x87FE
public let GL_PROGRAM_BINARY_FORMATS=0x87FF
public let GL_VERTEX_SHADER_BIT=0x00000001
public let GL_FRAGMENT_SHADER_BIT=0x00000002
public let GL_GEOMETRY_SHADER_BIT=0x00000004
public let GL_TESS_CONTROL_SHADER_BIT=0x00000008
public let GL_TESS_EVALUATION_SHADER_BIT=0x00000010
public let GL_ALL_SHADER_BITS=0xFFFFFFFF
public let GL_PROGRAM_SEPARABLE=0x8258
public let GL_ACTIVE_PROGRAM=0x8259
public let GL_PROGRAM_PIPELINE_BINDING=0x825A
public let GL_MAX_VIEWPORTS=0x825B
public let GL_VIEWPORT_SUBPIXEL_BITS=0x825C
public let GL_VIEWPORT_BOUNDS_RANGE=0x825D
public let GL_LAYER_PROVOKING_VERTEX=0x825E
public let GL_VIEWPORT_INDEX_PROVOKING_VERTEX=0x825F
public let GL_UNDEFINED_VERTEX=0x8260
public let GL_COPY_READ_BUFFER_BINDING=0x8F36
public let GL_COPY_WRITE_BUFFER_BINDING=0x8F37
public let GL_TRANSFORM_FEEDBACK_ACTIVE=0x8E24
public let GL_TRANSFORM_FEEDBACK_PAUSED=0x8E23
public let GL_UNPACK_COMPRESSED_BLOCK_WIDTH=0x9127
public let GL_UNPACK_COMPRESSED_BLOCK_HEIGHT=0x9128
public let GL_UNPACK_COMPRESSED_BLOCK_DEPTH=0x9129
public let GL_UNPACK_COMPRESSED_BLOCK_SIZE=0x912A
public let GL_PACK_COMPRESSED_BLOCK_WIDTH=0x912B
public let GL_PACK_COMPRESSED_BLOCK_HEIGHT=0x912C
public let GL_PACK_COMPRESSED_BLOCK_DEPTH=0x912D
public let GL_PACK_COMPRESSED_BLOCK_SIZE=0x912E
public let GL_NUM_SAMPLE_COUNTS=0x9380
public let GL_MIN_MAP_BUFFER_ALIGNMENT=0x90BC
public let GL_ATOMIC_COUNTER_BUFFER=0x92C0
public let GL_ATOMIC_COUNTER_BUFFER_BINDING=0x92C1
public let GL_ATOMIC_COUNTER_BUFFER_START=0x92C2
public let GL_ATOMIC_COUNTER_BUFFER_SIZE=0x92C3
public let GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE=0x92C4
public let GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS=0x92C5
public let GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES=0x92C6
public let GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER=0x92C7
public let GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER=0x92C8
public let GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER=0x92C9
public let GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER=0x92CA
public let GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER=0x92CB
public let GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS=0x92CC
public let GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS=0x92CD
public let GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS=0x92CE
public let GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS=0x92CF
public let GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS=0x92D0
public let GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS=0x92D1
public let GL_MAX_VERTEX_ATOMIC_COUNTERS=0x92D2
public let GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS=0x92D3
public let GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS=0x92D4
public let GL_MAX_GEOMETRY_ATOMIC_COUNTERS=0x92D5
public let GL_MAX_FRAGMENT_ATOMIC_COUNTERS=0x92D6
public let GL_MAX_COMBINED_ATOMIC_COUNTERS=0x92D7
public let GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE=0x92D8
public let GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS=0x92DC
public let GL_ACTIVE_ATOMIC_COUNTER_BUFFERS=0x92D9
public let GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX=0x92DA
public let GL_UNSIGNED_INT_ATOMIC_COUNTER=0x92DB
public let GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT=0x00000001
public let GL_ELEMENT_ARRAY_BARRIER_BIT=0x00000002
public let GL_UNIFORM_BARRIER_BIT=0x00000004
public let GL_TEXTURE_FETCH_BARRIER_BIT=0x00000008
public let GL_SHADER_IMAGE_ACCESS_BARRIER_BIT=0x00000020
public let GL_COMMAND_BARRIER_BIT=0x00000040
public let GL_PIXEL_BUFFER_BARRIER_BIT=0x00000080
public let GL_TEXTURE_UPDATE_BARRIER_BIT=0x00000100
public let GL_BUFFER_UPDATE_BARRIER_BIT=0x00000200
public let GL_FRAMEBUFFER_BARRIER_BIT=0x00000400
public let GL_TRANSFORM_FEEDBACK_BARRIER_BIT=0x00000800
public let GL_ATOMIC_COUNTER_BARRIER_BIT=0x00001000
public let GL_ALL_BARRIER_BITS=0xFFFFFFFF
public let GL_MAX_IMAGE_UNITS=0x8F38
public let GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS=0x8F39
public let GL_IMAGE_BINDING_NAME=0x8F3A
public let GL_IMAGE_BINDING_LEVEL=0x8F3B
public let GL_IMAGE_BINDING_LAYERED=0x8F3C
public let GL_IMAGE_BINDING_LAYER=0x8F3D
public let GL_IMAGE_BINDING_ACCESS=0x8F3E
public let GL_IMAGE_1D=0x904C
public let GL_IMAGE_2D=0x904D
public let GL_IMAGE_3D=0x904E
public let GL_IMAGE_2D_RECT=0x904F
public let GL_IMAGE_CUBE=0x9050
public let GL_IMAGE_BUFFER=0x9051
public let GL_IMAGE_1D_ARRAY=0x9052
public let GL_IMAGE_2D_ARRAY=0x9053
public let GL_IMAGE_CUBE_MAP_ARRAY=0x9054
public let GL_IMAGE_2D_MULTISAMPLE=0x9055
public let GL_IMAGE_2D_MULTISAMPLE_ARRAY=0x9056
public let GL_INT_IMAGE_1D=0x9057
public let GL_INT_IMAGE_2D=0x9058
public let GL_INT_IMAGE_3D=0x9059
public let GL_INT_IMAGE_2D_RECT=0x905A
public let GL_INT_IMAGE_CUBE=0x905B
public let GL_INT_IMAGE_BUFFER=0x905C
public let GL_INT_IMAGE_1D_ARRAY=0x905D
public let GL_INT_IMAGE_2D_ARRAY=0x905E
public let GL_INT_IMAGE_CUBE_MAP_ARRAY=0x905F
public let GL_INT_IMAGE_2D_MULTISAMPLE=0x9060
public let GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY=0x9061
public let GL_UNSIGNED_INT_IMAGE_1D=0x9062
public let GL_UNSIGNED_INT_IMAGE_2D=0x9063
public let GL_UNSIGNED_INT_IMAGE_3D=0x9064
public let GL_UNSIGNED_INT_IMAGE_2D_RECT=0x9065
public let GL_UNSIGNED_INT_IMAGE_CUBE=0x9066
public let GL_UNSIGNED_INT_IMAGE_BUFFER=0x9067
public let GL_UNSIGNED_INT_IMAGE_1D_ARRAY=0x9068
public let GL_UNSIGNED_INT_IMAGE_2D_ARRAY=0x9069
public let GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY=0x906A
public let GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE=0x906B
public let GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY=0x906C
public let GL_MAX_IMAGE_SAMPLES=0x906D
public let GL_IMAGE_BINDING_FORMAT=0x906E
public let GL_IMAGE_FORMAT_COMPATIBILITY_TYPE=0x90C7
public let GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE=0x90C8
public let GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS=0x90C9
public let GL_MAX_VERTEX_IMAGE_UNIFORMS=0x90CA
public let GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS=0x90CB
public let GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS=0x90CC
public let GL_MAX_GEOMETRY_IMAGE_UNIFORMS=0x90CD
public let GL_MAX_FRAGMENT_IMAGE_UNIFORMS=0x90CE
public let GL_MAX_COMBINED_IMAGE_UNIFORMS=0x90CF
public let GL_COMPRESSED_RGBA_BPTC_UNORM=0x8E8C
public let GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM=0x8E8D
public let GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT=0x8E8E
public let GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT=0x8E8F
public let GL_TEXTURE_IMMUTABLE_FORMAT=0x912F
public let GL_NUM_SHADING_LANGUAGE_VERSIONS=0x82E9
public let GL_VERTEX_ATTRIB_ARRAY_LONG=0x874E
public let GL_COMPRESSED_RGB8_ETC2=0x9274
public let GL_COMPRESSED_SRGB8_ETC2=0x9275
public let GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2=0x9276
public let GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2=0x9277
public let GL_COMPRESSED_RGBA8_ETC2_EAC=0x9278
public let GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC=0x9279
public let GL_COMPRESSED_R11_EAC=0x9270
public let GL_COMPRESSED_SIGNED_R11_EAC=0x9271
public let GL_COMPRESSED_RG11_EAC=0x9272
public let GL_COMPRESSED_SIGNED_RG11_EAC=0x9273
public let GL_PRIMITIVE_RESTART_FIXED_INDEX=0x8D69
public let GL_ANY_SAMPLES_PASSED_CONSERVATIVE=0x8D6A
public let GL_MAX_ELEMENT_INDEX=0x8D6B
public let GL_COMPUTE_SHADER=0x91B9
public let GL_MAX_COMPUTE_UNIFORM_BLOCKS=0x91BB
public let GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS=0x91BC
public let GL_MAX_COMPUTE_IMAGE_UNIFORMS=0x91BD
public let GL_MAX_COMPUTE_SHARED_MEMORY_SIZE=0x8262
public let GL_MAX_COMPUTE_UNIFORM_COMPONENTS=0x8263
public let GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS=0x8264
public let GL_MAX_COMPUTE_ATOMIC_COUNTERS=0x8265
public let GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS=0x8266
public let GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS=0x90EB
public let GL_MAX_COMPUTE_WORK_GROUP_COUNT=0x91BE
public let GL_MAX_COMPUTE_WORK_GROUP_SIZE=0x91BF
public let GL_COMPUTE_WORK_GROUP_SIZE=0x8267
public let GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER=0x90EC
public let GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER=0x90ED
public let GL_DISPATCH_INDIRECT_BUFFER=0x90EE
public let GL_DISPATCH_INDIRECT_BUFFER_BINDING=0x90EF
public let GL_COMPUTE_SHADER_BIT=0x00000020
public let GL_DEBUG_OUTPUT_SYNCHRONOUS=0x8242
public let GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH=0x8243
public let GL_DEBUG_CALLBACK_FUNCTION=0x8244
public let GL_DEBUG_CALLBACK_USER_PARAM=0x8245
public let GL_DEBUG_SOURCE_API=0x8246
public let GL_DEBUG_SOURCE_WINDOW_SYSTEM=0x8247
public let GL_DEBUG_SOURCE_SHADER_COMPILER=0x8248
public let GL_DEBUG_SOURCE_THIRD_PARTY=0x8249
public let GL_DEBUG_SOURCE_APPLICATION=0x824A
public let GL_DEBUG_SOURCE_OTHER=0x824B
public let GL_DEBUG_TYPE_ERROR=0x824C
public let GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR=0x824D
public let GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR=0x824E
public let GL_DEBUG_TYPE_PORTABILITY=0x824F
public let GL_DEBUG_TYPE_PERFORMANCE=0x8250
public let GL_DEBUG_TYPE_OTHER=0x8251
public let GL_MAX_DEBUG_MESSAGE_LENGTH=0x9143
public let GL_MAX_DEBUG_LOGGED_MESSAGES=0x9144
public let GL_DEBUG_LOGGED_MESSAGES=0x9145
public let GL_DEBUG_SEVERITY_HIGH=0x9146
public let GL_DEBUG_SEVERITY_MEDIUM=0x9147
public let GL_DEBUG_SEVERITY_LOW=0x9148
public let GL_DEBUG_TYPE_MARKER=0x8268
public let GL_DEBUG_TYPE_PUSH_GROUP=0x8269
public let GL_DEBUG_TYPE_POP_GROUP=0x826A
public let GL_DEBUG_SEVERITY_NOTIFICATION=0x826B
public let GL_MAX_DEBUG_GROUP_STACK_DEPTH=0x826C
public let GL_DEBUG_GROUP_STACK_DEPTH=0x826D
public let GL_BUFFER=0x82E0
public let GL_SHADER=0x82E1
public let GL_PROGRAM=0x82E2
public let GL_QUERY=0x82E3
public let GL_PROGRAM_PIPELINE=0x82E4
public let GL_SAMPLER=0x82E6
public let GL_MAX_LABEL_LENGTH=0x82E8
public let GL_DEBUG_OUTPUT=0x92E0
public let GL_CONTEXT_FLAG_DEBUG_BIT=0x00000002
public let GL_MAX_UNIFORM_LOCATIONS=0x826E
public let GL_FRAMEBUFFER_DEFAULT_WIDTH=0x9310
public let GL_FRAMEBUFFER_DEFAULT_HEIGHT=0x9311
public let GL_FRAMEBUFFER_DEFAULT_LAYERS=0x9312
public let GL_FRAMEBUFFER_DEFAULT_SAMPLES=0x9313
public let GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS=0x9314
public let GL_MAX_FRAMEBUFFER_WIDTH=0x9315
public let GL_MAX_FRAMEBUFFER_HEIGHT=0x9316
public let GL_MAX_FRAMEBUFFER_LAYERS=0x9317
public let GL_MAX_FRAMEBUFFER_SAMPLES=0x9318
public let GL_INTERNALFORMAT_SUPPORTED=0x826F
public let GL_INTERNALFORMAT_PREFERRED=0x8270
public let GL_INTERNALFORMAT_RED_SIZE=0x8271
public let GL_INTERNALFORMAT_GREEN_SIZE=0x8272
public let GL_INTERNALFORMAT_BLUE_SIZE=0x8273
public let GL_INTERNALFORMAT_ALPHA_SIZE=0x8274
public let GL_INTERNALFORMAT_DEPTH_SIZE=0x8275
public let GL_INTERNALFORMAT_STENCIL_SIZE=0x8276
public let GL_INTERNALFORMAT_SHARED_SIZE=0x8277
public let GL_INTERNALFORMAT_RED_TYPE=0x8278
public let GL_INTERNALFORMAT_GREEN_TYPE=0x8279
public let GL_INTERNALFORMAT_BLUE_TYPE=0x827A
public let GL_INTERNALFORMAT_ALPHA_TYPE=0x827B
public let GL_INTERNALFORMAT_DEPTH_TYPE=0x827C
public let GL_INTERNALFORMAT_STENCIL_TYPE=0x827D
public let GL_MAX_WIDTH=0x827E
public let GL_MAX_HEIGHT=0x827F
public let GL_MAX_DEPTH=0x8280
public let GL_MAX_LAYERS=0x8281
public let GL_MAX_COMBINED_DIMENSIONS=0x8282
public let GL_COLOR_COMPONENTS=0x8283
public let GL_DEPTH_COMPONENTS=0x8284
public let GL_STENCIL_COMPONENTS=0x8285
public let GL_COLOR_RENDERABLE=0x8286
public let GL_DEPTH_RENDERABLE=0x8287
public let GL_STENCIL_RENDERABLE=0x8288
public let GL_FRAMEBUFFER_RENDERABLE=0x8289
public let GL_FRAMEBUFFER_RENDERABLE_LAYERED=0x828A
public let GL_FRAMEBUFFER_BLEND=0x828B
public let GL_READ_PIXELS=0x828C
public let GL_READ_PIXELS_FORMAT=0x828D
public let GL_READ_PIXELS_TYPE=0x828E
public let GL_TEXTURE_IMAGE_FORMAT=0x828F
public let GL_TEXTURE_IMAGE_TYPE=0x8290
public let GL_GET_TEXTURE_IMAGE_FORMAT=0x8291
public let GL_GET_TEXTURE_IMAGE_TYPE=0x8292
public let GL_MIPMAP=0x8293
public let GL_MANUAL_GENERATE_MIPMAP=0x8294
public let GL_AUTO_GENERATE_MIPMAP=0x8295
public let GL_COLOR_ENCODING=0x8296
public let GL_SRGB_READ=0x8297
public let GL_SRGB_WRITE=0x8298
public let GL_FILTER=0x829A
public let GL_VERTEX_TEXTURE=0x829B
public let GL_TESS_CONTROL_TEXTURE=0x829C
public let GL_TESS_EVALUATION_TEXTURE=0x829D
public let GL_GEOMETRY_TEXTURE=0x829E
public let GL_FRAGMENT_TEXTURE=0x829F
public let GL_COMPUTE_TEXTURE=0x82A0
public let GL_TEXTURE_SHADOW=0x82A1
public let GL_TEXTURE_GATHER=0x82A2
public let GL_TEXTURE_GATHER_SHADOW=0x82A3
public let GL_SHADER_IMAGE_LOAD=0x82A4
public let GL_SHADER_IMAGE_STORE=0x82A5
public let GL_SHADER_IMAGE_ATOMIC=0x82A6
public let GL_IMAGE_TEXEL_SIZE=0x82A7
public let GL_IMAGE_COMPATIBILITY_CLASS=0x82A8
public let GL_IMAGE_PIXEL_FORMAT=0x82A9
public let GL_IMAGE_PIXEL_TYPE=0x82AA
public let GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST=0x82AC
public let GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST=0x82AD
public let GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE=0x82AE
public let GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE=0x82AF
public let GL_TEXTURE_COMPRESSED_BLOCK_WIDTH=0x82B1
public let GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT=0x82B2
public let GL_TEXTURE_COMPRESSED_BLOCK_SIZE=0x82B3
public let GL_CLEAR_BUFFER=0x82B4
public let GL_TEXTURE_VIEW=0x82B5
public let GL_VIEW_COMPATIBILITY_CLASS=0x82B6
public let GL_FULL_SUPPORT=0x82B7
public let GL_CAVEAT_SUPPORT=0x82B8
public let GL_IMAGE_CLASS_4_X_32=0x82B9
public let GL_IMAGE_CLASS_2_X_32=0x82BA
public let GL_IMAGE_CLASS_1_X_32=0x82BB
public let GL_IMAGE_CLASS_4_X_16=0x82BC
public let GL_IMAGE_CLASS_2_X_16=0x82BD
public let GL_IMAGE_CLASS_1_X_16=0x82BE
public let GL_IMAGE_CLASS_4_X_8=0x82BF
public let GL_IMAGE_CLASS_2_X_8=0x82C0
public let GL_IMAGE_CLASS_1_X_8=0x82C1
public let GL_IMAGE_CLASS_11_11_10=0x82C2
public let GL_IMAGE_CLASS_10_10_10_2=0x82C3
public let GL_VIEW_CLASS_128_BITS=0x82C4
public let GL_VIEW_CLASS_96_BITS=0x82C5
public let GL_VIEW_CLASS_64_BITS=0x82C6
public let GL_VIEW_CLASS_48_BITS=0x82C7
public let GL_VIEW_CLASS_32_BITS=0x82C8
public let GL_VIEW_CLASS_24_BITS=0x82C9
public let GL_VIEW_CLASS_16_BITS=0x82CA
public let GL_VIEW_CLASS_8_BITS=0x82CB
public let GL_VIEW_CLASS_S3TC_DXT1_RGB=0x82CC
public let GL_VIEW_CLASS_S3TC_DXT1_RGBA=0x82CD
public let GL_VIEW_CLASS_S3TC_DXT3_RGBA=0x82CE
public let GL_VIEW_CLASS_S3TC_DXT5_RGBA=0x82CF
public let GL_VIEW_CLASS_RGTC1_RED=0x82D0
public let GL_VIEW_CLASS_RGTC2_RG=0x82D1
public let GL_VIEW_CLASS_BPTC_UNORM=0x82D2
public let GL_VIEW_CLASS_BPTC_FLOAT=0x82D3
public let GL_UNIFORM=0x92E1
public let GL_UNIFORM_BLOCK=0x92E2
public let GL_PROGRAM_INPUT=0x92E3
public let GL_PROGRAM_OUTPUT=0x92E4
public let GL_BUFFER_VARIABLE=0x92E5
public let GL_SHADER_STORAGE_BLOCK=0x92E6
public let GL_VERTEX_SUBROUTINE=0x92E8
public let GL_TESS_CONTROL_SUBROUTINE=0x92E9
public let GL_TESS_EVALUATION_SUBROUTINE=0x92EA
public let GL_GEOMETRY_SUBROUTINE=0x92EB
public let GL_FRAGMENT_SUBROUTINE=0x92EC
public let GL_COMPUTE_SUBROUTINE=0x92ED
public let GL_VERTEX_SUBROUTINE_UNIFORM=0x92EE
public let GL_TESS_CONTROL_SUBROUTINE_UNIFORM=0x92EF
public let GL_TESS_EVALUATION_SUBROUTINE_UNIFORM=0x92F0
public let GL_GEOMETRY_SUBROUTINE_UNIFORM=0x92F1
public let GL_FRAGMENT_SUBROUTINE_UNIFORM=0x92F2
public let GL_COMPUTE_SUBROUTINE_UNIFORM=0x92F3
public let GL_TRANSFORM_FEEDBACK_VARYING=0x92F4
public let GL_ACTIVE_RESOURCES=0x92F5
public let GL_MAX_NAME_LENGTH=0x92F6
public let GL_MAX_NUM_ACTIVE_VARIABLES=0x92F7
public let GL_MAX_NUM_COMPATIBLE_SUBROUTINES=0x92F8
public let GL_NAME_LENGTH=0x92F9
public let GL_TYPE=0x92FA
public let GL_ARRAY_SIZE=0x92FB
public let GL_OFFSET=0x92FC
public let GL_BLOCK_INDEX=0x92FD
public let GL_ARRAY_STRIDE=0x92FE
public let GL_MATRIX_STRIDE=0x92FF
public let GL_IS_ROW_MAJOR=0x9300
public let GL_ATOMIC_COUNTER_BUFFER_INDEX=0x9301
public let GL_BUFFER_BINDING=0x9302
public let GL_BUFFER_DATA_SIZE=0x9303
public let GL_NUM_ACTIVE_VARIABLES=0x9304
public let GL_ACTIVE_VARIABLES=0x9305
public let GL_REFERENCED_BY_VERTEX_SHADER=0x9306
public let GL_REFERENCED_BY_TESS_CONTROL_SHADER=0x9307
public let GL_REFERENCED_BY_TESS_EVALUATION_SHADER=0x9308
public let GL_REFERENCED_BY_GEOMETRY_SHADER=0x9309
public let GL_REFERENCED_BY_FRAGMENT_SHADER=0x930A
public let GL_REFERENCED_BY_COMPUTE_SHADER=0x930B
public let GL_TOP_LEVEL_ARRAY_SIZE=0x930C
public let GL_TOP_LEVEL_ARRAY_STRIDE=0x930D
public let GL_LOCATION=0x930E
public let GL_LOCATION_INDEX=0x930F
public let GL_IS_PER_PATCH=0x92E7
public let GL_SHADER_STORAGE_BUFFER=0x90D2
public let GL_SHADER_STORAGE_BUFFER_BINDING=0x90D3
public let GL_SHADER_STORAGE_BUFFER_START=0x90D4
public let GL_SHADER_STORAGE_BUFFER_SIZE=0x90D5
public let GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS=0x90D6
public let GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS=0x90D7
public let GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS=0x90D8
public let GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS=0x90D9
public let GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS=0x90DA
public let GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS=0x90DB
public let GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS=0x90DC
public let GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS=0x90DD
public let GL_MAX_SHADER_STORAGE_BLOCK_SIZE=0x90DE
public let GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT=0x90DF
public let GL_SHADER_STORAGE_BARRIER_BIT=0x00002000
public let GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES=0x8F39
public let GL_DEPTH_STENCIL_TEXTURE_MODE=0x90EA
public let GL_TEXTURE_BUFFER_OFFSET=0x919D
public let GL_TEXTURE_BUFFER_SIZE=0x919E
public let GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT=0x919F
public let GL_TEXTURE_VIEW_MIN_LEVEL=0x82DB
public let GL_TEXTURE_VIEW_NUM_LEVELS=0x82DC
public let GL_TEXTURE_VIEW_MIN_LAYER=0x82DD
public let GL_TEXTURE_VIEW_NUM_LAYERS=0x82DE
public let GL_TEXTURE_IMMUTABLE_LEVELS=0x82DF
public let GL_VERTEX_ATTRIB_BINDING=0x82D4
public let GL_VERTEX_ATTRIB_RELATIVE_OFFSET=0x82D5
public let GL_VERTEX_BINDING_DIVISOR=0x82D6
public let GL_VERTEX_BINDING_OFFSET=0x82D7
public let GL_VERTEX_BINDING_STRIDE=0x82D8
public let GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET=0x82D9
public let GL_MAX_VERTEX_ATTRIB_BINDINGS=0x82DA
public let GL_VERTEX_BINDING_BUFFER=0x8F4F
public let GL_DISPLAY_LIST=0x82E7
public let GL_MAX_VERTEX_ATTRIB_STRIDE=0x82E5
public let GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED=0x8221
public let GL_TEXTURE_BUFFER_BINDING=0x8C2A
public let GL_MAP_PERSISTENT_BIT=0x0040
public let GL_MAP_COHERENT_BIT=0x0080
public let GL_DYNAMIC_STORAGE_BIT=0x0100
public let GL_CLIENT_STORAGE_BIT=0x0200
public let GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT=0x00004000
public let GL_BUFFER_IMMUTABLE_STORAGE=0x821F
public let GL_BUFFER_STORAGE_FLAGS=0x8220
public let GL_CLEAR_TEXTURE=0x9365
public let GL_LOCATION_COMPONENT=0x934A
public let GL_TRANSFORM_FEEDBACK_BUFFER_INDEX=0x934B
public let GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE=0x934C
public let GL_QUERY_BUFFER=0x9192
public let GL_QUERY_BUFFER_BARRIER_BIT=0x00008000
public let GL_QUERY_BUFFER_BINDING=0x9193
public let GL_QUERY_RESULT_NO_WAIT=0x9194
public let GL_MIRROR_CLAMP_TO_EDGE=0x8743
public let GL_CONTEXT_LOST=0x0507
public let GL_NEGATIVE_ONE_TO_ONE=0x935E
public let GL_ZERO_TO_ONE=0x935F
public let GL_CLIP_ORIGIN=0x935C
public let GL_CLIP_DEPTH_MODE=0x935D
public let GL_QUERY_WAIT_INVERTED=0x8E17
public let GL_QUERY_NO_WAIT_INVERTED=0x8E18
public let GL_QUERY_BY_REGION_WAIT_INVERTED=0x8E19
public let GL_QUERY_BY_REGION_NO_WAIT_INVERTED=0x8E1A
public let GL_MAX_CULL_DISTANCES=0x82F9
public let GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES=0x82FA
public let GL_TEXTURE_TARGET=0x1006
public let GL_QUERY_TARGET=0x82EA
public let GL_GUILTY_CONTEXT_RESET=0x8253
public let GL_INNOCENT_CONTEXT_RESET=0x8254
public let GL_UNKNOWN_CONTEXT_RESET=0x8255
public let GL_RESET_NOTIFICATION_STRATEGY=0x8256
public let GL_LOSE_CONTEXT_ON_RESET=0x8252
public let GL_NO_RESET_NOTIFICATION=0x8261
public let GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT=0x00000004
public let GL_COLOR_TABLE=0x80D0
public let GL_POST_CONVOLUTION_COLOR_TABLE=0x80D1
public let GL_POST_COLOR_MATRIX_COLOR_TABLE=0x80D2
public let GL_PROXY_COLOR_TABLE=0x80D3
public let GL_PROXY_POST_CONVOLUTION_COLOR_TABLE=0x80D4
public let GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE=0x80D5
public let GL_CONVOLUTION_1D=0x8010
public let GL_CONVOLUTION_2D=0x8011
public let GL_SEPARABLE_2D=0x8012
public let GL_HISTOGRAM=0x8024
public let GL_PROXY_HISTOGRAM=0x8025
public let GL_MINMAX=0x802E
public let GL_CONTEXT_RELEASE_BEHAVIOR=0x82FB
public let GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH=0x82FC
public let GL_SHADER_BINARY_FORMAT_SPIR_V=0x9551
public let GL_SPIR_V_BINARY=0x9552
public let GL_PARAMETER_BUFFER=0x80EE
public let GL_PARAMETER_BUFFER_BINDING=0x80EF
public let GL_CONTEXT_FLAG_NO_ERROR_BIT=0x00000008
public let GL_VERTICES_SUBMITTED=0x82EE
public let GL_PRIMITIVES_SUBMITTED=0x82EF
public let GL_VERTEX_SHADER_INVOCATIONS=0x82F0
public let GL_TESS_CONTROL_SHADER_PATCHES=0x82F1
public let GL_TESS_EVALUATION_SHADER_INVOCATIONS=0x82F2
public let GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED=0x82F3
public let GL_FRAGMENT_SHADER_INVOCATIONS=0x82F4
public let GL_COMPUTE_SHADER_INVOCATIONS=0x82F5
public let GL_CLIPPING_INPUT_PRIMITIVES=0x82F6
public let GL_CLIPPING_OUTPUT_PRIMITIVES=0x82F7
public let GL_POLYGON_OFFSET_CLAMP=0x8E1B
public let GL_SPIR_V_EXTENSIONS=0x9553
public let GL_NUM_SPIR_V_EXTENSIONS=0x9554
public let GL_TEXTURE_MAX_ANISOTROPY=0x84FE
public let GL_MAX_TEXTURE_MAX_ANISOTROPY=0x84FF
public let GL_TRANSFORM_FEEDBACK_OVERFLOW=0x82EC
public let GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW=0x82ED
/////////////////临时地址存储////////////////////
    var openglActiveShaderProgram=CPointer<Unit>()
    var openglActiveTexture=CPointer<Unit>()
    var openglAttachShader=CPointer<Unit>()
    var openglBeginConditionalRender=CPointer<Unit>()
    var openglBeginQuery=CPointer<Unit>()
    var openglBeginQueryIndexed=CPointer<Unit>()
    var openglBeginTransformFeedback=CPointer<Unit>()
    var openglBindAttribLocation=CPointer<Unit>()
    var openglBindBuffer=CPointer<Unit>()
    var openglBindBufferBase=CPointer<Unit>()
    var openglBindBufferRange=CPointer<Unit>()
    var openglBindBuffersBase=CPointer<Unit>()
    var openglBindBuffersRange=CPointer<Unit>()
    var openglBindFragDataLocation=CPointer<Unit>()
    var openglBindFragDataLocationIndexed=CPointer<Unit>()
    var openglBindFramebuffer=CPointer<Unit>()
    var openglBindImageTexture=CPointer<Unit>()
    var openglBindImageTextures=CPointer<Unit>()
    var openglBindProgramPipeline=CPointer<Unit>()
    var openglBindRenderbuffer=CPointer<Unit>()
    var openglBindSampler=CPointer<Unit>()
    var openglBindSamplers=CPointer<Unit>()
    var openglBindTexture=CPointer<Unit>()
    var openglBindTextureUnit=CPointer<Unit>()
    var openglBindTextures=CPointer<Unit>()
    var openglBindTransformFeedback=CPointer<Unit>()
    var openglBindVertexArray=CPointer<Unit>()
    var openglBindVertexBuffer=CPointer<Unit>()
    var openglBindVertexBuffers=CPointer<Unit>()
    var openglBlendColor=CPointer<Unit>()
    var openglBlendEquation=CPointer<Unit>()
    var openglBlendEquationSeparate=CPointer<Unit>()
    var openglBlendEquationSeparatei=CPointer<Unit>()
    var openglBlendEquationi=CPointer<Unit>()
    var openglBlendFunc=CPointer<Unit>()
    var openglBlendFuncSeparate=CPointer<Unit>()
    var openglBlendFuncSeparatei=CPointer<Unit>()
    var openglBlendFunci=CPointer<Unit>()
    var openglBlitFramebuffer=CPointer<Unit>()
    var openglBlitNamedFramebuffer=CPointer<Unit>()
    var openglBufferData=CPointer<Unit>()
    var openglBufferStorage=CPointer<Unit>()
    var openglBufferSubData=CPointer<Unit>()
    var openglCheckFramebufferStatus=CPointer<Unit>()
    var openglCheckNamedFramebufferStatus=CPointer<Unit>()
    var openglClampColor=CPointer<Unit>()
    var openglClear=CPointer<Unit>()
    var openglClearBufferData=CPointer<Unit>()
    var openglClearBufferSubData=CPointer<Unit>()
    var openglClearBufferfi=CPointer<Unit>()
    var openglClearBufferfv=CPointer<Unit>()
    var openglClearBufferiv=CPointer<Unit>()
    var openglClearBufferuiv=CPointer<Unit>()
    var openglClearColor=CPointer<Unit>()
    var openglClearDepth=CPointer<Unit>()
    var openglClearDepthf=CPointer<Unit>()
    var openglClearNamedBufferData=CPointer<Unit>()
    var openglClearNamedBufferSubData=CPointer<Unit>()
    var openglClearNamedFramebufferfi=CPointer<Unit>()
    var openglClearNamedFramebufferfv=CPointer<Unit>()
    var openglClearNamedFramebufferiv=CPointer<Unit>()
    var openglClearNamedFramebufferuiv=CPointer<Unit>()
    var openglClearStencil=CPointer<Unit>()
    var openglClearTexImage=CPointer<Unit>()
    var openglClearTexSubImage=CPointer<Unit>()
    var openglClientWaitSync=CPointer<Unit>()
    var openglClipControl=CPointer<Unit>()
    var openglColorMask=CPointer<Unit>()
    var openglColorMaski=CPointer<Unit>()
    var openglCompileShader=CPointer<Unit>()
    var openglCompressedTexImage1D=CPointer<Unit>()
    var openglCompressedTexImage2D=CPointer<Unit>()
    var openglCompressedTexImage3D=CPointer<Unit>()
    var openglCompressedTexSubImage1D=CPointer<Unit>()
    var openglCompressedTexSubImage2D=CPointer<Unit>()
    var openglCompressedTexSubImage3D=CPointer<Unit>()
    var openglCompressedTextureSubImage1D=CPointer<Unit>()
    var openglCompressedTextureSubImage2D=CPointer<Unit>()
    var openglCompressedTextureSubImage3D=CPointer<Unit>()
    var openglCopyBufferSubData=CPointer<Unit>()
    var openglCopyImageSubData=CPointer<Unit>()
    var openglCopyNamedBufferSubData=CPointer<Unit>()
    var openglCopyTexImage1D=CPointer<Unit>()
    var openglCopyTexImage2D=CPointer<Unit>()
    var openglCopyTexSubImage1D=CPointer<Unit>()
    var openglCopyTexSubImage2D=CPointer<Unit>()
    var openglCopyTexSubImage3D=CPointer<Unit>()
    var openglCopyTextureSubImage1D=CPointer<Unit>()
    var openglCopyTextureSubImage2D=CPointer<Unit>()
    var openglCopyTextureSubImage3D=CPointer<Unit>()
    var openglCreateBuffers=CPointer<Unit>()
    var openglCreateFramebuffers=CPointer<Unit>()
    var openglCreateProgram=CPointer<Unit>()
    var openglCreateProgramPipelines=CPointer<Unit>()
    var openglCreateQueries=CPointer<Unit>()
    var openglCreateRenderbuffers=CPointer<Unit>()
    var openglCreateSamplers=CPointer<Unit>()
    var openglCreateShader=CPointer<Unit>()
    var openglCreateShaderProgramv=CPointer<Unit>()
    var openglCreateTextures=CPointer<Unit>()
    var openglCreateTransformFeedbacks=CPointer<Unit>()
    var openglCreateVertexArrays=CPointer<Unit>()
    var openglCullFace=CPointer<Unit>()
    var openglDebugMessageCallback=CPointer<Unit>()
    var openglDebugMessageControl=CPointer<Unit>()
    var openglDebugMessageInsert=CPointer<Unit>()
    var openglDeleteBuffers=CPointer<Unit>()
    var openglDeleteFramebuffers=CPointer<Unit>()
    var openglDeleteProgram=CPointer<Unit>()
    var openglDeleteProgramPipelines=CPointer<Unit>()
    var openglDeleteQueries=CPointer<Unit>()
    var openglDeleteRenderbuffers=CPointer<Unit>()
    var openglDeleteSamplers=CPointer<Unit>()
    var openglDeleteShader=CPointer<Unit>()
    var openglDeleteSync=CPointer<Unit>()
    var openglDeleteTextures=CPointer<Unit>()
    var openglDeleteTransformFeedbacks=CPointer<Unit>()
    var openglDeleteVertexArrays=CPointer<Unit>()
    var openglDepthFunc=CPointer<Unit>()
    var openglDepthMask=CPointer<Unit>()
    var openglDepthRange=CPointer<Unit>()
    var openglDepthRangeArrayv=CPointer<Unit>()
    var openglDepthRangeIndexed=CPointer<Unit>()
    var openglDepthRangef=CPointer<Unit>()
    var openglDetachShader=CPointer<Unit>()
    var openglDisable=CPointer<Unit>()
    var openglDisableVertexArrayAttrib=CPointer<Unit>()
    var openglDisableVertexAttribArray=CPointer<Unit>()
    var openglDisablei=CPointer<Unit>()
    var openglDispatchCompute=CPointer<Unit>()
    var openglDispatchComputeIndirect=CPointer<Unit>()
    var openglDrawArrays=CPointer<Unit>()
    var openglDrawArraysIndirect=CPointer<Unit>()
    var openglDrawArraysInstanced=CPointer<Unit>()
    var openglDrawArraysInstancedBaseInstance=CPointer<Unit>()
    var openglDrawBuffer=CPointer<Unit>()
    var openglDrawBuffers=CPointer<Unit>()
    var openglDrawElements=CPointer<Unit>()
    var openglDrawElementsBaseVertex=CPointer<Unit>()
    var openglDrawElementsIndirect=CPointer<Unit>()
    var openglDrawElementsInstanced=CPointer<Unit>()
    var openglDrawElementsInstancedBaseInstance=CPointer<Unit>()
    var openglDrawElementsInstancedBaseVertex=CPointer<Unit>()
    var openglDrawElementsInstancedBaseVertexBaseInstance=CPointer<Unit>()
    var openglDrawRangeElements=CPointer<Unit>()
    var openglDrawRangeElementsBaseVertex=CPointer<Unit>()
    var openglDrawTransformFeedback=CPointer<Unit>()
    var openglDrawTransformFeedbackInstanced=CPointer<Unit>()
    var openglDrawTransformFeedbackStream=CPointer<Unit>()
    var openglDrawTransformFeedbackStreamInstanced=CPointer<Unit>()
    var openglEnable=CPointer<Unit>()
    var openglEnableVertexArrayAttrib=CPointer<Unit>()
    var openglEnableVertexAttribArray=CPointer<Unit>()
    var openglEnablei=CPointer<Unit>()
    var openglEndConditionalRender=CPointer<Unit>()
    var openglEndQuery=CPointer<Unit>()
    var openglEndQueryIndexed=CPointer<Unit>()
    var openglEndTransformFeedback=CPointer<Unit>()
    var openglFenceSync=CPointer<Unit>()
    var openglFinish=CPointer<Unit>()
    var openglFlush=CPointer<Unit>()
    var openglFlushMappedBufferRange=CPointer<Unit>()
    var openglFlushMappedNamedBufferRange=CPointer<Unit>()
    var openglFramebufferParameteri=CPointer<Unit>()
    var openglFramebufferRenderbuffer=CPointer<Unit>()
    var openglFramebufferTexture=CPointer<Unit>()
    var openglFramebufferTexture1D=CPointer<Unit>()
    var openglFramebufferTexture2D=CPointer<Unit>()
    var openglFramebufferTexture3D=CPointer<Unit>()
    var openglFramebufferTextureLayer=CPointer<Unit>()
    var openglFrontFace=CPointer<Unit>()
    var openglGenBuffers=CPointer<Unit>()
    var openglGenFramebuffers=CPointer<Unit>()
    var openglGenProgramPipelines=CPointer<Unit>()
    var openglGenQueries=CPointer<Unit>()
    var openglGenRenderbuffers=CPointer<Unit>()
    var openglGenSamplers=CPointer<Unit>()
    var openglGenTextures=CPointer<Unit>()
    var openglGenTransformFeedbacks=CPointer<Unit>()
    var openglGenVertexArrays=CPointer<Unit>()
    var openglGenerateMipmap=CPointer<Unit>()
    var openglGenerateTextureMipmap=CPointer<Unit>()
    var openglGetActiveAtomicCounterBufferiv=CPointer<Unit>()
    var openglGetActiveAttrib=CPointer<Unit>()
    var openglGetActiveSubroutineName=CPointer<Unit>()
    var openglGetActiveSubroutineUniformName=CPointer<Unit>()
    var openglGetActiveSubroutineUniformiv=CPointer<Unit>()
    var openglGetActiveUniform=CPointer<Unit>()
    var openglGetActiveUniformBlockName=CPointer<Unit>()
    var openglGetActiveUniformBlockiv=CPointer<Unit>()
    var openglGetActiveUniformName=CPointer<Unit>()
    var openglGetActiveUniformsiv=CPointer<Unit>()
    var openglGetAttachedShaders=CPointer<Unit>()
    var openglGetAttribLocation=CPointer<Unit>()
    var openglGetBooleani_v=CPointer<Unit>()
    var openglGetBooleanv=CPointer<Unit>()
    var openglGetBufferParameteri64v=CPointer<Unit>()
    var openglGetBufferParameteriv=CPointer<Unit>()
    var openglGetBufferPointerv=CPointer<Unit>()
    var openglGetBufferSubData=CPointer<Unit>()
    var openglGetCompressedTexImage=CPointer<Unit>()
    var openglGetCompressedTextureImage=CPointer<Unit>()
    var openglGetCompressedTextureSubImage=CPointer<Unit>()
    var openglGetDebugMessageLog=CPointer<Unit>()
    var openglGetDoublei_v=CPointer<Unit>()
    var openglGetDoublev=CPointer<Unit>()
    var openglGetError=CPointer<Unit>()
    var openglGetFloati_v=CPointer<Unit>()
    var openglGetFloatv=CPointer<Unit>()
    var openglGetFragDataIndex=CPointer<Unit>()
    var openglGetFragDataLocation=CPointer<Unit>()
    var openglGetFramebufferAttachmentParameteriv=CPointer<Unit>()
    var openglGetFramebufferParameteriv=CPointer<Unit>()
    var openglGetGraphicsResetStatus=CPointer<Unit>()
    var openglGetInteger64i_v=CPointer<Unit>()
    var openglGetInteger64v=CPointer<Unit>()
    var openglGetIntegeri_v=CPointer<Unit>()
    var openglGetIntegerv=CPointer<Unit>()
    var openglGetInternalformati64v=CPointer<Unit>()
    var openglGetInternalformativ=CPointer<Unit>()
    var openglGetMultisamplefv=CPointer<Unit>()
    var openglGetNamedBufferParameteri64v=CPointer<Unit>()
    var openglGetNamedBufferParameteriv=CPointer<Unit>()
    var openglGetNamedBufferPointerv=CPointer<Unit>()
    var openglGetNamedBufferSubData=CPointer<Unit>()
    var openglGetNamedFramebufferAttachmentParameteriv=CPointer<Unit>()
    var openglGetNamedFramebufferParameteriv=CPointer<Unit>()
    var openglGetNamedRenderbufferParameteriv=CPointer<Unit>()
    var openglGetObjectLabel=CPointer<Unit>()
    var openglGetObjectPtrLabel=CPointer<Unit>()
    var openglGetPointerv=CPointer<Unit>()
    var openglGetProgramBinary=CPointer<Unit>()
    var openglGetProgramInfoLog=CPointer<Unit>()
    var openglGetProgramInterfaceiv=CPointer<Unit>()
    var openglGetProgramPipelineInfoLog=CPointer<Unit>()
    var openglGetProgramPipelineiv=CPointer<Unit>()
    var openglGetProgramResourceIndex=CPointer<Unit>()
    var openglGetProgramResourceLocation=CPointer<Unit>()
    var openglGetProgramResourceLocationIndex=CPointer<Unit>()
    var openglGetProgramResourceName=CPointer<Unit>()
    var openglGetProgramResourceiv=CPointer<Unit>()
    var openglGetProgramStageiv=CPointer<Unit>()
    var openglGetProgramiv=CPointer<Unit>()
    var openglGetQueryBufferObjecti64v=CPointer<Unit>()
    var openglGetQueryBufferObjectiv=CPointer<Unit>()
    var openglGetQueryBufferObjectui64v=CPointer<Unit>()
    var openglGetQueryBufferObjectuiv=CPointer<Unit>()
    var openglGetQueryIndexediv=CPointer<Unit>()
    var openglGetQueryObjecti64v=CPointer<Unit>()
    var openglGetQueryObjectiv=CPointer<Unit>()
    var openglGetQueryObjectui64v=CPointer<Unit>()
    var openglGetQueryObjectuiv=CPointer<Unit>()
    var openglGetQueryiv=CPointer<Unit>()
    var openglGetRenderbufferParameteriv=CPointer<Unit>()
    var openglGetSamplerParameterIiv=CPointer<Unit>()
    var openglGetSamplerParameterIuiv=CPointer<Unit>()
    var openglGetSamplerParameterfv=CPointer<Unit>()
    var openglGetSamplerParameteriv=CPointer<Unit>()
    var openglGetShaderInfoLog=CPointer<Unit>()
    var openglGetShaderPrecisionFormat=CPointer<Unit>()
    var openglGetShaderSource=CPointer<Unit>()
    var openglGetShaderiv=CPointer<Unit>()
    var openglGetString=CPointer<Unit>()
    var openglGetStringi=CPointer<Unit>()
    var openglGetSubroutineIndex=CPointer<Unit>()
    var openglGetSubroutineUniformLocation=CPointer<Unit>()
    var openglGetSynciv=CPointer<Unit>()
    var openglGetTexImage=CPointer<Unit>()
    var openglGetTexLevelParameterfv=CPointer<Unit>()
    var openglGetTexLevelParameteriv=CPointer<Unit>()
    var openglGetTexParameterIiv=CPointer<Unit>()
    var openglGetTexParameterIuiv=CPointer<Unit>()
    var openglGetTexParameterfv=CPointer<Unit>()
    var openglGetTexParameteriv=CPointer<Unit>()
    var openglGetTextureImage=CPointer<Unit>()
    var openglGetTextureLevelParameterfv=CPointer<Unit>()
    var openglGetTextureLevelParameteriv=CPointer<Unit>()
    var openglGetTextureParameterIiv=CPointer<Unit>()
    var openglGetTextureParameterIuiv=CPointer<Unit>()
    var openglGetTextureParameterfv=CPointer<Unit>()
    var openglGetTextureParameteriv=CPointer<Unit>()
    var openglGetTextureSubImage=CPointer<Unit>()
    var openglGetTransformFeedbackVarying=CPointer<Unit>()
    var openglGetTransformFeedbacki64_v=CPointer<Unit>()
    var openglGetTransformFeedbacki_v=CPointer<Unit>()
    var openglGetTransformFeedbackiv=CPointer<Unit>()
    var openglGetUniformBlockIndex=CPointer<Unit>()
    var openglGetUniformIndices=CPointer<Unit>()
    var openglGetUniformLocation=CPointer<Unit>()
    var openglGetUniformSubroutineuiv=CPointer<Unit>()
    var openglGetUniformdv=CPointer<Unit>()
    var openglGetUniformfv=CPointer<Unit>()
    var openglGetUniformiv=CPointer<Unit>()
    var openglGetUniformuiv=CPointer<Unit>()
    var openglGetVertexArrayIndexed64iv=CPointer<Unit>()
    var openglGetVertexArrayIndexediv=CPointer<Unit>()
    var openglGetVertexArrayiv=CPointer<Unit>()
    var openglGetVertexAttribIiv=CPointer<Unit>()
    var openglGetVertexAttribIuiv=CPointer<Unit>()
    var openglGetVertexAttribLdv=CPointer<Unit>()
    var openglGetVertexAttribPointerv=CPointer<Unit>()
    var openglGetVertexAttribdv=CPointer<Unit>()
    var openglGetVertexAttribfv=CPointer<Unit>()
    var openglGetVertexAttribiv=CPointer<Unit>()
    var openglGetnCompressedTexImage=CPointer<Unit>()
    var openglGetnTexImage=CPointer<Unit>()
    var openglGetnUniformdv=CPointer<Unit>()
    var openglGetnUniformfv=CPointer<Unit>()
    var openglGetnUniformiv=CPointer<Unit>()
    var openglGetnUniformuiv=CPointer<Unit>()
    var openglHint=CPointer<Unit>()
    var openglInvalidateBufferData=CPointer<Unit>()
    var openglInvalidateBufferSubData=CPointer<Unit>()
    var openglInvalidateFramebuffer=CPointer<Unit>()
    var openglInvalidateNamedFramebufferData=CPointer<Unit>()
    var openglInvalidateNamedFramebufferSubData=CPointer<Unit>()
    var openglInvalidateSubFramebuffer=CPointer<Unit>()
    var openglInvalidateTexImage=CPointer<Unit>()
    var openglInvalidateTexSubImage=CPointer<Unit>()
    var openglIsBuffer=CPointer<Unit>()
    var openglIsEnabled=CPointer<Unit>()
    var openglIsEnabledi=CPointer<Unit>()
    var openglIsFramebuffer=CPointer<Unit>()
    var openglIsProgram=CPointer<Unit>()
    var openglIsProgramPipeline=CPointer<Unit>()
    var openglIsQuery=CPointer<Unit>()
    var openglIsRenderbuffer=CPointer<Unit>()
    var openglIsSampler=CPointer<Unit>()
    var openglIsShader=CPointer<Unit>()
    var openglIsSync=CPointer<Unit>()
    var openglIsTexture=CPointer<Unit>()
    var openglIsTransformFeedback=CPointer<Unit>()
    var openglIsVertexArray=CPointer<Unit>()
    var openglLineWidth=CPointer<Unit>()
    var openglLinkProgram=CPointer<Unit>()
    var openglLogicOp=CPointer<Unit>()
    var openglMapBuffer=CPointer<Unit>()
    var openglMapBufferRange=CPointer<Unit>()
    var openglMapNamedBuffer=CPointer<Unit>()
    var openglMapNamedBufferRange=CPointer<Unit>()
    var openglMemoryBarrier=CPointer<Unit>()
    var openglMemoryBarrierByRegion=CPointer<Unit>()
    var openglMinSampleShading=CPointer<Unit>()
    var openglMultiDrawArrays=CPointer<Unit>()
    var openglMultiDrawArraysIndirect=CPointer<Unit>()
    var openglMultiDrawArraysIndirectCount=CPointer<Unit>()
    var openglMultiDrawElements=CPointer<Unit>()
    var openglMultiDrawElementsBaseVertex=CPointer<Unit>()
    var openglMultiDrawElementsIndirect=CPointer<Unit>()
    var openglMultiDrawElementsIndirectCount=CPointer<Unit>()
    var openglNamedBufferData=CPointer<Unit>()
    var openglNamedBufferStorage=CPointer<Unit>()
    var openglNamedBufferSubData=CPointer<Unit>()
    var openglNamedFramebufferDrawBuffer=CPointer<Unit>()
    var openglNamedFramebufferDrawBuffers=CPointer<Unit>()
    var openglNamedFramebufferParameteri=CPointer<Unit>()
    var openglNamedFramebufferReadBuffer=CPointer<Unit>()
    var openglNamedFramebufferRenderbuffer=CPointer<Unit>()
    var openglNamedFramebufferTexture=CPointer<Unit>()
    var openglNamedFramebufferTextureLayer=CPointer<Unit>()
    var openglNamedRenderbufferStorage=CPointer<Unit>()
    var openglNamedRenderbufferStorageMultisample=CPointer<Unit>()
    var openglObjectLabel=CPointer<Unit>()
    var openglObjectPtrLabel=CPointer<Unit>()
    var openglPatchParameterfv=CPointer<Unit>()
    var openglPatchParameteri=CPointer<Unit>()
    var openglPauseTransformFeedback=CPointer<Unit>()
    var openglPixelStoref=CPointer<Unit>()
    var openglPixelStorei=CPointer<Unit>()
    var openglPointParameterf=CPointer<Unit>()
    var openglPointParameterfv=CPointer<Unit>()
    var openglPointParameteri=CPointer<Unit>()
    var openglPointParameteriv=CPointer<Unit>()
    var openglPointSize=CPointer<Unit>()
    var openglPolygonMode=CPointer<Unit>()
    var openglPolygonOffset=CPointer<Unit>()
    var openglPolygonOffsetClamp=CPointer<Unit>()
    var openglPopDebugGroup=CPointer<Unit>()
    var openglPrimitiveRestartIndex=CPointer<Unit>()
    var openglProgramBinary=CPointer<Unit>()
    var openglProgramParameteri=CPointer<Unit>()
    var openglProgramUniform1d=CPointer<Unit>()
    var openglProgramUniform1dv=CPointer<Unit>()
    var openglProgramUniform1f=CPointer<Unit>()
    var openglProgramUniform1fv=CPointer<Unit>()
    var openglProgramUniform1i=CPointer<Unit>()
    var openglProgramUniform1iv=CPointer<Unit>()
    var openglProgramUniform1ui=CPointer<Unit>()
    var openglProgramUniform1uiv=CPointer<Unit>()
    var openglProgramUniform2d=CPointer<Unit>()
    var openglProgramUniform2dv=CPointer<Unit>()
    var openglProgramUniform2f=CPointer<Unit>()
    var openglProgramUniform2fv=CPointer<Unit>()
    var openglProgramUniform2i=CPointer<Unit>()
    var openglProgramUniform2iv=CPointer<Unit>()
    var openglProgramUniform2ui=CPointer<Unit>()
    var openglProgramUniform2uiv=CPointer<Unit>()
    var openglProgramUniform3d=CPointer<Unit>()
    var openglProgramUniform3dv=CPointer<Unit>()
    var openglProgramUniform3f=CPointer<Unit>()
    var openglProgramUniform3fv=CPointer<Unit>()
    var openglProgramUniform3i=CPointer<Unit>()
    var openglProgramUniform3iv=CPointer<Unit>()
    var openglProgramUniform3ui=CPointer<Unit>()
    var openglProgramUniform3uiv=CPointer<Unit>()
    var openglProgramUniform4d=CPointer<Unit>()
    var openglProgramUniform4dv=CPointer<Unit>()
    var openglProgramUniform4f=CPointer<Unit>()
    var openglProgramUniform4fv=CPointer<Unit>()
    var openglProgramUniform4i=CPointer<Unit>()
    var openglProgramUniform4iv=CPointer<Unit>()
    var openglProgramUniform4ui=CPointer<Unit>()
    var openglProgramUniform4uiv=CPointer<Unit>()
    var openglProgramUniformMatrix2dv=CPointer<Unit>()
    var openglProgramUniformMatrix2fv=CPointer<Unit>()
    var openglProgramUniformMatrix2x3dv=CPointer<Unit>()
    var openglProgramUniformMatrix2x3fv=CPointer<Unit>()
    var openglProgramUniformMatrix2x4dv=CPointer<Unit>()
    var openglProgramUniformMatrix2x4fv=CPointer<Unit>()
    var openglProgramUniformMatrix3dv=CPointer<Unit>()
    var openglProgramUniformMatrix3fv=CPointer<Unit>()
    var openglProgramUniformMatrix3x2dv=CPointer<Unit>()
    var openglProgramUniformMatrix3x2fv=CPointer<Unit>()
    var openglProgramUniformMatrix3x4dv=CPointer<Unit>()
    var openglProgramUniformMatrix3x4fv=CPointer<Unit>()
    var openglProgramUniformMatrix4dv=CPointer<Unit>()
    var openglProgramUniformMatrix4fv=CPointer<Unit>()
    var openglProgramUniformMatrix4x2dv=CPointer<Unit>()
    var openglProgramUniformMatrix4x2fv=CPointer<Unit>()
    var openglProgramUniformMatrix4x3dv=CPointer<Unit>()
    var openglProgramUniformMatrix4x3fv=CPointer<Unit>()
    var openglProvokingVertex=CPointer<Unit>()
    var openglPushDebugGroup=CPointer<Unit>()
    var openglQueryCounter=CPointer<Unit>()
    var openglReadBuffer=CPointer<Unit>()
    var openglReadPixels=CPointer<Unit>()
    var openglReadnPixels=CPointer<Unit>()
    var openglReleaseShaderCompiler=CPointer<Unit>()
    var openglRenderbufferStorage=CPointer<Unit>()
    var openglRenderbufferStorageMultisample=CPointer<Unit>()
    var openglResumeTransformFeedback=CPointer<Unit>()
    var openglSampleCoverage=CPointer<Unit>()
    var openglSampleMaski=CPointer<Unit>()
    var openglSamplerParameterIiv=CPointer<Unit>()
    var openglSamplerParameterIuiv=CPointer<Unit>()
    var openglSamplerParameterf=CPointer<Unit>()
    var openglSamplerParameterfv=CPointer<Unit>()
    var openglSamplerParameteri=CPointer<Unit>()
    var openglSamplerParameteriv=CPointer<Unit>()
    var openglScissor=CPointer<Unit>()
    var openglScissorArrayv=CPointer<Unit>()
    var openglScissorIndexed=CPointer<Unit>()
    var openglScissorIndexedv=CPointer<Unit>()
    var openglShaderBinary=CPointer<Unit>()
    var openglShaderSource=CPointer<Unit>()
    var openglShaderStorageBlockBinding=CPointer<Unit>()
    var openglSpecializeShader=CPointer<Unit>()
    var openglStencilFunc=CPointer<Unit>()
    var openglStencilFuncSeparate=CPointer<Unit>()
    var openglStencilMask=CPointer<Unit>()
    var openglStencilMaskSeparate=CPointer<Unit>()
    var openglStencilOp=CPointer<Unit>()
    var openglStencilOpSeparate=CPointer<Unit>()
    var openglTexBuffer=CPointer<Unit>()
    var openglTexBufferRange=CPointer<Unit>()
    var openglTexImage1D=CPointer<Unit>()
    var openglTexImage2D=CPointer<Unit>()
    var openglTexImage2DMultisample=CPointer<Unit>()
    var openglTexImage3D=CPointer<Unit>()
    var openglTexImage3DMultisample=CPointer<Unit>()
    var openglTexParameterIiv=CPointer<Unit>()
    var openglTexParameterIuiv=CPointer<Unit>()
    var openglTexParameterf=CPointer<Unit>()
    var openglTexParameterfv=CPointer<Unit>()
    var openglTexParameteri=CPointer<Unit>()
    var openglTexParameteriv=CPointer<Unit>()
    var openglTexStorage1D=CPointer<Unit>()
    var openglTexStorage2D=CPointer<Unit>()
    var openglTexStorage2DMultisample=CPointer<Unit>()
    var openglTexStorage3D=CPointer<Unit>()
    var openglTexStorage3DMultisample=CPointer<Unit>()
    var openglTexSubImage1D=CPointer<Unit>()
    var openglTexSubImage2D=CPointer<Unit>()
    var openglTexSubImage3D=CPointer<Unit>()
    var openglTextureBarrier=CPointer<Unit>()
    var openglTextureBuffer=CPointer<Unit>()
    var openglTextureBufferRange=CPointer<Unit>()
    var openglTextureParameterIiv=CPointer<Unit>()
    var openglTextureParameterIuiv=CPointer<Unit>()
    var openglTextureParameterf=CPointer<Unit>()
    var openglTextureParameterfv=CPointer<Unit>()
    var openglTextureParameteri=CPointer<Unit>()
    var openglTextureParameteriv=CPointer<Unit>()
    var openglTextureStorage1D=CPointer<Unit>()
    var openglTextureStorage2D=CPointer<Unit>()
    var openglTextureStorage2DMultisample=CPointer<Unit>()
    var openglTextureStorage3D=CPointer<Unit>()
    var openglTextureStorage3DMultisample=CPointer<Unit>()
    var openglTextureSubImage1D=CPointer<Unit>()
    var openglTextureSubImage2D=CPointer<Unit>()
    var openglTextureSubImage3D=CPointer<Unit>()
    var openglTextureView=CPointer<Unit>()
    var openglTransformFeedbackBufferBase=CPointer<Unit>()
    var openglTransformFeedbackBufferRange=CPointer<Unit>()
    var openglTransformFeedbackVaryings=CPointer<Unit>()
    var openglUniform1d=CPointer<Unit>()
    var openglUniform1dv=CPointer<Unit>()
    var openglUniform1f=CPointer<Unit>()
    var openglUniform1fv=CPointer<Unit>()
    var openglUniform1i=CPointer<Unit>()
    var openglUniform1iv=CPointer<Unit>()
    var openglUniform1ui=CPointer<Unit>()
    var openglUniform1uiv=CPointer<Unit>()
    var openglUniform2d=CPointer<Unit>()
    var openglUniform2dv=CPointer<Unit>()
    var openglUniform2f=CPointer<Unit>()
    var openglUniform2fv=CPointer<Unit>()
    var openglUniform2i=CPointer<Unit>()
    var openglUniform2iv=CPointer<Unit>()
    var openglUniform2ui=CPointer<Unit>()
    var openglUniform2uiv=CPointer<Unit>()
    var openglUniform3d=CPointer<Unit>()
    var openglUniform3dv=CPointer<Unit>()
    var openglUniform3f=CPointer<Unit>()
    var openglUniform3fv=CPointer<Unit>()
    var openglUniform3i=CPointer<Unit>()
    var openglUniform3iv=CPointer<Unit>()
    var openglUniform3ui=CPointer<Unit>()
    var openglUniform3uiv=CPointer<Unit>()
    var openglUniform4d=CPointer<Unit>()
    var openglUniform4dv=CPointer<Unit>()
    var openglUniform4f=CPointer<Unit>()
    var openglUniform4fv=CPointer<Unit>()
    var openglUniform4i=CPointer<Unit>()
    var openglUniform4iv=CPointer<Unit>()
    var openglUniform4ui=CPointer<Unit>()
    var openglUniform4uiv=CPointer<Unit>()
    var openglUniformBlockBinding=CPointer<Unit>()
    var openglUniformMatrix2dv=CPointer<Unit>()
    var openglUniformMatrix2fv=CPointer<Unit>()
    var openglUniformMatrix2x3dv=CPointer<Unit>()
    var openglUniformMatrix2x3fv=CPointer<Unit>()
    var openglUniformMatrix2x4dv=CPointer<Unit>()
    var openglUniformMatrix2x4fv=CPointer<Unit>()
    var openglUniformMatrix3dv=CPointer<Unit>()
    var openglUniformMatrix3fv=CPointer<Unit>()
    var openglUniformMatrix3x2dv=CPointer<Unit>()
    var openglUniformMatrix3x2fv=CPointer<Unit>()
    var openglUniformMatrix3x4dv=CPointer<Unit>()
    var openglUniformMatrix3x4fv=CPointer<Unit>()
    var openglUniformMatrix4dv=CPointer<Unit>()
    var openglUniformMatrix4fv=CPointer<Unit>()
    var openglUniformMatrix4x2dv=CPointer<Unit>()
    var openglUniformMatrix4x2fv=CPointer<Unit>()
    var openglUniformMatrix4x3dv=CPointer<Unit>()
    var openglUniformMatrix4x3fv=CPointer<Unit>()
    var openglUniformSubroutinesuiv=CPointer<Unit>()
    var openglUnmapBuffer=CPointer<Unit>()
    var openglUnmapNamedBuffer=CPointer<Unit>()
    var openglUseProgram=CPointer<Unit>()
    var openglUseProgramStages=CPointer<Unit>()
    var openglValidateProgram=CPointer<Unit>()
    var openglValidateProgramPipeline=CPointer<Unit>()
    var openglVertexArrayAttribBinding=CPointer<Unit>()
    var openglVertexArrayAttribFormat=CPointer<Unit>()
    var openglVertexArrayAttribIFormat=CPointer<Unit>()
    var openglVertexArrayAttribLFormat=CPointer<Unit>()
    var openglVertexArrayBindingDivisor=CPointer<Unit>()
    var openglVertexArrayElementBuffer=CPointer<Unit>()
    var openglVertexArrayVertexBuffer=CPointer<Unit>()
    var openglVertexArrayVertexBuffers=CPointer<Unit>()
    var openglVertexAttrib1d=CPointer<Unit>()
    var openglVertexAttrib1dv=CPointer<Unit>()
    var openglVertexAttrib1f=CPointer<Unit>()
    var openglVertexAttrib1fv=CPointer<Unit>()
    var openglVertexAttrib1s=CPointer<Unit>()
    var openglVertexAttrib1sv=CPointer<Unit>()
    var openglVertexAttrib2d=CPointer<Unit>()
    var openglVertexAttrib2dv=CPointer<Unit>()
    var openglVertexAttrib2f=CPointer<Unit>()
    var openglVertexAttrib2fv=CPointer<Unit>()
    var openglVertexAttrib2s=CPointer<Unit>()
    var openglVertexAttrib2sv=CPointer<Unit>()
    var openglVertexAttrib3d=CPointer<Unit>()
    var openglVertexAttrib3dv=CPointer<Unit>()
    var openglVertexAttrib3f=CPointer<Unit>()
    var openglVertexAttrib3fv=CPointer<Unit>()
    var openglVertexAttrib3s=CPointer<Unit>()
    var openglVertexAttrib3sv=CPointer<Unit>()
    var openglVertexAttrib4Nbv=CPointer<Unit>()
    var openglVertexAttrib4Niv=CPointer<Unit>()
    var openglVertexAttrib4Nsv=CPointer<Unit>()
    var openglVertexAttrib4Nub=CPointer<Unit>()
    var openglVertexAttrib4Nubv=CPointer<Unit>()
    var openglVertexAttrib4Nuiv=CPointer<Unit>()
    var openglVertexAttrib4Nusv=CPointer<Unit>()
    var openglVertexAttrib4bv=CPointer<Unit>()
    var openglVertexAttrib4d=CPointer<Unit>()
    var openglVertexAttrib4dv=CPointer<Unit>()
    var openglVertexAttrib4f=CPointer<Unit>()
    var openglVertexAttrib4fv=CPointer<Unit>()
    var openglVertexAttrib4iv=CPointer<Unit>()
    var openglVertexAttrib4s=CPointer<Unit>()
    var openglVertexAttrib4sv=CPointer<Unit>()
    var openglVertexAttrib4ubv=CPointer<Unit>()
    var openglVertexAttrib4uiv=CPointer<Unit>()
    var openglVertexAttrib4usv=CPointer<Unit>()
    var openglVertexAttribBinding=CPointer<Unit>()
    var openglVertexAttribDivisor=CPointer<Unit>()
    var openglVertexAttribFormat=CPointer<Unit>()
    var openglVertexAttribI1i=CPointer<Unit>()
    var openglVertexAttribI1iv=CPointer<Unit>()
    var openglVertexAttribI1ui=CPointer<Unit>()
    var openglVertexAttribI1uiv=CPointer<Unit>()
    var openglVertexAttribI2i=CPointer<Unit>()
    var openglVertexAttribI2iv=CPointer<Unit>()
    var openglVertexAttribI2ui=CPointer<Unit>()
    var openglVertexAttribI2uiv=CPointer<Unit>()
    var openglVertexAttribI3i=CPointer<Unit>()
    var openglVertexAttribI3iv=CPointer<Unit>()
    var openglVertexAttribI3ui=CPointer<Unit>()
    var openglVertexAttribI3uiv=CPointer<Unit>()
    var openglVertexAttribI4bv=CPointer<Unit>()
    var openglVertexAttribI4i=CPointer<Unit>()
    var openglVertexAttribI4iv=CPointer<Unit>()
    var openglVertexAttribI4sv=CPointer<Unit>()
    var openglVertexAttribI4ubv=CPointer<Unit>()
    var openglVertexAttribI4ui=CPointer<Unit>()
    var openglVertexAttribI4uiv=CPointer<Unit>()
    var openglVertexAttribI4usv=CPointer<Unit>()
    var openglVertexAttribIFormat=CPointer<Unit>()
    var openglVertexAttribIPointer=CPointer<Unit>()
    var openglVertexAttribL1d=CPointer<Unit>()
    var openglVertexAttribL1dv=CPointer<Unit>()
    var openglVertexAttribL2d=CPointer<Unit>()
    var openglVertexAttribL2dv=CPointer<Unit>()
    var openglVertexAttribL3d=CPointer<Unit>()
    var openglVertexAttribL3dv=CPointer<Unit>()
    var openglVertexAttribL4d=CPointer<Unit>()
    var openglVertexAttribL4dv=CPointer<Unit>()
    var openglVertexAttribLFormat=CPointer<Unit>()
    var openglVertexAttribLPointer=CPointer<Unit>()
    var openglVertexAttribP1ui=CPointer<Unit>()
    var openglVertexAttribP1uiv=CPointer<Unit>()
    var openglVertexAttribP2ui=CPointer<Unit>()
    var openglVertexAttribP2uiv=CPointer<Unit>()
    var openglVertexAttribP3ui=CPointer<Unit>()
    var openglVertexAttribP3uiv=CPointer<Unit>()
    var openglVertexAttribP4ui=CPointer<Unit>()
    var openglVertexAttribP4uiv=CPointer<Unit>()
    var openglVertexAttribPointer=CPointer<Unit>()
    var openglVertexBindingDivisor=CPointer<Unit>()
    var openglViewport=CPointer<Unit>()
    var openglViewportArrayv=CPointer<Unit>()
    var openglViewportIndexedf=CPointer<Unit>()
    var openglViewportIndexedfv=CPointer<Unit>()
    var openglWaitSync=CPointer<Unit>()
/////////////////地址获取存储类初始函数///////////////////////////////
    public func csh(a:(a:String)->CPointer<Unit>)
    {
        if(openglGetString.toUIntNative()==0)
        {
            openglActiveShaderProgram=a("glActiveShaderProgram")
            openglActiveTexture=a("glActiveTexture")
            openglAttachShader=a("glAttachShader")
            openglBeginConditionalRender=a("glBeginConditionalRender")
            openglBeginQuery=a("glBeginQuery")
            openglBeginQueryIndexed=a("glBeginQueryIndexed")
            openglBeginTransformFeedback=a("glBeginTransformFeedback")
            openglBindAttribLocation=a("glBindAttribLocation")
            openglBindBuffer=a("glBindBuffer")
            openglBindBufferBase=a("glBindBufferBase")
            openglBindBufferRange=a("glBindBufferRange")
            openglBindBuffersBase=a("glBindBuffersBase")
            openglBindBuffersRange=a("glBindBuffersRange")
            openglBindFragDataLocation=a("glBindFragDataLocation")
            openglBindFragDataLocationIndexed=a("glBindFragDataLocationIndexed")
            openglBindFramebuffer=a("glBindFramebuffer")
            openglBindImageTexture=a("glBindImageTexture")
            openglBindImageTextures=a("glBindImageTextures")
            openglBindProgramPipeline=a("glBindProgramPipeline")
            openglBindRenderbuffer=a("glBindRenderbuffer")
            openglBindSampler=a("glBindSampler")
            openglBindSamplers=a("glBindSamplers")
            openglBindTexture=a("glBindTexture")
            openglBindTextureUnit=a("glBindTextureUnit")
            openglBindTextures=a("glBindTextures")
            openglBindTransformFeedback=a("glBindTransformFeedback")
            openglBindVertexArray=a("glBindVertexArray")
            openglBindVertexBuffer=a("glBindVertexBuffer")
            openglBindVertexBuffers=a("glBindVertexBuffers")
            openglBlendColor=a("glBlendColor")
            openglBlendEquation=a("glBlendEquation")
            openglBlendEquationSeparate=a("glBlendEquationSeparate")
            openglBlendEquationSeparatei=a("glBlendEquationSeparatei")
            openglBlendEquationi=a("glBlendEquationi")
            openglBlendFunc=a("glBlendFunc")
            openglBlendFuncSeparate=a("glBlendFuncSeparate")
            openglBlendFuncSeparatei=a("glBlendFuncSeparatei")
            openglBlendFunci=a("glBlendFunci")
            openglBlitFramebuffer=a("glBlitFramebuffer")
            openglBlitNamedFramebuffer=a("glBlitNamedFramebuffer")
            openglBufferData=a("glBufferData")
            openglBufferStorage=a("glBufferStorage")
            openglBufferSubData=a("glBufferSubData")
            openglCheckFramebufferStatus=a("glCheckFramebufferStatus")
            openglCheckNamedFramebufferStatus=a("glCheckNamedFramebufferStatus")
            openglClampColor=a("glClampColor")
            openglClear=a("glClear")
            openglClearBufferData=a("glClearBufferData")
            openglClearBufferSubData=a("glClearBufferSubData")
            openglClearBufferfi=a("glClearBufferfi")
            openglClearBufferfv=a("glClearBufferfv")
            openglClearBufferiv=a("glClearBufferiv")
            openglClearBufferuiv=a("glClearBufferuiv")
            openglClearColor=a("glClearColor")
            openglClearDepth=a("glClearDepth")
            openglClearDepthf=a("glClearDepthf")
            openglClearNamedBufferData=a("glClearNamedBufferData")
            openglClearNamedBufferSubData=a("glClearNamedBufferSubData")
            openglClearNamedFramebufferfi=a("glClearNamedFramebufferfi")
            openglClearNamedFramebufferfv=a("glClearNamedFramebufferfv")
            openglClearNamedFramebufferiv=a("glClearNamedFramebufferiv")
            openglClearNamedFramebufferuiv=a("glClearNamedFramebufferuiv")
            openglClearStencil=a("glClearStencil")
            openglClearTexImage=a("glClearTexImage")
            openglClearTexSubImage=a("glClearTexSubImage")
            openglClientWaitSync=a("glClientWaitSync")
            openglClipControl=a("glClipControl")
            openglColorMask=a("glColorMask")
            openglColorMaski=a("glColorMaski")
            openglCompileShader=a("glCompileShader")
            openglCompressedTexImage1D=a("glCompressedTexImage1D")
            openglCompressedTexImage2D=a("glCompressedTexImage2D")
            openglCompressedTexImage3D=a("glCompressedTexImage3D")
            openglCompressedTexSubImage1D=a("glCompressedTexSubImage1D")
            openglCompressedTexSubImage2D=a("glCompressedTexSubImage2D")
            openglCompressedTexSubImage3D=a("glCompressedTexSubImage3D")
            openglCompressedTextureSubImage1D=a("glCompressedTextureSubImage1D")
            openglCompressedTextureSubImage2D=a("glCompressedTextureSubImage2D")
            openglCompressedTextureSubImage3D=a("glCompressedTextureSubImage3D")
            openglCopyBufferSubData=a("glCopyBufferSubData")
            openglCopyImageSubData=a("glCopyImageSubData")
            openglCopyNamedBufferSubData=a("glCopyNamedBufferSubData")
            openglCopyTexImage1D=a("glCopyTexImage1D")
            openglCopyTexImage2D=a("glCopyTexImage2D")
            openglCopyTexSubImage1D=a("glCopyTexSubImage1D")
            openglCopyTexSubImage2D=a("glCopyTexSubImage2D")
            openglCopyTexSubImage3D=a("glCopyTexSubImage3D")
            openglCopyTextureSubImage1D=a("glCopyTextureSubImage1D")
            openglCopyTextureSubImage2D=a("glCopyTextureSubImage2D")
            openglCopyTextureSubImage3D=a("glCopyTextureSubImage3D")
            openglCreateBuffers=a("glCreateBuffers")
            openglCreateFramebuffers=a("glCreateFramebuffers")
            openglCreateProgram=a("glCreateProgram")
            openglCreateProgramPipelines=a("glCreateProgramPipelines")
            openglCreateQueries=a("glCreateQueries")
            openglCreateRenderbuffers=a("glCreateRenderbuffers")
            openglCreateSamplers=a("glCreateSamplers")
            openglCreateShader=a("glCreateShader")
            openglCreateShaderProgramv=a("glCreateShaderProgramv")
            openglCreateTextures=a("glCreateTextures")
            openglCreateTransformFeedbacks=a("glCreateTransformFeedbacks")
            openglCreateVertexArrays=a("glCreateVertexArrays")
            openglCullFace=a("glCullFace")
            openglDebugMessageCallback=a("glDebugMessageCallback")
            openglDebugMessageControl=a("glDebugMessageControl")
            openglDebugMessageInsert=a("glDebugMessageInsert")
            openglDeleteBuffers=a("glDeleteBuffers")
            openglDeleteFramebuffers=a("glDeleteFramebuffers")
            openglDeleteProgram=a("glDeleteProgram")
            openglDeleteProgramPipelines=a("glDeleteProgramPipelines")
            openglDeleteQueries=a("glDeleteQueries")
            openglDeleteRenderbuffers=a("glDeleteRenderbuffers")
            openglDeleteSamplers=a("glDeleteSamplers")
            openglDeleteShader=a("glDeleteShader")
            openglDeleteSync=a("glDeleteSync")
            openglDeleteTextures=a("glDeleteTextures")
            openglDeleteTransformFeedbacks=a("glDeleteTransformFeedbacks")
            openglDeleteVertexArrays=a("glDeleteVertexArrays")
            openglDepthFunc=a("glDepthFunc")
            openglDepthMask=a("glDepthMask")
            openglDepthRange=a("glDepthRange")
            openglDepthRangeArrayv=a("glDepthRangeArrayv")
            openglDepthRangeIndexed=a("glDepthRangeIndexed")
            openglDepthRangef=a("glDepthRangef")
            openglDetachShader=a("glDetachShader")
            openglDisable=a("glDisable")
            openglDisableVertexArrayAttrib=a("glDisableVertexArrayAttrib")
            openglDisableVertexAttribArray=a("glDisableVertexAttribArray")
            openglDisablei=a("glDisablei")
            openglDispatchCompute=a("glDispatchCompute")
            openglDispatchComputeIndirect=a("glDispatchComputeIndirect")
            openglDrawArrays=a("glDrawArrays")
            openglDrawArraysIndirect=a("glDrawArraysIndirect")
            openglDrawArraysInstanced=a("glDrawArraysInstanced")
            openglDrawArraysInstancedBaseInstance=a("glDrawArraysInstancedBaseInstance")
            openglDrawBuffer=a("glDrawBuffer")
            openglDrawBuffers=a("glDrawBuffers")
            openglDrawElements=a("glDrawElements")
            openglDrawElementsBaseVertex=a("glDrawElementsBaseVertex")
            openglDrawElementsIndirect=a("glDrawElementsIndirect")
            openglDrawElementsInstanced=a("glDrawElementsInstanced")
            openglDrawElementsInstancedBaseInstance=a("glDrawElementsInstancedBaseInstance")
            openglDrawElementsInstancedBaseVertex=a("glDrawElementsInstancedBaseVertex")
            openglDrawElementsInstancedBaseVertexBaseInstance=a("glDrawElementsInstancedBaseVertexBaseInstance")
            openglDrawRangeElements=a("glDrawRangeElements")
            openglDrawRangeElementsBaseVertex=a("glDrawRangeElementsBaseVertex")
            openglDrawTransformFeedback=a("glDrawTransformFeedback")
            openglDrawTransformFeedbackInstanced=a("glDrawTransformFeedbackInstanced")
            openglDrawTransformFeedbackStream=a("glDrawTransformFeedbackStream")
            openglDrawTransformFeedbackStreamInstanced=a("glDrawTransformFeedbackStreamInstanced")
            openglEnable=a("glEnable")
            openglEnableVertexArrayAttrib=a("glEnableVertexArrayAttrib")
            openglEnableVertexAttribArray=a("glEnableVertexAttribArray")
            openglEnablei=a("glEnablei")
            openglEndConditionalRender=a("glEndConditionalRender")
            openglEndQuery=a("glEndQuery")
            openglEndQueryIndexed=a("glEndQueryIndexed")
            openglEndTransformFeedback=a("glEndTransformFeedback")
            openglFenceSync=a("glFenceSync")
            openglFinish=a("glFinish")
            openglFlush=a("glFlush")
            openglFlushMappedBufferRange=a("glFlushMappedBufferRange")
            openglFlushMappedNamedBufferRange=a("glFlushMappedNamedBufferRange")
            openglFramebufferParameteri=a("glFramebufferParameteri")
            openglFramebufferRenderbuffer=a("glFramebufferRenderbuffer")
            openglFramebufferTexture=a("glFramebufferTexture")
            openglFramebufferTexture1D=a("glFramebufferTexture1D")
            openglFramebufferTexture2D=a("glFramebufferTexture2D")
            openglFramebufferTexture3D=a("glFramebufferTexture3D")
            openglFramebufferTextureLayer=a("glFramebufferTextureLayer")
            openglFrontFace=a("glFrontFace")
            openglGenBuffers=a("glGenBuffers")
            openglGenFramebuffers=a("glGenFramebuffers")
            openglGenProgramPipelines=a("glGenProgramPipelines")
            openglGenQueries=a("glGenQueries")
            openglGenRenderbuffers=a("glGenRenderbuffers")
            openglGenSamplers=a("glGenSamplers")
            openglGenTextures=a("glGenTextures")
            openglGenTransformFeedbacks=a("glGenTransformFeedbacks")
            openglGenVertexArrays=a("glGenVertexArrays")
            openglGenerateMipmap=a("glGenerateMipmap")
            openglGenerateTextureMipmap=a("glGenerateTextureMipmap")
            openglGetActiveAtomicCounterBufferiv=a("glGetActiveAtomicCounterBufferiv")
            openglGetActiveAttrib=a("glGetActiveAttrib")
            openglGetActiveSubroutineName=a("glGetActiveSubroutineName")
            openglGetActiveSubroutineUniformName=a("glGetActiveSubroutineUniformName")
            openglGetActiveSubroutineUniformiv=a("glGetActiveSubroutineUniformiv")
            openglGetActiveUniform=a("glGetActiveUniform")
            openglGetActiveUniformBlockName=a("glGetActiveUniformBlockName")
            openglGetActiveUniformBlockiv=a("glGetActiveUniformBlockiv")
            openglGetActiveUniformName=a("glGetActiveUniformName")
            openglGetActiveUniformsiv=a("glGetActiveUniformsiv")
            openglGetAttachedShaders=a("glGetAttachedShaders")
            openglGetAttribLocation=a("glGetAttribLocation")
            openglGetBooleani_v=a("glGetBooleani_v")
            openglGetBooleanv=a("glGetBooleanv")
            openglGetBufferParameteri64v=a("glGetBufferParameteri64v")
            openglGetBufferParameteriv=a("glGetBufferParameteriv")
            openglGetBufferPointerv=a("glGetBufferPointerv")
            openglGetBufferSubData=a("glGetBufferSubData")
            openglGetCompressedTexImage=a("glGetCompressedTexImage")
            openglGetCompressedTextureImage=a("glGetCompressedTextureImage")
            openglGetCompressedTextureSubImage=a("glGetCompressedTextureSubImage")
            openglGetDebugMessageLog=a("glGetDebugMessageLog")
            openglGetDoublei_v=a("glGetDoublei_v")
            openglGetDoublev=a("glGetDoublev")
            openglGetError=a("glGetError")
            openglGetFloati_v=a("glGetFloati_v")
            openglGetFloatv=a("glGetFloatv")
            openglGetFragDataIndex=a("glGetFragDataIndex")
            openglGetFragDataLocation=a("glGetFragDataLocation")
            openglGetFramebufferAttachmentParameteriv=a("glGetFramebufferAttachmentParameteriv")
            openglGetFramebufferParameteriv=a("glGetFramebufferParameteriv")
            openglGetGraphicsResetStatus=a("glGetGraphicsResetStatus")
            openglGetInteger64i_v=a("glGetInteger64i_v")
            openglGetInteger64v=a("glGetInteger64v")
            openglGetIntegeri_v=a("glGetIntegeri_v")
            openglGetIntegerv=a("glGetIntegerv")
            openglGetInternalformati64v=a("glGetInternalformati64v")
            openglGetInternalformativ=a("glGetInternalformativ")
            openglGetMultisamplefv=a("glGetMultisamplefv")
            openglGetNamedBufferParameteri64v=a("glGetNamedBufferParameteri64v")
            openglGetNamedBufferParameteriv=a("glGetNamedBufferParameteriv")
            openglGetNamedBufferPointerv=a("glGetNamedBufferPointerv")
            openglGetNamedBufferSubData=a("glGetNamedBufferSubData")
            openglGetNamedFramebufferAttachmentParameteriv=a("glGetNamedFramebufferAttachmentParameteriv")
            openglGetNamedFramebufferParameteriv=a("glGetNamedFramebufferParameteriv")
            openglGetNamedRenderbufferParameteriv=a("glGetNamedRenderbufferParameteriv")
            openglGetObjectLabel=a("glGetObjectLabel")
            openglGetObjectPtrLabel=a("glGetObjectPtrLabel")
            openglGetPointerv=a("glGetPointerv")
            openglGetProgramBinary=a("glGetProgramBinary")
            openglGetProgramInfoLog=a("glGetProgramInfoLog")
            openglGetProgramInterfaceiv=a("glGetProgramInterfaceiv")
            openglGetProgramPipelineInfoLog=a("glGetProgramPipelineInfoLog")
            openglGetProgramPipelineiv=a("glGetProgramPipelineiv")
            openglGetProgramResourceIndex=a("glGetProgramResourceIndex")
            openglGetProgramResourceLocation=a("glGetProgramResourceLocation")
            openglGetProgramResourceLocationIndex=a("glGetProgramResourceLocationIndex")
            openglGetProgramResourceName=a("glGetProgramResourceName")
            openglGetProgramResourceiv=a("glGetProgramResourceiv")
            openglGetProgramStageiv=a("glGetProgramStageiv")
            openglGetProgramiv=a("glGetProgramiv")
            openglGetQueryBufferObjecti64v=a("glGetQueryBufferObjecti64v")
            openglGetQueryBufferObjectiv=a("glGetQueryBufferObjectiv")
            openglGetQueryBufferObjectui64v=a("glGetQueryBufferObjectui64v")
            openglGetQueryBufferObjectuiv=a("glGetQueryBufferObjectuiv")
            openglGetQueryIndexediv=a("glGetQueryIndexediv")
            openglGetQueryObjecti64v=a("glGetQueryObjecti64v")
            openglGetQueryObjectiv=a("glGetQueryObjectiv")
            openglGetQueryObjectui64v=a("glGetQueryObjectui64v")
            openglGetQueryObjectuiv=a("glGetQueryObjectuiv")
            openglGetQueryiv=a("glGetQueryiv")
            openglGetRenderbufferParameteriv=a("glGetRenderbufferParameteriv")
            openglGetSamplerParameterIiv=a("glGetSamplerParameterIiv")
            openglGetSamplerParameterIuiv=a("glGetSamplerParameterIuiv")
            openglGetSamplerParameterfv=a("glGetSamplerParameterfv")
            openglGetSamplerParameteriv=a("glGetSamplerParameteriv")
            openglGetShaderInfoLog=a("glGetShaderInfoLog")
            openglGetShaderPrecisionFormat=a("glGetShaderPrecisionFormat")
            openglGetShaderSource=a("glGetShaderSource")
            openglGetShaderiv=a("glGetShaderiv")
            openglGetString=a("glGetString")
            openglGetStringi=a("glGetStringi")
            openglGetSubroutineIndex=a("glGetSubroutineIndex")
            openglGetSubroutineUniformLocation=a("glGetSubroutineUniformLocation")
            openglGetSynciv=a("glGetSynciv")
            openglGetTexImage=a("glGetTexImage")
            openglGetTexLevelParameterfv=a("glGetTexLevelParameterfv")
            openglGetTexLevelParameteriv=a("glGetTexLevelParameteriv")
            openglGetTexParameterIiv=a("glGetTexParameterIiv")
            openglGetTexParameterIuiv=a("glGetTexParameterIuiv")
            openglGetTexParameterfv=a("glGetTexParameterfv")
            openglGetTexParameteriv=a("glGetTexParameteriv")
            openglGetTextureImage=a("glGetTextureImage")
            openglGetTextureLevelParameterfv=a("glGetTextureLevelParameterfv")
            openglGetTextureLevelParameteriv=a("glGetTextureLevelParameteriv")
            openglGetTextureParameterIiv=a("glGetTextureParameterIiv")
            openglGetTextureParameterIuiv=a("glGetTextureParameterIuiv")
            openglGetTextureParameterfv=a("glGetTextureParameterfv")
            openglGetTextureParameteriv=a("glGetTextureParameteriv")
            openglGetTextureSubImage=a("glGetTextureSubImage")
            openglGetTransformFeedbackVarying=a("glGetTransformFeedbackVarying")
            openglGetTransformFeedbacki64_v=a("glGetTransformFeedbacki64_v")
            openglGetTransformFeedbacki_v=a("glGetTransformFeedbacki_v")
            openglGetTransformFeedbackiv=a("glGetTransformFeedbackiv")
            openglGetUniformBlockIndex=a("glGetUniformBlockIndex")
            openglGetUniformIndices=a("glGetUniformIndices")
            openglGetUniformLocation=a("glGetUniformLocation")
            openglGetUniformSubroutineuiv=a("glGetUniformSubroutineuiv")
            openglGetUniformdv=a("glGetUniformdv")
            openglGetUniformfv=a("glGetUniformfv")
            openglGetUniformiv=a("glGetUniformiv")
            openglGetUniformuiv=a("glGetUniformuiv")
            openglGetVertexArrayIndexed64iv=a("glGetVertexArrayIndexed64iv")
            openglGetVertexArrayIndexediv=a("glGetVertexArrayIndexediv")
            openglGetVertexArrayiv=a("glGetVertexArrayiv")
            openglGetVertexAttribIiv=a("glGetVertexAttribIiv")
            openglGetVertexAttribIuiv=a("glGetVertexAttribIuiv")
            openglGetVertexAttribLdv=a("glGetVertexAttribLdv")
            openglGetVertexAttribPointerv=a("glGetVertexAttribPointerv")
            openglGetVertexAttribdv=a("glGetVertexAttribdv")
            openglGetVertexAttribfv=a("glGetVertexAttribfv")
            openglGetVertexAttribiv=a("glGetVertexAttribiv")
            openglGetnCompressedTexImage=a("glGetnCompressedTexImage")
            openglGetnTexImage=a("glGetnTexImage")
            openglGetnUniformdv=a("glGetnUniformdv")
            openglGetnUniformfv=a("glGetnUniformfv")
            openglGetnUniformiv=a("glGetnUniformiv")
            openglGetnUniformuiv=a("glGetnUniformuiv")
            openglHint=a("glHint")
            openglInvalidateBufferData=a("glInvalidateBufferData")
            openglInvalidateBufferSubData=a("glInvalidateBufferSubData")
            openglInvalidateFramebuffer=a("glInvalidateFramebuffer")
            openglInvalidateNamedFramebufferData=a("glInvalidateNamedFramebufferData")
            openglInvalidateNamedFramebufferSubData=a("glInvalidateNamedFramebufferSubData")
            openglInvalidateSubFramebuffer=a("glInvalidateSubFramebuffer")
            openglInvalidateTexImage=a("glInvalidateTexImage")
            openglInvalidateTexSubImage=a("glInvalidateTexSubImage")
            openglIsBuffer=a("glIsBuffer")
            openglIsEnabled=a("glIsEnabled")
            openglIsEnabledi=a("glIsEnabledi")
            openglIsFramebuffer=a("glIsFramebuffer")
            openglIsProgram=a("glIsProgram")
            openglIsProgramPipeline=a("glIsProgramPipeline")
            openglIsQuery=a("glIsQuery")
            openglIsRenderbuffer=a("glIsRenderbuffer")
            openglIsSampler=a("glIsSampler")
            openglIsShader=a("glIsShader")
            openglIsSync=a("glIsSync")
            openglIsTexture=a("glIsTexture")
            openglIsTransformFeedback=a("glIsTransformFeedback")
            openglIsVertexArray=a("glIsVertexArray")
            openglLineWidth=a("glLineWidth")
            openglLinkProgram=a("glLinkProgram")
            openglLogicOp=a("glLogicOp")
            openglMapBuffer=a("glMapBuffer")
            openglMapBufferRange=a("glMapBufferRange")
            openglMapNamedBuffer=a("glMapNamedBuffer")
            openglMapNamedBufferRange=a("glMapNamedBufferRange")
            openglMemoryBarrier=a("glMemoryBarrier")
            openglMemoryBarrierByRegion=a("glMemoryBarrierByRegion")
            openglMinSampleShading=a("glMinSampleShading")
            openglMultiDrawArrays=a("glMultiDrawArrays")
            openglMultiDrawArraysIndirect=a("glMultiDrawArraysIndirect")
            openglMultiDrawArraysIndirectCount=a("glMultiDrawArraysIndirectCount")
            openglMultiDrawElements=a("glMultiDrawElements")
            openglMultiDrawElementsBaseVertex=a("glMultiDrawElementsBaseVertex")
            openglMultiDrawElementsIndirect=a("glMultiDrawElementsIndirect")
            openglMultiDrawElementsIndirectCount=a("glMultiDrawElementsIndirectCount")
            openglNamedBufferData=a("glNamedBufferData")
            openglNamedBufferStorage=a("glNamedBufferStorage")
            openglNamedBufferSubData=a("glNamedBufferSubData")
            openglNamedFramebufferDrawBuffer=a("glNamedFramebufferDrawBuffer")
            openglNamedFramebufferDrawBuffers=a("glNamedFramebufferDrawBuffers")
            openglNamedFramebufferParameteri=a("glNamedFramebufferParameteri")
            openglNamedFramebufferReadBuffer=a("glNamedFramebufferReadBuffer")
            openglNamedFramebufferRenderbuffer=a("glNamedFramebufferRenderbuffer")
            openglNamedFramebufferTexture=a("glNamedFramebufferTexture")
            openglNamedFramebufferTextureLayer=a("glNamedFramebufferTextureLayer")
            openglNamedRenderbufferStorage=a("glNamedRenderbufferStorage")
            openglNamedRenderbufferStorageMultisample=a("glNamedRenderbufferStorageMultisample")
            openglObjectLabel=a("glObjectLabel")
            openglObjectPtrLabel=a("glObjectPtrLabel")
            openglPatchParameterfv=a("glPatchParameterfv")
            openglPatchParameteri=a("glPatchParameteri")
            openglPauseTransformFeedback=a("glPauseTransformFeedback")
            openglPixelStoref=a("glPixelStoref")
            openglPixelStorei=a("glPixelStorei")
            openglPointParameterf=a("glPointParameterf")
            openglPointParameterfv=a("glPointParameterfv")
            openglPointParameteri=a("glPointParameteri")
            openglPointParameteriv=a("glPointParameteriv")
            openglPointSize=a("glPointSize")
            openglPolygonMode=a("glPolygonMode")
            openglPolygonOffset=a("glPolygonOffset")
            openglPolygonOffsetClamp=a("glPolygonOffsetClamp")
            openglPopDebugGroup=a("glPopDebugGroup")
            openglPrimitiveRestartIndex=a("glPrimitiveRestartIndex")
            openglProgramBinary=a("glProgramBinary")
            openglProgramParameteri=a("glProgramParameteri")
            openglProgramUniform1d=a("glProgramUniform1d")
            openglProgramUniform1dv=a("glProgramUniform1dv")
            openglProgramUniform1f=a("glProgramUniform1f")
            openglProgramUniform1fv=a("glProgramUniform1fv")
            openglProgramUniform1i=a("glProgramUniform1i")
            openglProgramUniform1iv=a("glProgramUniform1iv")
            openglProgramUniform1ui=a("glProgramUniform1ui")
            openglProgramUniform1uiv=a("glProgramUniform1uiv")
            openglProgramUniform2d=a("glProgramUniform2d")
            openglProgramUniform2dv=a("glProgramUniform2dv")
            openglProgramUniform2f=a("glProgramUniform2f")
            openglProgramUniform2fv=a("glProgramUniform2fv")
            openglProgramUniform2i=a("glProgramUniform2i")
            openglProgramUniform2iv=a("glProgramUniform2iv")
            openglProgramUniform2ui=a("glProgramUniform2ui")
            openglProgramUniform2uiv=a("glProgramUniform2uiv")
            openglProgramUniform3d=a("glProgramUniform3d")
            openglProgramUniform3dv=a("glProgramUniform3dv")
            openglProgramUniform3f=a("glProgramUniform3f")
            openglProgramUniform3fv=a("glProgramUniform3fv")
            openglProgramUniform3i=a("glProgramUniform3i")
            openglProgramUniform3iv=a("glProgramUniform3iv")
            openglProgramUniform3ui=a("glProgramUniform3ui")
            openglProgramUniform3uiv=a("glProgramUniform3uiv")
            openglProgramUniform4d=a("glProgramUniform4d")
            openglProgramUniform4dv=a("glProgramUniform4dv")
            openglProgramUniform4f=a("glProgramUniform4f")
            openglProgramUniform4fv=a("glProgramUniform4fv")
            openglProgramUniform4i=a("glProgramUniform4i")
            openglProgramUniform4iv=a("glProgramUniform4iv")
            openglProgramUniform4ui=a("glProgramUniform4ui")
            openglProgramUniform4uiv=a("glProgramUniform4uiv")
            openglProgramUniformMatrix2dv=a("glProgramUniformMatrix2dv")
            openglProgramUniformMatrix2fv=a("glProgramUniformMatrix2fv")
            openglProgramUniformMatrix2x3dv=a("glProgramUniformMatrix2x3dv")
            openglProgramUniformMatrix2x3fv=a("glProgramUniformMatrix2x3fv")
            openglProgramUniformMatrix2x4dv=a("glProgramUniformMatrix2x4dv")
            openglProgramUniformMatrix2x4fv=a("glProgramUniformMatrix2x4fv")
            openglProgramUniformMatrix3dv=a("glProgramUniformMatrix3dv")
            openglProgramUniformMatrix3fv=a("glProgramUniformMatrix3fv")
            openglProgramUniformMatrix3x2dv=a("glProgramUniformMatrix3x2dv")
            openglProgramUniformMatrix3x2fv=a("glProgramUniformMatrix3x2fv")
            openglProgramUniformMatrix3x4dv=a("glProgramUniformMatrix3x4dv")
            openglProgramUniformMatrix3x4fv=a("glProgramUniformMatrix3x4fv")
            openglProgramUniformMatrix4dv=a("glProgramUniformMatrix4dv")
            openglProgramUniformMatrix4fv=a("glProgramUniformMatrix4fv")
            openglProgramUniformMatrix4x2dv=a("glProgramUniformMatrix4x2dv")
            openglProgramUniformMatrix4x2fv=a("glProgramUniformMatrix4x2fv")
            openglProgramUniformMatrix4x3dv=a("glProgramUniformMatrix4x3dv")
            openglProgramUniformMatrix4x3fv=a("glProgramUniformMatrix4x3fv")
            openglProvokingVertex=a("glProvokingVertex")
            openglPushDebugGroup=a("glPushDebugGroup")
            openglQueryCounter=a("glQueryCounter")
            openglReadBuffer=a("glReadBuffer")
            openglReadPixels=a("glReadPixels")
            openglReadnPixels=a("glReadnPixels")
            openglReleaseShaderCompiler=a("glReleaseShaderCompiler")
            openglRenderbufferStorage=a("glRenderbufferStorage")
            openglRenderbufferStorageMultisample=a("glRenderbufferStorageMultisample")
            openglResumeTransformFeedback=a("glResumeTransformFeedback")
            openglSampleCoverage=a("glSampleCoverage")
            openglSampleMaski=a("glSampleMaski")
            openglSamplerParameterIiv=a("glSamplerParameterIiv")
            openglSamplerParameterIuiv=a("glSamplerParameterIuiv")
            openglSamplerParameterf=a("glSamplerParameterf")
            openglSamplerParameterfv=a("glSamplerParameterfv")
            openglSamplerParameteri=a("glSamplerParameteri")
            openglSamplerParameteriv=a("glSamplerParameteriv")
            openglScissor=a("glScissor")
            openglScissorArrayv=a("glScissorArrayv")
            openglScissorIndexed=a("glScissorIndexed")
            openglScissorIndexedv=a("glScissorIndexedv")
            openglShaderBinary=a("glShaderBinary")
            openglShaderSource=a("glShaderSource")
            openglShaderStorageBlockBinding=a("glShaderStorageBlockBinding")
            openglSpecializeShader=a("glSpecializeShader")
            openglStencilFunc=a("glStencilFunc")
            openglStencilFuncSeparate=a("glStencilFuncSeparate")
            openglStencilMask=a("glStencilMask")
            openglStencilMaskSeparate=a("glStencilMaskSeparate")
            openglStencilOp=a("glStencilOp")
            openglStencilOpSeparate=a("glStencilOpSeparate")
            openglTexBuffer=a("glTexBuffer")
            openglTexBufferRange=a("glTexBufferRange")
            openglTexImage1D=a("glTexImage1D")
            openglTexImage2D=a("glTexImage2D")
            openglTexImage2DMultisample=a("glTexImage2DMultisample")
            openglTexImage3D=a("glTexImage3D")
            openglTexImage3DMultisample=a("glTexImage3DMultisample")
            openglTexParameterIiv=a("glTexParameterIiv")
            openglTexParameterIuiv=a("glTexParameterIuiv")
            openglTexParameterf=a("glTexParameterf")
            openglTexParameterfv=a("glTexParameterfv")
            openglTexParameteri=a("glTexParameteri")
            openglTexParameteriv=a("glTexParameteriv")
            openglTexStorage1D=a("glTexStorage1D")
            openglTexStorage2D=a("glTexStorage2D")
            openglTexStorage2DMultisample=a("glTexStorage2DMultisample")
            openglTexStorage3D=a("glTexStorage3D")
            openglTexStorage3DMultisample=a("glTexStorage3DMultisample")
            openglTexSubImage1D=a("glTexSubImage1D")
            openglTexSubImage2D=a("glTexSubImage2D")
            openglTexSubImage3D=a("glTexSubImage3D")
            openglTextureBarrier=a("glTextureBarrier")
            openglTextureBuffer=a("glTextureBuffer")
            openglTextureBufferRange=a("glTextureBufferRange")
            openglTextureParameterIiv=a("glTextureParameterIiv")
            openglTextureParameterIuiv=a("glTextureParameterIuiv")
            openglTextureParameterf=a("glTextureParameterf")
            openglTextureParameterfv=a("glTextureParameterfv")
            openglTextureParameteri=a("glTextureParameteri")
            openglTextureParameteriv=a("glTextureParameteriv")
            openglTextureStorage1D=a("glTextureStorage1D")
            openglTextureStorage2D=a("glTextureStorage2D")
            openglTextureStorage2DMultisample=a("glTextureStorage2DMultisample")
            openglTextureStorage3D=a("glTextureStorage3D")
            openglTextureStorage3DMultisample=a("glTextureStorage3DMultisample")
            openglTextureSubImage1D=a("glTextureSubImage1D")
            openglTextureSubImage2D=a("glTextureSubImage2D")
            openglTextureSubImage3D=a("glTextureSubImage3D")
            openglTextureView=a("glTextureView")
            openglTransformFeedbackBufferBase=a("glTransformFeedbackBufferBase")
            openglTransformFeedbackBufferRange=a("glTransformFeedbackBufferRange")
            openglTransformFeedbackVaryings=a("glTransformFeedbackVaryings")
            openglUniform1d=a("glUniform1d")
            openglUniform1dv=a("glUniform1dv")
            openglUniform1f=a("glUniform1f")
            openglUniform1fv=a("glUniform1fv")
            openglUniform1i=a("glUniform1i")
            openglUniform1iv=a("glUniform1iv")
            openglUniform1ui=a("glUniform1ui")
            openglUniform1uiv=a("glUniform1uiv")
            openglUniform2d=a("glUniform2d")
            openglUniform2dv=a("glUniform2dv")
            openglUniform2f=a("glUniform2f")
            openglUniform2fv=a("glUniform2fv")
            openglUniform2i=a("glUniform2i")
            openglUniform2iv=a("glUniform2iv")
            openglUniform2ui=a("glUniform2ui")
            openglUniform2uiv=a("glUniform2uiv")
            openglUniform3d=a("glUniform3d")
            openglUniform3dv=a("glUniform3dv")
            openglUniform3f=a("glUniform3f")
            openglUniform3fv=a("glUniform3fv")
            openglUniform3i=a("glUniform3i")
            openglUniform3iv=a("glUniform3iv")
            openglUniform3ui=a("glUniform3ui")
            openglUniform3uiv=a("glUniform3uiv")
            openglUniform4d=a("glUniform4d")
            openglUniform4dv=a("glUniform4dv")
            openglUniform4f=a("glUniform4f")
            openglUniform4fv=a("glUniform4fv")
            openglUniform4i=a("glUniform4i")
            openglUniform4iv=a("glUniform4iv")
            openglUniform4ui=a("glUniform4ui")
            openglUniform4uiv=a("glUniform4uiv")
            openglUniformBlockBinding=a("glUniformBlockBinding")
            openglUniformMatrix2dv=a("glUniformMatrix2dv")
            openglUniformMatrix2fv=a("glUniformMatrix2fv")
            openglUniformMatrix2x3dv=a("glUniformMatrix2x3dv")
            openglUniformMatrix2x3fv=a("glUniformMatrix2x3fv")
            openglUniformMatrix2x4dv=a("glUniformMatrix2x4dv")
            openglUniformMatrix2x4fv=a("glUniformMatrix2x4fv")
            openglUniformMatrix3dv=a("glUniformMatrix3dv")
            openglUniformMatrix3fv=a("glUniformMatrix3fv")
            openglUniformMatrix3x2dv=a("glUniformMatrix3x2dv")
            openglUniformMatrix3x2fv=a("glUniformMatrix3x2fv")
            openglUniformMatrix3x4dv=a("glUniformMatrix3x4dv")
            openglUniformMatrix3x4fv=a("glUniformMatrix3x4fv")
            openglUniformMatrix4dv=a("glUniformMatrix4dv")
            openglUniformMatrix4fv=a("glUniformMatrix4fv")
            openglUniformMatrix4x2dv=a("glUniformMatrix4x2dv")
            openglUniformMatrix4x2fv=a("glUniformMatrix4x2fv")
            openglUniformMatrix4x3dv=a("glUniformMatrix4x3dv")
            openglUniformMatrix4x3fv=a("glUniformMatrix4x3fv")
            openglUniformSubroutinesuiv=a("glUniformSubroutinesuiv")
            openglUnmapBuffer=a("glUnmapBuffer")
            openglUnmapNamedBuffer=a("glUnmapNamedBuffer")
            openglUseProgram=a("glUseProgram")
            openglUseProgramStages=a("glUseProgramStages")
            openglValidateProgram=a("glValidateProgram")
            openglValidateProgramPipeline=a("glValidateProgramPipeline")
            openglVertexArrayAttribBinding=a("glVertexArrayAttribBinding")
            openglVertexArrayAttribFormat=a("glVertexArrayAttribFormat")
            openglVertexArrayAttribIFormat=a("glVertexArrayAttribIFormat")
            openglVertexArrayAttribLFormat=a("glVertexArrayAttribLFormat")
            openglVertexArrayBindingDivisor=a("glVertexArrayBindingDivisor")
            openglVertexArrayElementBuffer=a("glVertexArrayElementBuffer")
            openglVertexArrayVertexBuffer=a("glVertexArrayVertexBuffer")
            openglVertexArrayVertexBuffers=a("glVertexArrayVertexBuffers")
            openglVertexAttrib1d=a("glVertexAttrib1d")
            openglVertexAttrib1dv=a("glVertexAttrib1dv")
            openglVertexAttrib1f=a("glVertexAttrib1f")
            openglVertexAttrib1fv=a("glVertexAttrib1fv")
            openglVertexAttrib1s=a("glVertexAttrib1s")
            openglVertexAttrib1sv=a("glVertexAttrib1sv")
            openglVertexAttrib2d=a("glVertexAttrib2d")
            openglVertexAttrib2dv=a("glVertexAttrib2dv")
            openglVertexAttrib2f=a("glVertexAttrib2f")
            openglVertexAttrib2fv=a("glVertexAttrib2fv")
            openglVertexAttrib2s=a("glVertexAttrib2s")
            openglVertexAttrib2sv=a("glVertexAttrib2sv")
            openglVertexAttrib3d=a("glVertexAttrib3d")
            openglVertexAttrib3dv=a("glVertexAttrib3dv")
            openglVertexAttrib3f=a("glVertexAttrib3f")
            openglVertexAttrib3fv=a("glVertexAttrib3fv")
            openglVertexAttrib3s=a("glVertexAttrib3s")
            openglVertexAttrib3sv=a("glVertexAttrib3sv")
            openglVertexAttrib4Nbv=a("glVertexAttrib4Nbv")
            openglVertexAttrib4Niv=a("glVertexAttrib4Niv")
            openglVertexAttrib4Nsv=a("glVertexAttrib4Nsv")
            openglVertexAttrib4Nub=a("glVertexAttrib4Nub")
            openglVertexAttrib4Nubv=a("glVertexAttrib4Nubv")
            openglVertexAttrib4Nuiv=a("glVertexAttrib4Nuiv")
            openglVertexAttrib4Nusv=a("glVertexAttrib4Nusv")
            openglVertexAttrib4bv=a("glVertexAttrib4bv")
            openglVertexAttrib4d=a("glVertexAttrib4d")
            openglVertexAttrib4dv=a("glVertexAttrib4dv")
            openglVertexAttrib4f=a("glVertexAttrib4f")
            openglVertexAttrib4fv=a("glVertexAttrib4fv")
            openglVertexAttrib4iv=a("glVertexAttrib4iv")
            openglVertexAttrib4s=a("glVertexAttrib4s")
            openglVertexAttrib4sv=a("glVertexAttrib4sv")
            openglVertexAttrib4ubv=a("glVertexAttrib4ubv")
            openglVertexAttrib4uiv=a("glVertexAttrib4uiv")
            openglVertexAttrib4usv=a("glVertexAttrib4usv")
            openglVertexAttribBinding=a("glVertexAttribBinding")
            openglVertexAttribDivisor=a("glVertexAttribDivisor")
            openglVertexAttribFormat=a("glVertexAttribFormat")
            openglVertexAttribI1i=a("glVertexAttribI1i")
            openglVertexAttribI1iv=a("glVertexAttribI1iv")
            openglVertexAttribI1ui=a("glVertexAttribI1ui")
            openglVertexAttribI1uiv=a("glVertexAttribI1uiv")
            openglVertexAttribI2i=a("glVertexAttribI2i")
            openglVertexAttribI2iv=a("glVertexAttribI2iv")
            openglVertexAttribI2ui=a("glVertexAttribI2ui")
            openglVertexAttribI2uiv=a("glVertexAttribI2uiv")
            openglVertexAttribI3i=a("glVertexAttribI3i")
            openglVertexAttribI3iv=a("glVertexAttribI3iv")
            openglVertexAttribI3ui=a("glVertexAttribI3ui")
            openglVertexAttribI3uiv=a("glVertexAttribI3uiv")
            openglVertexAttribI4bv=a("glVertexAttribI4bv")
            openglVertexAttribI4i=a("glVertexAttribI4i")
            openglVertexAttribI4iv=a("glVertexAttribI4iv")
            openglVertexAttribI4sv=a("glVertexAttribI4sv")
            openglVertexAttribI4ubv=a("glVertexAttribI4ubv")
            openglVertexAttribI4ui=a("glVertexAttribI4ui")
            openglVertexAttribI4uiv=a("glVertexAttribI4uiv")
            openglVertexAttribI4usv=a("glVertexAttribI4usv")
            openglVertexAttribIFormat=a("glVertexAttribIFormat")
            openglVertexAttribIPointer=a("glVertexAttribIPointer")
            openglVertexAttribL1d=a("glVertexAttribL1d")
            openglVertexAttribL1dv=a("glVertexAttribL1dv")
            openglVertexAttribL2d=a("glVertexAttribL2d")
            openglVertexAttribL2dv=a("glVertexAttribL2dv")
            openglVertexAttribL3d=a("glVertexAttribL3d")
            openglVertexAttribL3dv=a("glVertexAttribL3dv")
            openglVertexAttribL4d=a("glVertexAttribL4d")
            openglVertexAttribL4dv=a("glVertexAttribL4dv")
            openglVertexAttribLFormat=a("glVertexAttribLFormat")
            openglVertexAttribLPointer=a("glVertexAttribLPointer")
            openglVertexAttribP1ui=a("glVertexAttribP1ui")
            openglVertexAttribP1uiv=a("glVertexAttribP1uiv")
            openglVertexAttribP2ui=a("glVertexAttribP2ui")
            openglVertexAttribP2uiv=a("glVertexAttribP2uiv")
            openglVertexAttribP3ui=a("glVertexAttribP3ui")
            openglVertexAttribP3uiv=a("glVertexAttribP3uiv")
            openglVertexAttribP4ui=a("glVertexAttribP4ui")
            openglVertexAttribP4uiv=a("glVertexAttribP4uiv")
            openglVertexAttribPointer=a("glVertexAttribPointer")
            openglVertexBindingDivisor=a("glVertexBindingDivisor")
            openglViewport=a("glViewport")
            openglViewportArrayv=a("glViewportArrayv")
            openglViewportIndexedf=a("glViewportIndexedf")
            openglViewportIndexedfv=a("glViewportIndexedfv")

        }
    
/////////////////调用转换函数/////////待设置///////////////////////////////////////
    openglWaitSync=a("glWaitSync")
    }
    func ActiveShaderProgram( pipeline:UInt32, program:UInt32):Unit
    {                                                                         
    let glActiveShaderProgram=CFunc<( pipeline:UInt32, program:UInt32)->Unit>(openglActiveShaderProgram)
    unsafe{glActiveShaderProgram( pipeline, program)}
    }
    func ActiveTexture( texture:UInt32):Unit
    { 
    let glActiveTexture=CFunc<( texture:UInt32)->Unit>(openglActiveTexture)
    unsafe{glActiveTexture( texture)}
    }
    func AttachShader( program:UInt32, shader:UInt32):Unit
    { 
    let glAttachShader=CFunc<( program:UInt32, shader:UInt32)->Unit>(openglAttachShader)
    unsafe{glAttachShader( program, shader)}
    }
    func BeginConditionalRender( id:UInt32, mode:UInt32):Unit
    { 
    let glBeginConditionalRender=CFunc<( id:UInt32, mode:UInt32)->Unit>(openglBeginConditionalRender)
    unsafe{glBeginConditionalRender( id, mode)}
    }
    func BeginQuery( target:UInt32, id:UInt32):Unit
    { 
    let glBeginQuery=CFunc<( target:UInt32, id:UInt32)->Unit>(openglBeginQuery)
    unsafe{glBeginQuery( target, id)}
    }
    func BeginQueryIndexed( target:UInt32, index:UInt32, id:UInt32):Unit
    { 
    let glBeginQueryIndexed=CFunc<( target:UInt32, index:UInt32, id:UInt32)->Unit>(openglBeginQueryIndexed)
    unsafe{glBeginQueryIndexed( target, index, id)}
    }
    func BeginTransformFeedback( primitiveMode:UInt32):Unit
    { 
    let glBeginTransformFeedback=CFunc<( primitiveMode:UInt32)->Unit>(openglBeginTransformFeedback)
    unsafe{glBeginTransformFeedback( primitiveMode)}
    }
    func BindAttribLocation( program:UInt32, index:UInt32, name:String):Unit
    { 
        
    let glBindAttribLocation=CFunc<( program:UInt32, index:UInt32, name:CString)->Unit>(openglBindAttribLocation)
    unsafe{glBindAttribLocation( program, index, LibC.mallocCString("${name}"))}
    }
    func BindBuffer( target:UInt32, buffer:UInt32):Unit
    { 
    let glBindBuffer=CFunc<( target:UInt32, buffer:UInt32)->Unit>(openglBindBuffer)
    unsafe{glBindBuffer( target, buffer)}
    }
    func BindBufferBase( target:UInt32, index:UInt32, buffer:UInt32):Unit
    { 
    let glBindBufferBase=CFunc<( target:UInt32, index:UInt32, buffer:UInt32)->Unit>(openglBindBufferBase)
    unsafe{glBindBufferBase( target, index, buffer)}
    }
    func BindBufferRange( target:UInt32, index:UInt32, buffer:UInt32, offset:Int64, size:Int64):Unit
    { 
    let glBindBufferRange=CFunc<( target:UInt32, index:UInt32, buffer:UInt32, offset:Int64, size:Int64)->Unit>(openglBindBufferRange)
    unsafe{glBindBufferRange( target, index, buffer, offset, size)}
    }
    func BindBuffersBase( target:UInt32, first:UInt32, count:Int32, buffers:CPointer<UInt32>):Unit
    { 
    let glBindBuffersBase=CFunc<( target:UInt32, first:UInt32, count:Int32, buffers:CPointer<UInt32>)->Unit>(openglBindBuffersBase)
    unsafe{glBindBuffersBase( target, first, count, buffers)}
    }
    func BindBuffersRange( target:UInt32, first:UInt32, count:Int32, buffers:CPointer<UInt32>, offsets:CPointer<Int64>, sizes:CPointer<Int64>):Unit
    { 
    let glBindBuffersRange=CFunc<( target:UInt32, first:UInt32, count:Int32, buffers:CPointer<UInt32>, offsets:CPointer<Int64>, sizes:CPointer<Int64>)->Unit>(openglBindBuffersRange)
    unsafe{glBindBuffersRange( target, first, count, buffers, offsets, sizes)}
    }
    func BindFragDataLocation( program:UInt32, color:UInt32, name:String):Unit
    { 
    let glBindFragDataLocation=CFunc<( program:UInt32, color:UInt32, name:CString)->Unit>(openglBindFragDataLocation)
    unsafe{glBindFragDataLocation( program, color, LibC.mallocCString("${name}"))}
    }
    func BindFragDataLocationIndexed( program:UInt32, colorNumber:UInt32, index:UInt32, name:String):Unit
    { 
    let glBindFragDataLocationIndexed=CFunc<( program:UInt32, colorNumber:UInt32, index:UInt32, name:CString)->Unit>(openglBindFragDataLocationIndexed)
    unsafe{glBindFragDataLocationIndexed( program, colorNumber, index, LibC.mallocCString("${name}"))}
    }
    func BindFramebuffer( target:UInt32, framebuffer:UInt32):Unit
    { 
    let glBindFramebuffer=CFunc<( target:UInt32, framebuffer:UInt32)->Unit>(openglBindFramebuffer)
    unsafe{glBindFramebuffer( target, framebuffer)}
    }
    func BindImageTexture( unit:UInt32, texture:UInt32, level:Int32, layered:UInt8, layer:Int32, access:UInt32, format:UInt32):Unit
    { 
    let glBindImageTexture=CFunc<( unit:UInt32, texture:UInt32, level:Int32, layered:UInt8, layer:Int32, access:UInt32, format:UInt32)->Unit>(openglBindImageTexture)
    unsafe{glBindImageTexture( unit, texture, level, layered, layer, access, format)}
    }
    func BindImageTextures( first:UInt32, count:Int32, textures:CPointer<UInt32>):Unit
    { 
    let glBindImageTextures=CFunc<( first:UInt32, count:Int32, textures:CPointer<UInt32>)->Unit>(openglBindImageTextures)
    unsafe{glBindImageTextures( first, count, textures)}
    }
    func BindProgramPipeline( pipeline:UInt32):Unit
    { 
    let glBindProgramPipeline=CFunc<( pipeline:UInt32)->Unit>(openglBindProgramPipeline)
    unsafe{glBindProgramPipeline( pipeline)}
    }
    func BindRenderbuffer( target:UInt32, renderbuffer:UInt32):Unit
    { 
    let glBindRenderbuffer=CFunc<( target:UInt32, renderbuffer:UInt32)->Unit>(openglBindRenderbuffer)
    unsafe{glBindRenderbuffer( target, renderbuffer)}
    }
    func BindSampler( unit:UInt32, sampler:UInt32):Unit
    { 
    let glBindSampler=CFunc<( unit:UInt32, sampler:UInt32)->Unit>(openglBindSampler)
    unsafe{glBindSampler( unit, sampler)}
    }
    func BindSamplers( first:UInt32, count:Int32, samplers:CPointer<UInt32>):Unit
    { 
    let glBindSamplers=CFunc<( first:UInt32, count:Int32, samplers:CPointer<UInt32>)->Unit>(openglBindSamplers)
    unsafe{glBindSamplers( first, count, samplers)}
    }
    func BindTexture( target:UInt32, texture:UInt32):Unit
    { 
    let glBindTexture=CFunc<( target:UInt32, texture:UInt32)->Unit>(openglBindTexture)
    unsafe{glBindTexture( target, texture)}
    }
    func BindTextureUnit( unit:UInt32, texture:UInt32):Unit
    { 
    let glBindTextureUnit=CFunc<( unit:UInt32, texture:UInt32)->Unit>(openglBindTextureUnit)
    unsafe{glBindTextureUnit( unit, texture)}
    }
    func BindTextures( first:UInt32, count:Int32, textures:CPointer<UInt32>):Unit
    { 
    let glBindTextures=CFunc<( first:UInt32, count:Int32, textures:CPointer<UInt32>)->Unit>(openglBindTextures)
    unsafe{glBindTextures( first, count, textures)}
    }
    func BindTransformFeedback( target:UInt32, id:UInt32):Unit
    { 
    let glBindTransformFeedback=CFunc<( target:UInt32, id:UInt32)->Unit>(openglBindTransformFeedback)
    unsafe{glBindTransformFeedback( target, id)}
    }
    func BindVertexArray( array:UInt32):Unit
    { 
    let glBindVertexArray=CFunc<( array:UInt32)->Unit>(openglBindVertexArray)
    unsafe{glBindVertexArray( array)}
    }
    func BindVertexBuffer( bindingindex:UInt32, buffer:UInt32, offset:Int64, stride:Int32):Unit
    { 
    let glBindVertexBuffer=CFunc<( bindingindex:UInt32, buffer:UInt32, offset:Int64, stride:Int32)->Unit>(openglBindVertexBuffer)
    unsafe{glBindVertexBuffer( bindingindex, buffer, offset, stride)}
    }
    func BindVertexBuffers( first:UInt32, count:Int32, buffers:CPointer<UInt32>, offsets:CPointer<Int64>, strides:CPointer<Int32>):Unit
    { 
    let glBindVertexBuffers=CFunc<( first:UInt32, count:Int32, buffers:CPointer<UInt32>, offsets:CPointer<Int64>, strides:CPointer<Int32>)->Unit>(openglBindVertexBuffers)
    unsafe{glBindVertexBuffers( first, count, buffers, offsets, strides)}
    }
    func BlendColor( red:Float32, green:Float32, blue:Float32, alpha:Float32):Unit
    { 
    let glBlendColor=CFunc<( red:Float32, green:Float32, blue:Float32, alpha:Float32)->Unit>(openglBlendColor)
    unsafe{glBlendColor( red, green, blue, alpha)}
    }
    func BlendEquation( mode:UInt32):Unit
    { 
    let glBlendEquation=CFunc<( mode:UInt32)->Unit>(openglBlendEquation)
    unsafe{glBlendEquation( mode)}
    }
    func BlendEquationSeparate( modeRGB:UInt32, modeAlpha:UInt32):Unit
    { 
    let glBlendEquationSeparate=CFunc<( modeRGB:UInt32, modeAlpha:UInt32)->Unit>(openglBlendEquationSeparate)
    unsafe{glBlendEquationSeparate( modeRGB, modeAlpha)}
    }
    func BlendEquationSeparatei( buf:UInt32, modeRGB:UInt32, modeAlpha:UInt32):Unit
    { 
    let glBlendEquationSeparatei=CFunc<( buf:UInt32, modeRGB:UInt32, modeAlpha:UInt32)->Unit>(openglBlendEquationSeparatei)
    unsafe{glBlendEquationSeparatei( buf, modeRGB, modeAlpha)}
    }
    func BlendEquationi( buf:UInt32, mode:UInt32):Unit
    { 
    let glBlendEquationi=CFunc<( buf:UInt32, mode:UInt32)->Unit>(openglBlendEquationi)
    unsafe{glBlendEquationi( buf, mode)}
    }
    func BlendFunc( sfactor:UInt32, dfactor:UInt32):Unit
    { 
    let glBlendFunc=CFunc<( sfactor:UInt32, dfactor:UInt32)->Unit>(openglBlendFunc)
    unsafe{glBlendFunc( sfactor, dfactor)}
    }
    func BlendFuncSeparate( sfactorRGB:UInt32, dfactorRGB:UInt32, sfactorAlpha:UInt32, dfactorAlpha:UInt32):Unit
    { 
    let glBlendFuncSeparate=CFunc<( sfactorRGB:UInt32, dfactorRGB:UInt32, sfactorAlpha:UInt32, dfactorAlpha:UInt32)->Unit>(openglBlendFuncSeparate)
    unsafe{glBlendFuncSeparate( sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha)}
    }
    func BlendFuncSeparatei( buf:UInt32, srcRGB:UInt32, dstRGB:UInt32, srcAlpha:UInt32, dstAlpha:UInt32):Unit
    { 
    let glBlendFuncSeparatei=CFunc<( buf:UInt32, srcRGB:UInt32, dstRGB:UInt32, srcAlpha:UInt32, dstAlpha:UInt32)->Unit>(openglBlendFuncSeparatei)
    unsafe{glBlendFuncSeparatei( buf, srcRGB, dstRGB, srcAlpha, dstAlpha)}
    }
    func BlendFunci( buf:UInt32, src:UInt32, dst:UInt32):Unit
    { 
    let glBlendFunci=CFunc<( buf:UInt32, src:UInt32, dst:UInt32)->Unit>(openglBlendFunci)
    unsafe{glBlendFunci( buf, src, dst)}
    }
    func BlitFramebuffer( srcX0:Int32, srcY0:Int32, srcX1:Int32, srcY1:Int32, dstX0:Int32, dstY0:Int32, dstX1:Int32, dstY1:Int32, mask:UInt32, filter:UInt32):Unit
    { 
    let glBlitFramebuffer=CFunc<( srcX0:Int32, srcY0:Int32, srcX1:Int32, srcY1:Int32, dstX0:Int32, dstY0:Int32, dstX1:Int32, dstY1:Int32, mask:UInt32, filter:UInt32)->Unit>(openglBlitFramebuffer)
    unsafe{glBlitFramebuffer( srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)}
    }
    func BlitNamedFramebuffer( readFramebuffer:UInt32, drawFramebuffer:UInt32, srcX0:Int32, srcY0:Int32, srcX1:Int32, srcY1:Int32, dstX0:Int32, dstY0:Int32, dstX1:Int32, dstY1:Int32, mask:UInt32, filter:UInt32):Unit
    { 
    let glBlitNamedFramebuffer=CFunc<( readFramebuffer:UInt32, drawFramebuffer:UInt32, srcX0:Int32, srcY0:Int32, srcX1:Int32, srcY1:Int32, dstX0:Int32, dstY0:Int32, dstX1:Int32, dstY1:Int32, mask:UInt32, filter:UInt32)->Unit>(openglBlitNamedFramebuffer)
    unsafe{glBlitNamedFramebuffer( readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)}
    }
    func BufferData( target:UInt32, size:Int64, data:CPointer<Unit>, usage:UInt32):Unit
    { 
    let glBufferData=CFunc<( target:UInt32, size:Int64, data:CPointer<Unit>, usage:UInt32)->Unit>(openglBufferData)
    unsafe{glBufferData( target, size, data, usage)}
    }
    func BufferStorage( target:UInt32, size:Int64, data:CPointer<Unit>, flags:UInt32):Unit
    { 
    let glBufferStorage=CFunc<( target:UInt32, size:Int64, data:CPointer<Unit>, flags:UInt32)->Unit>(openglBufferStorage)
    unsafe{glBufferStorage( target, size, data, flags)}
    }
    func BufferSubData( target:UInt32, offset:Int64, size:Int64, data:CPointer<Unit>):Unit
    { 
    let glBufferSubData=CFunc<( target:UInt32, offset:Int64, size:Int64, data:CPointer<Unit>)->Unit>(openglBufferSubData)
    unsafe{glBufferSubData( target, offset, size, data)}
    }
    func CheckFramebufferStatus( target:UInt32):UInt32
    { 
    let glCheckFramebufferStatus=CFunc<( target:UInt32)->UInt32>(openglCheckFramebufferStatus)
    unsafe{glCheckFramebufferStatus( target)}
    }
    func CheckNamedFramebufferStatus( framebuffer:UInt32, target:UInt32):UInt32
    { 
    let glCheckNamedFramebufferStatus=CFunc<( framebuffer:UInt32, target:UInt32)->UInt32>(openglCheckNamedFramebufferStatus)
    unsafe{glCheckNamedFramebufferStatus( framebuffer, target)}
    }
    func ClampColor( target:UInt32, clamp:UInt32):Unit
    { 
    let glClampColor=CFunc<( target:UInt32, clamp:UInt32)->Unit>(openglClampColor)
    unsafe{glClampColor( target, clamp)}
    }
    func Clear( mask:Int):Unit
    { 
    let glClear=CFunc<( mask:Int)->Unit>(openglClear)
    unsafe{glClear(mask)}
    }
    func ClearBufferData( target:UInt32, internalformat:UInt32, format:UInt32,ttype:UInt32, data:CPointer<Unit>):Unit
    { 
    let glClearBufferData=CFunc<( target:UInt32, internalformat:UInt32, format:UInt32,ttype:UInt32, data:CPointer<Unit>)->Unit>(openglClearBufferData)
    unsafe{glClearBufferData( target, internalformat, format,ttype, data)}
    }
    func ClearBufferSubData( target:UInt32, internalformat:UInt32, offset:Int64, size:Int64, format:UInt32,ttype:UInt32, data:CPointer<Unit>):Unit
    { 
    let glClearBufferSubData=CFunc<( target:UInt32, internalformat:UInt32, offset:Int64, size:Int64, format:UInt32,ttype:UInt32, data:CPointer<Unit>)->Unit>(openglClearBufferSubData)
    unsafe{glClearBufferSubData( target, internalformat, offset, size, format,ttype, data)}
    }
    func ClearBufferfi( buffer:UInt32, drawbuffer:Int32, depth:Float32, stencil:Int32):Unit
    { 
    let glClearBufferfi=CFunc<( buffer:UInt32, drawbuffer:Int32, depth:Float32, stencil:Int32)->Unit>(openglClearBufferfi)
    unsafe{glClearBufferfi( buffer, drawbuffer, depth, stencil)}
    }
    func ClearBufferfv( buffer:UInt32, drawbuffer:Int32, value:CPointer<Float32>):Unit
    { 
    let glClearBufferfv=CFunc<( buffer:UInt32, drawbuffer:Int32, value:CPointer<Float32>)->Unit>(openglClearBufferfv)
    unsafe{glClearBufferfv( buffer, drawbuffer, value)}
    }
    func ClearBufferiv( buffer:UInt32, drawbuffer:Int32, value:CPointer<Int32>):Unit
    { 
    let glClearBufferiv=CFunc<( buffer:UInt32, drawbuffer:Int32, value:CPointer<Int32>)->Unit>(openglClearBufferiv)
    unsafe{glClearBufferiv( buffer, drawbuffer, value)}
    }
    func ClearBufferuiv( buffer:UInt32, drawbuffer:Int32, value:CPointer<UInt32>):Unit
    { 
    let glClearBufferuiv=CFunc<( buffer:UInt32, drawbuffer:Int32, value:CPointer<UInt32>)->Unit>(openglClearBufferuiv)
    unsafe{glClearBufferuiv( buffer, drawbuffer, value)}
    }
    func ClearColor( red:Float32, green:Float32, blue:Float32, alpha:Float32):Unit
    { 

    let glClearColor=CFunc<( red:Float32, green:Float32, blue:Float32, alpha:Float32)->Unit>(openglClearColor)

    unsafe{glClearColor( red, green, blue, alpha)}
    }
    func ClearDepth( depth:Float64):Unit
    { 
    let glClearDepth=CFunc<( depth:Float64)->Unit>(openglClearDepth)
    unsafe{glClearDepth( depth)}
    }
    func ClearDepthf( d:Float32):Unit
    { 
    let glClearDepthf=CFunc<( d:Float32)->Unit>(openglClearDepthf)
    unsafe{glClearDepthf( d)}
    }
    func ClearNamedBufferData( buffer:UInt32, internalformat:UInt32, format:UInt32,ttype:UInt32, data:CPointer<Unit>):Unit
    { 
    let glClearNamedBufferData=CFunc<( buffer:UInt32, internalformat:UInt32, format:UInt32,ttype:UInt32, data:CPointer<Unit>)->Unit>(openglClearNamedBufferData)
    unsafe{glClearNamedBufferData( buffer, internalformat, format,ttype, data)}
    }
    func ClearNamedBufferSubData( buffer:UInt32, internalformat:UInt32, offset:Int64, size:Int64, format:UInt32,ttype:UInt32, data:CPointer<Unit>):Unit
    { 
    let glClearNamedBufferSubData=CFunc<( buffer:UInt32, internalformat:UInt32, offset:Int64, size:Int64, format:UInt32,ttype:UInt32, data:CPointer<Unit>)->Unit>(openglClearNamedBufferSubData)
    unsafe{glClearNamedBufferSubData( buffer, internalformat, offset, size, format,ttype, data)}
    }
    func ClearNamedFramebufferfi( framebuffer:UInt32, buffer:UInt32, drawbuffer:Int32, depth:Float32, stencil:Int32):Unit
    { 
    let glClearNamedFramebufferfi=CFunc<( framebuffer:UInt32, buffer:UInt32, drawbuffer:Int32, depth:Float32, stencil:Int32)->Unit>(openglClearNamedFramebufferfi)
    unsafe{glClearNamedFramebufferfi( framebuffer, buffer, drawbuffer, depth, stencil)}
    }
    func ClearNamedFramebufferfv( framebuffer:UInt32, buffer:UInt32, drawbuffer:Int32, value:CPointer<Float32>):Unit
    { 
    let glClearNamedFramebufferfv=CFunc<( framebuffer:UInt32, buffer:UInt32, drawbuffer:Int32, value:CPointer<Float32>)->Unit>(openglClearNamedFramebufferfv)
    unsafe{glClearNamedFramebufferfv( framebuffer, buffer, drawbuffer, value)}
    }
    func ClearNamedFramebufferiv( framebuffer:UInt32, buffer:UInt32, drawbuffer:Int32, value:CPointer<Int32>):Unit
    { 
    let glClearNamedFramebufferiv=CFunc<( framebuffer:UInt32, buffer:UInt32, drawbuffer:Int32, value:CPointer<Int32>)->Unit>(openglClearNamedFramebufferiv)
    unsafe{glClearNamedFramebufferiv( framebuffer, buffer, drawbuffer, value)}
    }
    func ClearNamedFramebufferuiv( framebuffer:UInt32, buffer:UInt32, drawbuffer:Int32, value:CPointer<UInt32>):Unit
    { 
    let glClearNamedFramebufferuiv=CFunc<( framebuffer:UInt32, buffer:UInt32, drawbuffer:Int32, value:CPointer<UInt32>)->Unit>(openglClearNamedFramebufferuiv)
    unsafe{glClearNamedFramebufferuiv( framebuffer, buffer, drawbuffer, value)}
    }
    func ClearStencil( s:Int32):Unit
    { 
    let glClearStencil=CFunc<( s:Int32)->Unit>(openglClearStencil)
    unsafe{glClearStencil( s)}
    }
    func ClearTexImage( texture:UInt32, level:Int32, format:UInt32,ttype:UInt32, data:CPointer<Unit>):Unit
    { 
    let glClearTexImage=CFunc<( texture:UInt32, level:Int32, format:UInt32,ttype:UInt32, data:CPointer<Unit>)->Unit>(openglClearTexImage)
    unsafe{glClearTexImage( texture, level, format,ttype, data)}
    }
    func ClearTexSubImage( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, width:Int32, height:Int32, depth:Int32, format:UInt32,ttype:UInt32, data:CPointer<Unit>):Unit
    { 
    let glClearTexSubImage=CFunc<( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, width:Int32, height:Int32, depth:Int32, format:UInt32,ttype:UInt32, data:CPointer<Unit>)->Unit>(openglClearTexSubImage)
    unsafe{glClearTexSubImage( texture, level, xoffset, yoffset, zoffset, width, height, depth, format,ttype, data)}
    }
    func ClientWaitSync( sync:UIntNative, flags:UInt32, timeout:UInt64):UInt32
    { 
    let glClientWaitSync=CFunc<( sync:UIntNative, flags:UInt32, timeout:UInt64)->UInt32>(openglClientWaitSync)
    unsafe{glClientWaitSync( sync, flags, timeout)}
    }
    func ClipControl( origin:UInt32, depth:UInt32):Unit
    { 
    let glClipControl=CFunc<( origin:UInt32, depth:UInt32)->Unit>(openglClipControl)
    unsafe{glClipControl( origin, depth)}
    }
    func ColorMask( red:UInt8, green:UInt8, blue:UInt8, alpha:UInt8):Unit
    { 
    let glColorMask=CFunc<( red:UInt8, green:UInt8, blue:UInt8, alpha:UInt8)->Unit>(openglColorMask)
    unsafe{glColorMask( red, green, blue, alpha)}
    }
    func ColorMaski( index:UInt32, r:UInt8, g:UInt8, b:UInt8, a:UInt8):Unit
    { 
    let glColorMaski=CFunc<( index:UInt32, r:UInt8, g:UInt8, b:UInt8, a:UInt8)->Unit>(openglColorMaski)
    unsafe{glColorMaski( index, r, g, b, a)}
    }
    func CompileShader( shader:UInt32):Unit
    { 
    let glCompileShader=CFunc<( shader:UInt32)->Unit>(openglCompileShader)
    unsafe{glCompileShader( shader)}
    }
    func CompressedTexImage1D( target:UInt32, level:Int32, internalformat:UInt32, width:Int32, border:Int32, imageSize:Int32, data:CPointer<Unit>):Unit
    { 
    let glCompressedTexImage1D=CFunc<( target:UInt32, level:Int32, internalformat:UInt32, width:Int32, border:Int32, imageSize:Int32, data:CPointer<Unit>)->Unit>(openglCompressedTexImage1D)
    unsafe{glCompressedTexImage1D( target, level, internalformat, width, border, imageSize, data)}
    }
    func CompressedTexImage2D( target:UInt32, level:Int32, internalformat:UInt32, width:Int32, height:Int32, border:Int32, imageSize:Int32, data:CPointer<Unit>):Unit
    { 
    let glCompressedTexImage2D=CFunc<( target:UInt32, level:Int32, internalformat:UInt32, width:Int32, height:Int32, border:Int32, imageSize:Int32, data:CPointer<Unit>)->Unit>(openglCompressedTexImage2D)
    unsafe{glCompressedTexImage2D( target, level, internalformat, width, height, border, imageSize, data)}
    }
    func CompressedTexImage3D( target:UInt32, level:Int32, internalformat:UInt32, width:Int32, height:Int32, depth:Int32, border:Int32, imageSize:Int32, data:CPointer<Unit>):Unit
    { 
    let glCompressedTexImage3D=CFunc<( target:UInt32, level:Int32, internalformat:UInt32, width:Int32, height:Int32, depth:Int32, border:Int32, imageSize:Int32, data:CPointer<Unit>)->Unit>(openglCompressedTexImage3D)
    unsafe{glCompressedTexImage3D( target, level, internalformat, width, height, depth, border, imageSize, data)}
    }
    func CompressedTexSubImage1D( target:UInt32, level:Int32, xoffset:Int32, width:Int32, format:UInt32, imageSize:Int32, data:CPointer<Unit>):Unit
    { 
    let glCompressedTexSubImage1D=CFunc<( target:UInt32, level:Int32, xoffset:Int32, width:Int32, format:UInt32, imageSize:Int32, data:CPointer<Unit>)->Unit>(openglCompressedTexSubImage1D)
    unsafe{glCompressedTexSubImage1D( target, level, xoffset, width, format, imageSize, data)}
    }
    func CompressedTexSubImage2D( target:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, width:Int32, height:Int32, format:UInt32, imageSize:Int32, data:CPointer<Unit>):Unit
    { 
    let glCompressedTexSubImage2D=CFunc<( target:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, width:Int32, height:Int32, format:UInt32, imageSize:Int32, data:CPointer<Unit>)->Unit>(openglCompressedTexSubImage2D)
    unsafe{glCompressedTexSubImage2D( target, level, xoffset, yoffset, width, height, format, imageSize, data)}
    }
    func CompressedTexSubImage3D( target:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, width:Int32, height:Int32, depth:Int32, format:UInt32, imageSize:Int32, data:CPointer<Unit>):Unit
    { 
    let glCompressedTexSubImage3D=CFunc<( target:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, width:Int32, height:Int32, depth:Int32, format:UInt32, imageSize:Int32, data:CPointer<Unit>)->Unit>(openglCompressedTexSubImage3D)
    unsafe{glCompressedTexSubImage3D( target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data)}
    }
    func CompressedTextureSubImage1D( texture:UInt32, level:Int32, xoffset:Int32, width:Int32, format:UInt32, imageSize:Int32, data:CPointer<Unit>):Unit
    { 
    let glCompressedTextureSubImage1D=CFunc<( texture:UInt32, level:Int32, xoffset:Int32, width:Int32, format:UInt32, imageSize:Int32, data:CPointer<Unit>)->Unit>(openglCompressedTextureSubImage1D)
    unsafe{glCompressedTextureSubImage1D( texture, level, xoffset, width, format, imageSize, data)}
    }
    func CompressedTextureSubImage2D( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, width:Int32, height:Int32, format:UInt32, imageSize:Int32, data:CPointer<Unit>):Unit
    { 
    let glCompressedTextureSubImage2D=CFunc<( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, width:Int32, height:Int32, format:UInt32, imageSize:Int32, data:CPointer<Unit>)->Unit>(openglCompressedTextureSubImage2D)
    unsafe{glCompressedTextureSubImage2D( texture, level, xoffset, yoffset, width, height, format, imageSize, data)}
    }
    func CompressedTextureSubImage3D( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, width:Int32, height:Int32, depth:Int32, format:UInt32, imageSize:Int32, data:CPointer<Unit>):Unit
    { 
    let glCompressedTextureSubImage3D=CFunc<( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, width:Int32, height:Int32, depth:Int32, format:UInt32, imageSize:Int32, data:CPointer<Unit>)->Unit>(openglCompressedTextureSubImage3D)
    unsafe{glCompressedTextureSubImage3D( texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data)}
    }
    func CopyBufferSubData( readTarget:UInt32, writeTarget:UInt32, readOffset:Int64, writeOffset:Int64, size:Int64):Unit
    { 
    let glCopyBufferSubData=CFunc<( readTarget:UInt32, writeTarget:UInt32, readOffset:Int64, writeOffset:Int64, size:Int64)->Unit>(openglCopyBufferSubData)
    unsafe{glCopyBufferSubData( readTarget, writeTarget, readOffset, writeOffset, size)}
    }
    func CopyImageSubData( srcName:UInt32, srcTarget:UInt32, srcLevel:Int32, srcX:Int32, srcY:Int32, srcZ:Int32, dstName:UInt32, dstTarget:UInt32, dstLevel:Int32, dstX:Int32, dstY:Int32, dstZ:Int32, srcWidth:Int32, srcHeight:Int32, srcDepth:Int32):Unit
    { 
    let glCopyImageSubData=CFunc<( srcName:UInt32, srcTarget:UInt32, srcLevel:Int32, srcX:Int32, srcY:Int32, srcZ:Int32, dstName:UInt32, dstTarget:UInt32, dstLevel:Int32, dstX:Int32, dstY:Int32, dstZ:Int32, srcWidth:Int32, srcHeight:Int32, srcDepth:Int32)->Unit>(openglCopyImageSubData)
    unsafe{glCopyImageSubData( srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth)}
    }
    func CopyNamedBufferSubData( readBuffer:UInt32, writeBuffer:UInt32, readOffset:Int64, writeOffset:Int64, size:Int64):Unit
    { 
    let glCopyNamedBufferSubData=CFunc<( readBuffer:UInt32, writeBuffer:UInt32, readOffset:Int64, writeOffset:Int64, size:Int64)->Unit>(openglCopyNamedBufferSubData)
    unsafe{glCopyNamedBufferSubData( readBuffer, writeBuffer, readOffset, writeOffset, size)}
    }
    func CopyTexImage1D( target:UInt32, level:Int32, internalformat:UInt32, x:Int32, y:Int32, width:Int32, border:Int32):Unit
    { 
    let glCopyTexImage1D=CFunc<( target:UInt32, level:Int32, internalformat:UInt32, x:Int32, y:Int32, width:Int32, border:Int32)->Unit>(openglCopyTexImage1D)
    unsafe{glCopyTexImage1D( target, level, internalformat, x, y, width, border)}
    }
    func CopyTexImage2D( target:UInt32, level:Int32, internalformat:UInt32, x:Int32, y:Int32, width:Int32, height:Int32, border:Int32):Unit
    { 
    let glCopyTexImage2D=CFunc<( target:UInt32, level:Int32, internalformat:UInt32, x:Int32, y:Int32, width:Int32, height:Int32, border:Int32)->Unit>(openglCopyTexImage2D)
    unsafe{glCopyTexImage2D( target, level, internalformat, x, y, width, height, border)}
    }
    func CopyTexSubImage1D( target:UInt32, level:Int32, xoffset:Int32, x:Int32, y:Int32, width:Int32):Unit
    { 
    let glCopyTexSubImage1D=CFunc<( target:UInt32, level:Int32, xoffset:Int32, x:Int32, y:Int32, width:Int32)->Unit>(openglCopyTexSubImage1D)
    unsafe{glCopyTexSubImage1D( target, level, xoffset, x, y, width)}
    }
    func CopyTexSubImage2D( target:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, x:Int32, y:Int32, width:Int32, height:Int32):Unit
    { 
    let glCopyTexSubImage2D=CFunc<( target:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, x:Int32, y:Int32, width:Int32, height:Int32)->Unit>(openglCopyTexSubImage2D)
    unsafe{glCopyTexSubImage2D( target, level, xoffset, yoffset, x, y, width, height)}
    }
    func CopyTexSubImage3D( target:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, x:Int32, y:Int32, width:Int32, height:Int32):Unit
    { 
    let glCopyTexSubImage3D=CFunc<( target:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, x:Int32, y:Int32, width:Int32, height:Int32)->Unit>(openglCopyTexSubImage3D)
    unsafe{glCopyTexSubImage3D( target, level, xoffset, yoffset, zoffset, x, y, width, height)}
    }
    func CopyTextureSubImage1D( texture:UInt32, level:Int32, xoffset:Int32, x:Int32, y:Int32, width:Int32):Unit
    { 
    let glCopyTextureSubImage1D=CFunc<( texture:UInt32, level:Int32, xoffset:Int32, x:Int32, y:Int32, width:Int32)->Unit>(openglCopyTextureSubImage1D)
    unsafe{glCopyTextureSubImage1D( texture, level, xoffset, x, y, width)}
    }
    func CopyTextureSubImage2D( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, x:Int32, y:Int32, width:Int32, height:Int32):Unit
    { 
    let glCopyTextureSubImage2D=CFunc<( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, x:Int32, y:Int32, width:Int32, height:Int32)->Unit>(openglCopyTextureSubImage2D)
    unsafe{glCopyTextureSubImage2D( texture, level, xoffset, yoffset, x, y, width, height)}
    }
    func CopyTextureSubImage3D( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, x:Int32, y:Int32, width:Int32, height:Int32):Unit
    { 
    let glCopyTextureSubImage3D=CFunc<( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, x:Int32, y:Int32, width:Int32, height:Int32)->Unit>(openglCopyTextureSubImage3D)
    unsafe{glCopyTextureSubImage3D( texture, level, xoffset, yoffset, zoffset, x, y, width, height)}
    }
    func CreateBuffers( n:Int32, buffers:CPointer<UInt32>):Unit
    { 
    let glCreateBuffers=CFunc<( n:Int32, buffers:CPointer<UInt32>)->Unit>(openglCreateBuffers)
    unsafe{glCreateBuffers( n, buffers)}
    }
    func CreateFramebuffers( n:Int32, framebuffers:CPointer<UInt32>):Unit
    { 
    let glCreateFramebuffers=CFunc<( n:Int32, framebuffers:CPointer<UInt32>)->Unit>(openglCreateFramebuffers)
    unsafe{glCreateFramebuffers( n, framebuffers)}
    }
    func CreateProgram():UInt32
    {
    let glCreateProgram=CFunc<()->UInt32>(openglCreateProgram) 
    unsafe{glCreateProgram()}
    }
    func CreateProgramPipelines( n:Int32, pipelines:CPointer<UInt32>):Unit
    { 
    let glCreateProgramPipelines=CFunc<( n:Int32, pipelines:CPointer<UInt32>)->Unit>(openglCreateProgramPipelines)
    unsafe{glCreateProgramPipelines( n, pipelines)}
    }
    func CreateQueries( target:UInt32, n:Int32, ids:CPointer<UInt32>):Unit
    { 
    let glCreateQueries=CFunc<( target:UInt32, n:Int32, ids:CPointer<UInt32>)->Unit>(openglCreateQueries)
    unsafe{glCreateQueries( target, n, ids)}
    }
    func CreateRenderbuffers( n:Int32, renderbuffers:CPointer<UInt32>):Unit
    { 
    let glCreateRenderbuffers=CFunc<( n:Int32, renderbuffers:CPointer<UInt32>)->Unit>(openglCreateRenderbuffers)
    unsafe{glCreateRenderbuffers( n, renderbuffers)}
    }
    func CreateSamplers( n:Int32, samplers:CPointer<UInt32>):Unit
    { 
    let glCreateSamplers=CFunc<( n:Int32, samplers:CPointer<UInt32>)->Unit>(openglCreateSamplers)
    unsafe{glCreateSamplers( n, samplers)}
    }
    func CreateShader(ttype:UInt32):UInt32
    { 
    let glCreateShader=CFunc<(ttype:UInt32)->UInt32>(openglCreateShader)
    unsafe{glCreateShader(ttype)}
    }
    func CreateShaderProgramv(ttype:UInt32, count:Int32, strings:CPointer<UInt8>):UInt32
    { 
    let glCreateShaderProgramv=CFunc<(ttype:UInt32, count:Int32, strings:CPointer<UInt8>)->UInt32>(openglCreateShaderProgramv)
    unsafe{glCreateShaderProgramv(ttype, count, strings)}
    }
    func CreateTextures( target:UInt32, n:Int32, textures:CPointer<UInt32>):Unit
    { 
    let glCreateTextures=CFunc<( target:UInt32, n:Int32, textures:CPointer<UInt32>)->Unit>(openglCreateTextures)
    unsafe{glCreateTextures( target, n, textures)}
    }
    func CreateTransformFeedbacks( n:Int32, ids:CPointer<UInt32>):Unit
    { 
    let glCreateTransformFeedbacks=CFunc<( n:Int32, ids:CPointer<UInt32>)->Unit>(openglCreateTransformFeedbacks)
    unsafe{glCreateTransformFeedbacks( n, ids)}
    }
    func CreateVertexArrays( n:Int32, arrays:CPointer<UInt32>):Unit
    { 
    let glCreateVertexArrays=CFunc<( n:Int32, arrays:CPointer<UInt32>)->Unit>(openglCreateVertexArrays)
    unsafe{glCreateVertexArrays( n, arrays)}
    }
    func CullFace( mode:UInt32):Unit
    { 
    let glCullFace=CFunc<( mode:UInt32)->Unit>(openglCullFace)
    unsafe{glCullFace( mode)}
    }
    func DebugMessageCallback( callback:CFunc<(UInt32,UInt32,UInt32,UInt32,Int32,CString,CPointer<Unit>)->UInt>, userParam:CPointer<Unit>):Unit
    { 
    let glDebugMessageCallback=CFunc<( callback:CFunc<(UInt32,UInt32,UInt32,UInt32,Int32,CString,CPointer<Unit>)->UInt>, userParam:CPointer<Unit>)->Unit>(openglDebugMessageCallback)
    unsafe{glDebugMessageCallback( callback, userParam)}
    }
    func DebugMessageControl( source:UInt32,ttype:UInt32, severity:UInt32, count:Int32, ids:CPointer<UInt32>, enabled:UInt8):Unit
    { 
    let glDebugMessageControl=CFunc<( source:UInt32,ttype:UInt32, severity:UInt32, count:Int32, ids:CPointer<UInt32>, enabled:UInt8)->Unit>(openglDebugMessageControl)
    unsafe{glDebugMessageControl( source,ttype, severity, count, ids, enabled)}
    }
    func DebugMessageInsert( source:UInt32,ttype:UInt32, id:UInt32, severity:UInt32, length:Int32, buf:CString):Unit
    { 
    let glDebugMessageInsert=CFunc<( source:UInt32,ttype:UInt32, id:UInt32, severity:UInt32, length:Int32, buf:CString)->Unit>(openglDebugMessageInsert)
    unsafe{glDebugMessageInsert( source,ttype, id, severity, length, buf)}
    }
    func DeleteBuffers( n:Int32, buffers:CPointer<UInt32>):Unit
    { 
    let glDeleteBuffers=CFunc<( n:Int32, buffers:CPointer<UInt32>)->Unit>(openglDeleteBuffers)
    unsafe{glDeleteBuffers( n, buffers)}
    }
    func DeleteFramebuffers( n:Int32, framebuffers:CPointer<UInt32>):Unit
    { 
    let glDeleteFramebuffers=CFunc<( n:Int32, framebuffers:CPointer<UInt32>)->Unit>(openglDeleteFramebuffers)
    unsafe{glDeleteFramebuffers( n, framebuffers)}
    }
    func DeleteProgram( program:UInt32):Unit
    { 
    let glDeleteProgram=CFunc<( program:UInt32)->Unit>(openglDeleteProgram)
    unsafe{glDeleteProgram( program)}
    }
    func DeleteProgramPipelines( n:Int32, pipelines:CPointer<UInt32>):Unit
    { 
    let glDeleteProgramPipelines=CFunc<( n:Int32, pipelines:CPointer<UInt32>)->Unit>(openglDeleteProgramPipelines)
    unsafe{glDeleteProgramPipelines( n, pipelines)}
    }
    func DeleteQueries( n:Int32, ids:CPointer<UInt32>):Unit
    { 
    let glDeleteQueries=CFunc<( n:Int32, ids:CPointer<UInt32>)->Unit>(openglDeleteQueries)
    unsafe{glDeleteQueries( n, ids)}
    }
    func DeleteRenderbuffers( n:Int32, renderbuffers:CPointer<UInt32>):Unit
    { 
    let glDeleteRenderbuffers=CFunc<( n:Int32, renderbuffers:CPointer<UInt32>)->Unit>(openglDeleteRenderbuffers)
    unsafe{glDeleteRenderbuffers( n, renderbuffers)}
    }
    func DeleteSamplers( count:Int32, samplers:CPointer<UInt32>):Unit
    { 
    let glDeleteSamplers=CFunc<( count:Int32, samplers:CPointer<UInt32>)->Unit>(openglDeleteSamplers)
    unsafe{glDeleteSamplers( count, samplers)}
    }
    func DeleteShader( shader:UInt32):Unit
    { 
    let glDeleteShader=CFunc<( shader:UInt32)->Unit>(openglDeleteShader)
    unsafe{glDeleteShader( shader)}
    }
    func DeleteSync( sync:UIntNative):Unit
    { 
    let glDeleteSync=CFunc<( sync:UIntNative)->Unit>(openglDeleteSync)
    unsafe{glDeleteSync( sync)}
    }
    func DeleteTextures( n:Int32, textures:CPointer<UInt32>):Unit
    { 
    let glDeleteTextures=CFunc<( n:Int32, textures:CPointer<UInt32>)->Unit>(openglDeleteTextures)
    unsafe{glDeleteTextures( n, textures)}
    }
    func DeleteTransformFeedbacks( n:Int32, ids:CPointer<UInt32>):Unit
    { 
    let glDeleteTransformFeedbacks=CFunc<( n:Int32, ids:CPointer<UInt32>)->Unit>(openglDeleteTransformFeedbacks)
    unsafe{glDeleteTransformFeedbacks( n, ids)}
    }
    func DeleteVertexArrays( n:Int32, arrays:CPointer<UInt32>):Unit
    { 
    let glDeleteVertexArrays=CFunc<( n:Int32, arrays:CPointer<UInt32>)->Unit>(openglDeleteVertexArrays)
    unsafe{glDeleteVertexArrays( n, arrays)}
    }
    func DepthFunc(ffunc:UInt32):Unit
    { 
    let glDepthFunc=CFunc<( ffunc:UInt32)->Unit>(openglDepthFunc)
    unsafe{glDepthFunc( ffunc)}
    }
    func DepthMask( flag:UInt8):Unit
    { 
    let glDepthMask=CFunc<( flag:UInt8)->Unit>(openglDepthMask)
    unsafe{glDepthMask( flag)}
    }
    func DepthRange( n:Float64, f:Float64):Unit
    { 
    let glDepthRange=CFunc<( n:Float64, f:Float64)->Unit>(openglDepthRange)
    unsafe{glDepthRange( n, f)}
    }
    func DepthRangeArrayv( first:UInt32, count:Int32, v:CPointer<Float64>):Unit
    { 
    let glDepthRangeArrayv=CFunc<( first:UInt32, count:Int32, v:CPointer<Float64>)->Unit>(openglDepthRangeArrayv)
    unsafe{glDepthRangeArrayv( first, count, v)}
    }
    func DepthRangeIndexed( index:UInt32, n:Float64, f:Float64):Unit
    { 
    let glDepthRangeIndexed=CFunc<( index:UInt32, n:Float64, f:Float64)->Unit>(openglDepthRangeIndexed)
    unsafe{glDepthRangeIndexed( index, n, f)}
    }
    func DepthRangef( n:Float32, f:Float32):Unit
    { 
    let glDepthRangef=CFunc<( n:Float32, f:Float32)->Unit>(openglDepthRangef)
    unsafe{glDepthRangef( n, f)}
    }
    func DetachShader( program:UInt32, shader:UInt32):Unit
    { 
    let glDetachShader=CFunc<( program:UInt32, shader:UInt32)->Unit>(openglDetachShader)
    unsafe{glDetachShader( program, shader)}
    }
    func Disable( cap:UInt32):Unit
    { 
    let glDisable=CFunc<( cap:UInt32)->Unit>(openglDisable)
    unsafe{glDisable( cap)}
    }
    func DisableVertexArrayAttrib( vaobj:UInt32, index:UInt32):Unit
    { 
    let glDisableVertexArrayAttrib=CFunc<( vaobj:UInt32, index:UInt32)->Unit>(openglDisableVertexArrayAttrib)
    unsafe{glDisableVertexArrayAttrib( vaobj, index)}
    }
    func DisableVertexAttribArray( index:UInt32):Unit
    { 
    let glDisableVertexAttribArray=CFunc<( index:UInt32)->Unit>(openglDisableVertexAttribArray)
    unsafe{glDisableVertexAttribArray( index)}
    }
    func Disablei( target:UInt32, index:UInt32):Unit
    { 
    let glDisablei=CFunc<( target:UInt32, index:UInt32)->Unit>(openglDisablei)
    unsafe{glDisablei( target, index)}
    }
    func DispatchCompute( num_groups_x:UInt32, num_groups_y:UInt32, num_groups_z:UInt32):Unit
    { 
    let glDispatchCompute=CFunc<( num_groups_x:UInt32, num_groups_y:UInt32, num_groups_z:UInt32)->Unit>(openglDispatchCompute)
    unsafe{glDispatchCompute( num_groups_x, num_groups_y, num_groups_z)}
    }
    func DispatchComputeIndirect( indirect:Int64):Unit
    { 
    let glDispatchComputeIndirect=CFunc<( indirect:Int64)->Unit>(openglDispatchComputeIndirect)
    unsafe{glDispatchComputeIndirect( indirect)}
    }
    func DrawArrays( mode:UInt32, first:Int32, count:Int32):Unit
    { 
    let glDrawArrays=CFunc<( mode:UInt32, first:Int32, count:Int32)->Unit>(openglDrawArrays)
    unsafe{glDrawArrays( mode, first, count)}
    }
    func DrawArraysIndirect( mode:UInt32, indirect:CPointer<Unit>):Unit
    { 
    let glDrawArraysIndirect=CFunc<( mode:UInt32, indirect:CPointer<Unit>)->Unit>(openglDrawArraysIndirect)
    unsafe{glDrawArraysIndirect( mode, indirect)}
    }
    func DrawArraysInstanced( mode:UInt32, first:Int32, count:Int32, instancecount:Int32):Unit
    { 
    let glDrawArraysInstanced=CFunc<( mode:UInt32, first:Int32, count:Int32, instancecount:Int32)->Unit>(openglDrawArraysInstanced)
    unsafe{glDrawArraysInstanced( mode, first, count, instancecount)}
    }
    func DrawArraysInstancedBaseInstance( mode:UInt32, first:Int32, count:Int32, instancecount:Int32, baseinstance:UInt32):Unit
    { 
    let glDrawArraysInstancedBaseInstance=CFunc<( mode:UInt32, first:Int32, count:Int32, instancecount:Int32, baseinstance:UInt32)->Unit>(openglDrawArraysInstancedBaseInstance)
    unsafe{glDrawArraysInstancedBaseInstance( mode, first, count, instancecount, baseinstance)}
    }
    func DrawBuffer( buf:UInt32):Unit
    { 
    let glDrawBuffer=CFunc<( buf:UInt32)->Unit>(openglDrawBuffer)
    unsafe{glDrawBuffer( buf)}
    }
    func DrawBuffers( n:Int32, bufs:CPointer<UInt32>):Unit
    { 
    let glDrawBuffers=CFunc<( n:Int32, bufs:CPointer<UInt32>)->Unit>(openglDrawBuffers)
    unsafe{glDrawBuffers( n, bufs)}
    }
    func DrawElements( mode:UInt32, count:Int32,ttype:UInt32, indices:CPointer<Unit>):Unit
    { 
    let glDrawElements=CFunc<( mode:UInt32, count:Int32,ttype:UInt32, indices:CPointer<Unit>)->Unit>(openglDrawElements)
    unsafe{glDrawElements( mode, count,ttype, indices)}
    }
    func DrawElementsBaseVertex( mode:UInt32, count:Int32,ttype:UInt32, indices:CPointer<Unit>, basevertex:Int32):Unit
    { 
    let glDrawElementsBaseVertex=CFunc<( mode:UInt32, count:Int32,ttype:UInt32, indices:CPointer<Unit>, basevertex:Int32)->Unit>(openglDrawElementsBaseVertex)
    unsafe{glDrawElementsBaseVertex( mode, count,ttype, indices, basevertex)}
    }
    func DrawElementsIndirect( mode:UInt32,ttype:UInt32, indirect:CPointer<Unit>):Unit
    { 
    let glDrawElementsIndirect=CFunc<( mode:UInt32,ttype:UInt32, indirect:CPointer<Unit>)->Unit>(openglDrawElementsIndirect)
    unsafe{glDrawElementsIndirect( mode,ttype, indirect)}
    }
    func DrawElementsInstanced( mode:UInt32, count:Int32,ttype:UInt32, indices:CPointer<Unit>, instancecount:Int32):Unit
    { 
    let glDrawElementsInstanced=CFunc<( mode:UInt32, count:Int32,ttype:UInt32, indices:CPointer<Unit>, instancecount:Int32)->Unit>(openglDrawElementsInstanced)
    unsafe{glDrawElementsInstanced( mode, count,ttype, indices, instancecount)}
    }
    func DrawElementsInstancedBaseInstance( mode:UInt32, count:Int32,ttype:UInt32, indices:CPointer<Unit>, instancecount:Int32, baseinstance:UInt32):Unit
    { 
    let glDrawElementsInstancedBaseInstance=CFunc<( mode:UInt32, count:Int32,ttype:UInt32, indices:CPointer<Unit>, instancecount:Int32, baseinstance:UInt32)->Unit>(openglDrawElementsInstancedBaseInstance)
    unsafe{glDrawElementsInstancedBaseInstance( mode, count,ttype, indices, instancecount, baseinstance)}
    }
    func DrawElementsInstancedBaseVertex( mode:UInt32, count:Int32,ttype:UInt32, indices:CPointer<Unit>, instancecount:Int32, basevertex:Int32):Unit
    { 
    let glDrawElementsInstancedBaseVertex=CFunc<( mode:UInt32, count:Int32,ttype:UInt32, indices:CPointer<Unit>, instancecount:Int32, basevertex:Int32)->Unit>(openglDrawElementsInstancedBaseVertex)
    unsafe{glDrawElementsInstancedBaseVertex( mode, count,ttype, indices, instancecount, basevertex)}
    }
    func DrawElementsInstancedBaseVertexBaseInstance( mode:UInt32, count:Int32,ttype:UInt32, indices:CPointer<Unit>, instancecount:Int32, basevertex:Int32, baseinstance:UInt32):Unit
    { 
    let glDrawElementsInstancedBaseVertexBaseInstance=CFunc<( mode:UInt32, count:Int32,ttype:UInt32, indices:CPointer<Unit>, instancecount:Int32, basevertex:Int32, baseinstance:UInt32)->Unit>(openglDrawElementsInstancedBaseVertexBaseInstance)
    unsafe{glDrawElementsInstancedBaseVertexBaseInstance( mode, count,ttype, indices, instancecount, basevertex, baseinstance)}
    }
    func DrawRangeElements( mode:UInt32, start:UInt32, end:UInt32, count:Int32,ttype:UInt32, indices:CPointer<Unit>):Unit
    { 
    let glDrawRangeElements=CFunc<( mode:UInt32, start:UInt32, end:UInt32, count:Int32,ttype:UInt32, indices:CPointer<Unit>)->Unit>(openglDrawRangeElements)
    unsafe{glDrawRangeElements( mode, start, end, count,ttype, indices)}
    }
    func DrawRangeElementsBaseVertex( mode:UInt32, start:UInt32, end:UInt32, count:Int32,ttype:UInt32, indices:CPointer<Unit>, basevertex:Int32):Unit
    { 
    let glDrawRangeElementsBaseVertex=CFunc<( mode:UInt32, start:UInt32, end:UInt32, count:Int32,ttype:UInt32, indices:CPointer<Unit>, basevertex:Int32)->Unit>(openglDrawRangeElementsBaseVertex)
    unsafe{glDrawRangeElementsBaseVertex( mode, start, end, count,ttype, indices, basevertex)}
    }
    func DrawTransformFeedback( mode:UInt32, id:UInt32):Unit
    { 
    let glDrawTransformFeedback=CFunc<( mode:UInt32, id:UInt32)->Unit>(openglDrawTransformFeedback)
    unsafe{glDrawTransformFeedback( mode, id)}
    }
    func DrawTransformFeedbackInstanced( mode:UInt32, id:UInt32, instancecount:Int32):Unit
    { 
    let glDrawTransformFeedbackInstanced=CFunc<( mode:UInt32, id:UInt32, instancecount:Int32)->Unit>(openglDrawTransformFeedbackInstanced)
    unsafe{glDrawTransformFeedbackInstanced( mode, id, instancecount)}
    }
    func DrawTransformFeedbackStream( mode:UInt32, id:UInt32, stream:UInt32):Unit
    { 
    let glDrawTransformFeedbackStream=CFunc<( mode:UInt32, id:UInt32, stream:UInt32)->Unit>(openglDrawTransformFeedbackStream)
    unsafe{glDrawTransformFeedbackStream( mode, id, stream)}
    }
    func DrawTransformFeedbackStreamInstanced( mode:UInt32, id:UInt32, stream:UInt32, instancecount:Int32):Unit
    { 
    let glDrawTransformFeedbackStreamInstanced=CFunc<( mode:UInt32, id:UInt32, stream:UInt32, instancecount:Int32)->Unit>(openglDrawTransformFeedbackStreamInstanced)
    unsafe{glDrawTransformFeedbackStreamInstanced( mode, id, stream, instancecount)}
    }
    func Enable( cap:UInt32):Unit
    { 
    let glEnable=CFunc<( cap:UInt32)->Unit>(openglEnable)
    unsafe{glEnable( cap)}
    }
    func EnableVertexArrayAttrib( vaobj:UInt32, index:UInt32):Unit
    { 
    let glEnableVertexArrayAttrib=CFunc<( vaobj:UInt32, index:UInt32)->Unit>(openglEnableVertexArrayAttrib)
    unsafe{glEnableVertexArrayAttrib( vaobj, index)}
    }
    func EnableVertexAttribArray( index:UInt32):Unit
    { 
    let glEnableVertexAttribArray=CFunc<( index:UInt32)->Unit>(openglEnableVertexAttribArray)
    unsafe{glEnableVertexAttribArray( index)}
    }
    func Enablei( target:UInt32, index:UInt32):Unit
    { 
    let glEnablei=CFunc<( target:UInt32, index:UInt32)->Unit>(openglEnablei)
    unsafe{glEnablei( target, index)}
    }
    func EndConditionalRender():Unit
    {
    let glEndConditionalRender=CFunc<()->Unit>(openglEndConditionalRender) 
    unsafe{glEndConditionalRender()}
    }
    func EndQuery( target:UInt32):Unit
    { 
    let glEndQuery=CFunc<( target:UInt32)->Unit>(openglEndQuery)
    unsafe{glEndQuery( target)}
    }
    func EndQueryIndexed( target:UInt32, index:UInt32):Unit
    { 
    let glEndQueryIndexed=CFunc<( target:UInt32, index:UInt32)->Unit>(openglEndQueryIndexed)
    unsafe{glEndQueryIndexed( target, index)}
    }
    func EndTransformFeedback():Unit
    {
    let glEndTransformFeedback=CFunc<()->Unit>(openglEndTransformFeedback) 
    unsafe{glEndTransformFeedback()}
    }
    func FenceSync( condition:UInt32, flags:UInt32):UIntNative
    { 
    let glFenceSync=CFunc<( condition:UInt32, flags:UInt32)->UIntNative>(openglFenceSync)
    unsafe{glFenceSync( condition, flags)}
    }
    func Finish():Unit
    {
    let glFinish=CFunc<()->Unit>(openglFinish) 
    unsafe{glFinish()}
    }
    func Flush():Unit
    {
    let glFlush=CFunc<()->Unit>(openglFlush) 
    unsafe{glFlush()}
    }
    func FlushMappedBufferRange( target:UInt32, offset:Int64, length:Int64):Unit
    { 
    let glFlushMappedBufferRange=CFunc<( target:UInt32, offset:Int64, length:Int64)->Unit>(openglFlushMappedBufferRange)
    unsafe{glFlushMappedBufferRange( target, offset, length)}
    }
    func FlushMappedNamedBufferRange( buffer:UInt32, offset:Int64, length:Int64):Unit
    { 
    let glFlushMappedNamedBufferRange=CFunc<( buffer:UInt32, offset:Int64, length:Int64)->Unit>(openglFlushMappedNamedBufferRange)
    unsafe{glFlushMappedNamedBufferRange( buffer, offset, length)}
    }
    func FramebufferParameteri( target:UInt32, pname:UInt32, param:Int32):Unit
    { 
    let glFramebufferParameteri=CFunc<( target:UInt32, pname:UInt32, param:Int32)->Unit>(openglFramebufferParameteri)
    unsafe{glFramebufferParameteri( target, pname, param)}
    }
    func FramebufferRenderbuffer( target:UInt32, attachment:UInt32, renderbuffertarget:UInt32, renderbuffer:UInt32):Unit
    { 
    let glFramebufferRenderbuffer=CFunc<( target:UInt32, attachment:UInt32, renderbuffertarget:UInt32, renderbuffer:UInt32)->Unit>(openglFramebufferRenderbuffer)
    unsafe{glFramebufferRenderbuffer( target, attachment, renderbuffertarget, renderbuffer)}
    }
    func FramebufferTexture( target:UInt32, attachment:UInt32, texture:UInt32, level:Int32):Unit
    { 
    let glFramebufferTexture=CFunc<( target:UInt32, attachment:UInt32, texture:UInt32, level:Int32)->Unit>(openglFramebufferTexture)
    unsafe{glFramebufferTexture( target, attachment, texture, level)}
    }
    func FramebufferTexture1D( target:UInt32, attachment:UInt32, textarget:UInt32, texture:UInt32, level:Int32):Unit
    { 
    let glFramebufferTexture1D=CFunc<( target:UInt32, attachment:UInt32, textarget:UInt32, texture:UInt32, level:Int32)->Unit>(openglFramebufferTexture1D)
    unsafe{glFramebufferTexture1D( target, attachment, textarget, texture, level)}
    }
    func FramebufferTexture2D( target:UInt32, attachment:UInt32, textarget:UInt32, texture:UInt32, level:Int32):Unit
    { 
    let glFramebufferTexture2D=CFunc<( target:UInt32, attachment:UInt32, textarget:UInt32, texture:UInt32, level:Int32)->Unit>(openglFramebufferTexture2D)
    unsafe{glFramebufferTexture2D( target, attachment, textarget, texture, level)}
    }
    func FramebufferTexture3D( target:UInt32, attachment:UInt32, textarget:UInt32, texture:UInt32, level:Int32, zoffset:Int32):Unit
    { 
    let glFramebufferTexture3D=CFunc<( target:UInt32, attachment:UInt32, textarget:UInt32, texture:UInt32, level:Int32, zoffset:Int32)->Unit>(openglFramebufferTexture3D)
    unsafe{glFramebufferTexture3D( target, attachment, textarget, texture, level, zoffset)}
    }
    func FramebufferTextureLayer( target:UInt32, attachment:UInt32, texture:UInt32, level:Int32, layer:Int32):Unit
    { 
    let glFramebufferTextureLayer=CFunc<( target:UInt32, attachment:UInt32, texture:UInt32, level:Int32, layer:Int32)->Unit>(openglFramebufferTextureLayer)
    unsafe{glFramebufferTextureLayer( target, attachment, texture, level, layer)}
    }
    func FrontFace( mode:UInt32):Unit
    { 
    let glFrontFace=CFunc<( mode:UInt32)->Unit>(openglFrontFace)
    unsafe{glFrontFace( mode)}
    }
    func GenBuffers( n:Int32, buffers:CPointer<UInt32>):Unit
    { 
    let glGenBuffers=CFunc<( n:Int32, buffers:CPointer<UInt32>)->Unit>(openglGenBuffers)
    unsafe{glGenBuffers( n, buffers)}
    }
    func GenFramebuffers( n:Int32, framebuffers:CPointer<UInt32>):Unit
    { 
    let glGenFramebuffers=CFunc<( n:Int32, framebuffers:CPointer<UInt32>)->Unit>(openglGenFramebuffers)
    unsafe{glGenFramebuffers( n, framebuffers)}
    }
    func GenProgramPipelines( n:Int32, pipelines:CPointer<UInt32>):Unit
    { 
    let glGenProgramPipelines=CFunc<( n:Int32, pipelines:CPointer<UInt32>)->Unit>(openglGenProgramPipelines)
    unsafe{glGenProgramPipelines( n, pipelines)}
    }
    func GenQueries( n:Int32, ids:CPointer<UInt32>):Unit
    { 
    let glGenQueries=CFunc<( n:Int32, ids:CPointer<UInt32>)->Unit>(openglGenQueries)
    unsafe{glGenQueries( n, ids)}
    }
    func GenRenderbuffers( n:Int32, renderbuffers:CPointer<UInt32>):Unit
    { 
    let glGenRenderbuffers=CFunc<( n:Int32, renderbuffers:CPointer<UInt32>)->Unit>(openglGenRenderbuffers)
    unsafe{glGenRenderbuffers( n, renderbuffers)}
    }
    func GenSamplers( count:Int32, samplers:CPointer<UInt32>):Unit
    { 
    let glGenSamplers=CFunc<( count:Int32, samplers:CPointer<UInt32>)->Unit>(openglGenSamplers)
    unsafe{glGenSamplers( count, samplers)}
    }
    func GenTextures( n:Int32, textures:CPointer<UInt32>):Unit
    { 
    let glGenTextures=CFunc<( n:Int32, textures:CPointer<UInt32>)->Unit>(openglGenTextures)
    unsafe{glGenTextures( n, textures)}
    }
    func GenTransformFeedbacks( n:Int32, ids:CPointer<UInt32>):Unit
    { 
    let glGenTransformFeedbacks=CFunc<( n:Int32, ids:CPointer<UInt32>)->Unit>(openglGenTransformFeedbacks)
    unsafe{glGenTransformFeedbacks( n, ids)}
    }
    func GenVertexArrays( n:Int32, arrays:CPointer<UInt32>):Unit
    { 
    let glGenVertexArrays=CFunc<( n:Int32, arrays:CPointer<UInt32>)->Unit>(openglGenVertexArrays)
    unsafe{glGenVertexArrays( n, arrays)}
    }
    func GenerateMipmap( target:UInt32):Unit
    { 
    let glGenerateMipmap=CFunc<( target:UInt32)->Unit>(openglGenerateMipmap)
    unsafe{glGenerateMipmap( target)}
    }
    func GenerateTextureMipmap( texture:UInt32):Unit
    { 
    let glGenerateTextureMipmap=CFunc<( texture:UInt32)->Unit>(openglGenerateTextureMipmap)
    unsafe{glGenerateTextureMipmap( texture)}
    }
    func GetActiveAtomicCounterBufferiv( program:UInt32, bufferIndex:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetActiveAtomicCounterBufferiv=CFunc<( program:UInt32, bufferIndex:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetActiveAtomicCounterBufferiv)
    unsafe{glGetActiveAtomicCounterBufferiv( program, bufferIndex, pname, params)}
    }
    func GetActiveAttrib( program:UInt32, index:UInt32, bufSize:Int32, length:CPointer<Int32>, size:CPointer<Int32>,ttype:CPointer<UInt32>, name:CPointer<UInt8>):Unit
    { 
    let glGetActiveAttrib=CFunc<( program:UInt32, index:UInt32, bufSize:Int32, length:CPointer<Int32>, size:CPointer<Int32>,ttype:CPointer<UInt32>, name:CPointer<UInt8>)->Unit>(openglGetActiveAttrib)
    unsafe{glGetActiveAttrib( program, index, bufSize, length, size,ttype, name)}
    }
    func GetActiveSubroutineName( program:UInt32, shadertype:UInt32, index:UInt32, bufSize:Int32, length:CPointer<Int32>, name:CPointer<UInt8>):Unit
    { 
    let glGetActiveSubroutineName=CFunc<( program:UInt32, shadertype:UInt32, index:UInt32, bufSize:Int32, length:CPointer<Int32>, name:CPointer<UInt8>)->Unit>(openglGetActiveSubroutineName)
    unsafe{glGetActiveSubroutineName( program, shadertype, index, bufSize, length, name)}
    }
    func GetActiveSubroutineUniformName( program:UInt32, shadertype:UInt32, index:UInt32, bufSize:Int32, length:CPointer<Int32>, name:CPointer<UInt8>):Unit
    { 
    let glGetActiveSubroutineUniformName=CFunc<( program:UInt32, shadertype:UInt32, index:UInt32, bufSize:Int32, length:CPointer<Int32>, name:CPointer<UInt8>)->Unit>(openglGetActiveSubroutineUniformName)
    unsafe{glGetActiveSubroutineUniformName( program, shadertype, index, bufSize, length, name)}
    }
    func GetActiveSubroutineUniformiv( program:UInt32, shadertype:UInt32, index:UInt32, pname:UInt32, values:CPointer<Int32>):Unit
    { 
    let glGetActiveSubroutineUniformiv=CFunc<( program:UInt32, shadertype:UInt32, index:UInt32, pname:UInt32, values:CPointer<Int32>)->Unit>(openglGetActiveSubroutineUniformiv)
    unsafe{glGetActiveSubroutineUniformiv( program, shadertype, index, pname, values)}
    }
    func GetActiveUniform( program:UInt32, index:UInt32, bufSize:Int32, length:CPointer<Int32>, size:CPointer<Int32>,ttype:CPointer<UInt32>, name:CPointer<UInt8>):Unit
    { 
    let glGetActiveUniform=CFunc<( program:UInt32, index:UInt32, bufSize:Int32, length:CPointer<Int32>, size:CPointer<Int32>,ttype:CPointer<UInt32>, name:CPointer<UInt8>)->Unit>(openglGetActiveUniform)
    unsafe{glGetActiveUniform( program, index, bufSize, length, size,ttype, name)}
    }
    func GetActiveUniformBlockName( program:UInt32, uniformBlockIndex:UInt32, bufSize:Int32, length:CPointer<Int32>, uniformBlockName:CPointer<UInt8>):Unit
    { 
    let glGetActiveUniformBlockName=CFunc<( program:UInt32, uniformBlockIndex:UInt32, bufSize:Int32, length:CPointer<Int32>, uniformBlockName:CPointer<UInt8>)->Unit>(openglGetActiveUniformBlockName)
    unsafe{glGetActiveUniformBlockName( program, uniformBlockIndex, bufSize, length, uniformBlockName)}
    }
    func GetActiveUniformBlockiv( program:UInt32, uniformBlockIndex:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetActiveUniformBlockiv=CFunc<( program:UInt32, uniformBlockIndex:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetActiveUniformBlockiv)
    unsafe{glGetActiveUniformBlockiv( program, uniformBlockIndex, pname, params)}
    }
    func GetActiveUniformName( program:UInt32, uniformIndex:UInt32, bufSize:Int32, length:CPointer<Int32>, uniformName:CPointer<UInt8>):Unit
    { 
    let glGetActiveUniformName=CFunc<( program:UInt32, uniformIndex:UInt32, bufSize:Int32, length:CPointer<Int32>, uniformName:CPointer<UInt8>)->Unit>(openglGetActiveUniformName)
    unsafe{glGetActiveUniformName( program, uniformIndex, bufSize, length, uniformName)}
    }
    func GetActiveUniformsiv( program:UInt32, uniformCount:Int32, uniformIndices:CPointer<UInt32>, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetActiveUniformsiv=CFunc<( program:UInt32, uniformCount:Int32, uniformIndices:CPointer<UInt32>, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetActiveUniformsiv)
    unsafe{glGetActiveUniformsiv( program, uniformCount, uniformIndices, pname, params)}
    }
    func GetAttachedShaders( program:UInt32, maxCount:Int32, count:CPointer<Int32>, shaders:CPointer<UInt32>):Unit
    { 
    let glGetAttachedShaders=CFunc<( program:UInt32, maxCount:Int32, count:CPointer<Int32>, shaders:CPointer<UInt32>)->Unit>(openglGetAttachedShaders)
    unsafe{glGetAttachedShaders( program, maxCount, count, shaders)}
    }
    func GetAttribLocation( program:UInt32, name:CString):Int32
    { 
    let glGetAttribLocation=CFunc<( program:UInt32, name:CString)->Int32>(openglGetAttribLocation)
    unsafe{glGetAttribLocation( program, name)}
    }
    func GetBooleani_v( target:UInt32, index:UInt32, data:CPointer<UInt8>):Unit
    { 
    let glGetBooleani_v=CFunc<( target:UInt32, index:UInt32, data:CPointer<UInt8>)->Unit>(openglGetBooleani_v)
    unsafe{glGetBooleani_v( target, index, data)}
    }
    func GetBooleanv( pname:UInt32, data:CPointer<UInt8>):Unit
    { 
    let glGetBooleanv=CFunc<( pname:UInt32, data:CPointer<UInt8>)->Unit>(openglGetBooleanv)
    unsafe{glGetBooleanv( pname, data)}
    }
    func GetBufferParameteri64v( target:UInt32, pname:UInt32, params:CPointer<Int64>):Unit
    { 
    let glGetBufferParameteri64v=CFunc<( target:UInt32, pname:UInt32, params:CPointer<Int64>)->Unit>(openglGetBufferParameteri64v)
    unsafe{glGetBufferParameteri64v( target, pname, params)}
    }
    func GetBufferParameteriv( target:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetBufferParameteriv=CFunc<( target:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetBufferParameteriv)
    unsafe{glGetBufferParameteriv( target, pname, params)}
    }
    func GetBufferPointerv( target:UInt32, pname:UInt32, params:CPointer<Unit>):Unit
    { 
    let glGetBufferPointerv=CFunc<( target:UInt32, pname:UInt32, params:CPointer<Unit>)->Unit>(openglGetBufferPointerv)
    unsafe{glGetBufferPointerv( target, pname, params)}
    }
    func GetBufferSubData( target:UInt32, offset:Int64, size:Int64, data:CPointer<Unit>):Unit
    { 
    let glGetBufferSubData=CFunc<( target:UInt32, offset:Int64, size:Int64, data:CPointer<Unit>)->Unit>(openglGetBufferSubData)
    unsafe{glGetBufferSubData( target, offset, size, data)}
    }
    func GetCompressedTexImage( target:UInt32, level:Int32, img:CPointer<Unit>):Unit
    { 
    let glGetCompressedTexImage=CFunc<( target:UInt32, level:Int32, img:CPointer<Unit>)->Unit>(openglGetCompressedTexImage)
    unsafe{glGetCompressedTexImage( target, level, img)}
    }
    func GetCompressedTextureImage( texture:UInt32, level:Int32, bufSize:Int32, pixels:CPointer<Unit>):Unit
    { 
    let glGetCompressedTextureImage=CFunc<( texture:UInt32, level:Int32, bufSize:Int32, pixels:CPointer<Unit>)->Unit>(openglGetCompressedTextureImage)
    unsafe{glGetCompressedTextureImage( texture, level, bufSize, pixels)}
    }
    func GetCompressedTextureSubImage( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, width:Int32, height:Int32, depth:Int32, bufSize:Int32, pixels:CPointer<Unit>):Unit
    { 
    let glGetCompressedTextureSubImage=CFunc<( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, width:Int32, height:Int32, depth:Int32, bufSize:Int32, pixels:CPointer<Unit>)->Unit>(openglGetCompressedTextureSubImage)
    unsafe{glGetCompressedTextureSubImage( texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels)}
    }
    func GetDebugMessageLog( count:UInt32, bufSize:Int32, sources:CPointer<UInt32>, types:CPointer<UInt32>, ids:CPointer<UInt32>, severities:CPointer<UInt32>, lengths:CPointer<Int32>, messageLog:CPointer<UInt8>):UInt32
    { 
    let glGetDebugMessageLog=CFunc<( count:UInt32, bufSize:Int32, sources:CPointer<UInt32>, types:CPointer<UInt32>, ids:CPointer<UInt32>, severities:CPointer<UInt32>, lengths:CPointer<Int32>, messageLog:CPointer<UInt8>)->UInt32>(openglGetDebugMessageLog)
    unsafe{glGetDebugMessageLog( count, bufSize, sources, types, ids, severities, lengths, messageLog)}
    }
    func GetDoublei_v( target:UInt32, index:UInt32, data:CPointer<Float64>):Unit
    { 
    let glGetDoublei_v=CFunc<( target:UInt32, index:UInt32, data:CPointer<Float64>)->Unit>(openglGetDoublei_v)
    unsafe{glGetDoublei_v( target, index, data)}
    }
    func GetDoublev( pname:UInt32, data:CPointer<Float64>):Unit
    { 
    let glGetDoublev=CFunc<( pname:UInt32, data:CPointer<Float64>)->Unit>(openglGetDoublev)
    unsafe{glGetDoublev( pname, data)}
    }
    func GetError():UInt32
    {
    let glGetError=CFunc<()->UInt32>(openglGetError) 
    unsafe{glGetError()}
    }
    func GetFloati_v( target:UInt32, index:UInt32, data:CPointer<Float32>):Unit
    { 
    let glGetFloati_v=CFunc<( target:UInt32, index:UInt32, data:CPointer<Float32>)->Unit>(openglGetFloati_v)
    unsafe{glGetFloati_v( target, index, data)}
    }
    func GetFloatv( pname:UInt32, data:CPointer<Float32>):Unit
    { 
    let glGetFloatv=CFunc<( pname:UInt32, data:CPointer<Float32>)->Unit>(openglGetFloatv)
    unsafe{glGetFloatv( pname, data)}
    }
    func GetFragDataIndex( program:UInt32, name:CString):Unit
    { 
    let glGetFragDataIndex=CFunc<( program:UInt32, name:CString)->Unit>(openglGetFragDataIndex)
    unsafe{glGetFragDataIndex( program, name)}
    }
    func GetFragDataLocation( program:UInt32, name:CString):Unit
    { 
    let glGetFragDataLocation=CFunc<( program:UInt32, name:CString)->Unit>(openglGetFragDataLocation)
    unsafe{glGetFragDataLocation( program, name)}
    }
    func GetFramebufferAttachmentParameteriv( target:UInt32, attachment:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetFramebufferAttachmentParameteriv=CFunc<( target:UInt32, attachment:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetFramebufferAttachmentParameteriv)
    unsafe{glGetFramebufferAttachmentParameteriv( target, attachment, pname, params)}
    }
    func GetFramebufferParameteriv( target:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetFramebufferParameteriv=CFunc<( target:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetFramebufferParameteriv)
    unsafe{glGetFramebufferParameteriv( target, pname, params)}
    }
    func GetGraphicsResetStatus():UInt32
    {
    let glGetGraphicsResetStatus=CFunc<()->UInt32>(openglGetGraphicsResetStatus) 
    unsafe{glGetGraphicsResetStatus()}
    }
    func GetInteger64i_v( target:UInt32, index:UInt32, data:CPointer<Int64>):Unit
    { 
    let glGetInteger64i_v=CFunc<( target:UInt32, index:UInt32, data:CPointer<Int64>)->Unit>(openglGetInteger64i_v)
    unsafe{glGetInteger64i_v( target, index, data)}
    }
    func GetInteger64v( pname:UInt32, data:CPointer<Int64>):Unit
    { 
    let glGetInteger64v=CFunc<( pname:UInt32, data:CPointer<Int64>)->Unit>(openglGetInteger64v)
    unsafe{glGetInteger64v( pname, data)}
    }
    func GetIntegeri_v( target:UInt32, index:UInt32, data:CPointer<Int32>):Unit
    { 
    let glGetIntegeri_v=CFunc<( target:UInt32, index:UInt32, data:CPointer<Int32>)->Unit>(openglGetIntegeri_v)
    unsafe{glGetIntegeri_v( target, index, data)}
    }
    func GetIntegerv( pname:UInt32, data:CPointer<Int32>):Unit
    { 
    let glGetIntegerv=CFunc<( pname:UInt32, data:CPointer<Int32>)->Unit>(openglGetIntegerv)
    unsafe{glGetIntegerv( pname, data)}
    }
    func GetInternalformati64v( target:UInt32, internalformat:UInt32, pname:UInt32, count:Int32, params:CPointer<Int64>):Unit
    { 
    let glGetInternalformati64v=CFunc<( target:UInt32, internalformat:UInt32, pname:UInt32, count:Int32, params:CPointer<Int64>)->Unit>(openglGetInternalformati64v)
    unsafe{glGetInternalformati64v( target, internalformat, pname, count, params)}
    }
    func GetInternalformativ( target:UInt32, internalformat:UInt32, pname:UInt32, count:Int32, params:CPointer<Int32>):Unit
    { 
    let glGetInternalformativ=CFunc<( target:UInt32, internalformat:UInt32, pname:UInt32, count:Int32, params:CPointer<Int32>)->Unit>(openglGetInternalformativ)
    unsafe{glGetInternalformativ( target, internalformat, pname, count, params)}
    }
    func GetMultisamplefv( pname:UInt32, index:UInt32, val:CPointer<Float32>):Unit
    { 
    let glGetMultisamplefv=CFunc<( pname:UInt32, index:UInt32, val:CPointer<Float32>)->Unit>(openglGetMultisamplefv)
    unsafe{glGetMultisamplefv( pname, index, val)}
    }
    func GetNamedBufferParameteri64v( buffer:UInt32, pname:UInt32, params:CPointer<Int64>):Unit
    { 
    let glGetNamedBufferParameteri64v=CFunc<( buffer:UInt32, pname:UInt32, params:CPointer<Int64>)->Unit>(openglGetNamedBufferParameteri64v)
    unsafe{glGetNamedBufferParameteri64v( buffer, pname, params)}
    }
    func GetNamedBufferParameteriv( buffer:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetNamedBufferParameteriv=CFunc<( buffer:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetNamedBufferParameteriv)
    unsafe{glGetNamedBufferParameteriv( buffer, pname, params)}
    }
    func GetNamedBufferPointerv( buffer:UInt32, pname:UInt32, params:CPointer<Unit>):Unit
    { 
    let glGetNamedBufferPointerv=CFunc<( buffer:UInt32, pname:UInt32, params:CPointer<Unit>)->Unit>(openglGetNamedBufferPointerv)
    unsafe{glGetNamedBufferPointerv( buffer, pname, params)}
    }
    func GetNamedBufferSubData( buffer:UInt32, offset:Int64, size:Int64, data:CPointer<Unit>):Unit
    { 
    let glGetNamedBufferSubData=CFunc<( buffer:UInt32, offset:Int64, size:Int64, data:CPointer<Unit>)->Unit>(openglGetNamedBufferSubData)
    unsafe{glGetNamedBufferSubData( buffer, offset, size, data)}
    }
    func GetNamedFramebufferAttachmentParameteriv( framebuffer:UInt32, attachment:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetNamedFramebufferAttachmentParameteriv=CFunc<( framebuffer:UInt32, attachment:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetNamedFramebufferAttachmentParameteriv)
    unsafe{glGetNamedFramebufferAttachmentParameteriv( framebuffer, attachment, pname, params)}
    }
    func GetNamedFramebufferParameteriv( framebuffer:UInt32, pname:UInt32, param:CPointer<Int32>):Unit
    { 
    let glGetNamedFramebufferParameteriv=CFunc<( framebuffer:UInt32, pname:UInt32, param:CPointer<Int32>)->Unit>(openglGetNamedFramebufferParameteriv)
    unsafe{glGetNamedFramebufferParameteriv( framebuffer, pname, param)}
    }
    func GetNamedRenderbufferParameteriv( renderbuffer:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetNamedRenderbufferParameteriv=CFunc<( renderbuffer:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetNamedRenderbufferParameteriv)
    unsafe{glGetNamedRenderbufferParameteriv( renderbuffer, pname, params)}
    }
    func GetObjectLabel( identifier:UInt32, name:UInt32, bufSize:Int32, length:CPointer<Int32>, label:CPointer<UInt8>):Unit
    { 
    let glGetObjectLabel=CFunc<( identifier:UInt32, name:UInt32, bufSize:Int32, length:CPointer<Int32>, label:CPointer<UInt8>)->Unit>(openglGetObjectLabel)
    unsafe{glGetObjectLabel( identifier, name, bufSize, length, label)}
    }
    func GetObjectPtrLabel( ptr:CPointer<Unit>, bufSize:Int32, length:CPointer<Int32>, label:CPointer<UInt8>):Unit
    { 
    let glGetObjectPtrLabel=CFunc<( ptr:CPointer<Unit>, bufSize:Int32, length:CPointer<Int32>, label:CPointer<UInt8>)->Unit>(openglGetObjectPtrLabel)
    unsafe{glGetObjectPtrLabel( ptr, bufSize, length, label)}
    }
    func GetPointerv( pname:UInt32, params:CPointer<Unit>):Unit
    { 
    let glGetPointerv=CFunc<( pname:UInt32, params:CPointer<Unit>)->Unit>(openglGetPointerv)
    unsafe{glGetPointerv( pname, params)}
    }
    func GetProgramBinary( program:UInt32, bufSize:Int32, length:CPointer<Int32>, binaryFormat:CPointer<UInt32>, binary:CPointer<Unit>):Unit
    { 
    let glGetProgramBinary=CFunc<( program:UInt32, bufSize:Int32, length:CPointer<Int32>, binaryFormat:CPointer<UInt32>, binary:CPointer<Unit>)->Unit>(openglGetProgramBinary)
    unsafe{glGetProgramBinary( program, bufSize, length, binaryFormat, binary)}
    }
    func GetProgramInfoLog( program:UInt32, bufSize:Int32, length:CPointer<Int32>, infoLog:CPointer<UInt8>):Unit
    { 
    let glGetProgramInfoLog=CFunc<( program:UInt32, bufSize:Int32, length:CPointer<Int32>, infoLog:CPointer<UInt8>)->Unit>(openglGetProgramInfoLog)
    unsafe{glGetProgramInfoLog( program, bufSize, length, infoLog)}
    }
    func GetProgramInterfaceiv( program:UInt32, programInterface:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetProgramInterfaceiv=CFunc<( program:UInt32, programInterface:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetProgramInterfaceiv)
    unsafe{glGetProgramInterfaceiv( program, programInterface, pname, params)}
    }
    func GetProgramPipelineInfoLog( pipeline:UInt32, bufSize:Int32, length:CPointer<Int32>, infoLog:CPointer<UInt8>):Unit
    { 
    let glGetProgramPipelineInfoLog=CFunc<( pipeline:UInt32, bufSize:Int32, length:CPointer<Int32>, infoLog:CPointer<UInt8>)->Unit>(openglGetProgramPipelineInfoLog)
    unsafe{glGetProgramPipelineInfoLog( pipeline, bufSize, length, infoLog)}
    }
    func GetProgramPipelineiv( pipeline:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetProgramPipelineiv=CFunc<( pipeline:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetProgramPipelineiv)
    unsafe{glGetProgramPipelineiv( pipeline, pname, params)}
    }
    func GetProgramResourceIndex( program:UInt32, programInterface:UInt32, name:CString):UInt32
    { 
    let glGetProgramResourceIndex=CFunc<( program:UInt32, programInterface:UInt32, name:CString)->UInt32>(openglGetProgramResourceIndex)
    unsafe{glGetProgramResourceIndex( program, programInterface, name)}
    }
    func GetProgramResourceLocation( program:UInt32, programInterface:UInt32, name:CString):Int32
    { 
    let glGetProgramResourceLocation=CFunc<( program:UInt32, programInterface:UInt32, name:CString)->Int32>(openglGetProgramResourceLocation)
    unsafe{glGetProgramResourceLocation( program, programInterface, name)}
    }
    func GetProgramResourceLocationIndex( program:UInt32, programInterface:UInt32, name:CString):Int32
    { 
    let glGetProgramResourceLocationIndex=CFunc<( program:UInt32, programInterface:UInt32, name:CString)->Int32>(openglGetProgramResourceLocationIndex)
    unsafe{glGetProgramResourceLocationIndex( program, programInterface, name)}
    }
    func GetProgramResourceName( program:UInt32, programInterface:UInt32, index:UInt32, bufSize:Int32, length:CPointer<Int32>, name:CPointer<UInt8>):Unit
    { 
    let glGetProgramResourceName=CFunc<( program:UInt32, programInterface:UInt32, index:UInt32, bufSize:Int32, length:CPointer<Int32>, name:CPointer<UInt8>)->Unit>(openglGetProgramResourceName)
    unsafe{glGetProgramResourceName( program, programInterface, index, bufSize, length, name)}
    }
    func GetProgramResourceiv( program:UInt32, programInterface:UInt32, index:UInt32, propCount:Int32, props:CPointer<UInt32>, count:Int32, length:CPointer<Int32>, params:CPointer<Int32>):Unit
    { 
    let glGetProgramResourceiv=CFunc<( program:UInt32, programInterface:UInt32, index:UInt32, propCount:Int32, props:CPointer<UInt32>, count:Int32, length:CPointer<Int32>, params:CPointer<Int32>)->Unit>(openglGetProgramResourceiv)
    unsafe{glGetProgramResourceiv( program, programInterface, index, propCount, props, count, length, params)}
    }
    func GetProgramStageiv( program:UInt32, shadertype:UInt32, pname:UInt32, values:CPointer<Int32>):Unit
    { 
    let glGetProgramStageiv=CFunc<( program:UInt32, shadertype:UInt32, pname:UInt32, values:CPointer<Int32>)->Unit>(openglGetProgramStageiv)
    unsafe{glGetProgramStageiv( program, shadertype, pname, values)}
    }
    func GetProgramiv( program:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetProgramiv=CFunc<( program:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetProgramiv)
    unsafe{glGetProgramiv( program, pname, params)}
    }
    func GetQueryBufferObjecti64v( id:UInt32, buffer:UInt32, pname:UInt32, offset:Int64):Unit
    { 
    let glGetQueryBufferObjecti64v=CFunc<( id:UInt32, buffer:UInt32, pname:UInt32, offset:Int64)->Unit>(openglGetQueryBufferObjecti64v)
    unsafe{glGetQueryBufferObjecti64v( id, buffer, pname, offset)}
    }
    func GetQueryBufferObjectiv( id:UInt32, buffer:UInt32, pname:UInt32, offset:Int64):Unit
    { 
    let glGetQueryBufferObjectiv=CFunc<( id:UInt32, buffer:UInt32, pname:UInt32, offset:Int64)->Unit>(openglGetQueryBufferObjectiv)
    unsafe{glGetQueryBufferObjectiv( id, buffer, pname, offset)}
    }
    func GetQueryBufferObjectui64v( id:UInt32, buffer:UInt32, pname:UInt32, offset:Int64):Unit
    { 
    let glGetQueryBufferObjectui64v=CFunc<( id:UInt32, buffer:UInt32, pname:UInt32, offset:Int64)->Unit>(openglGetQueryBufferObjectui64v)
    unsafe{glGetQueryBufferObjectui64v( id, buffer, pname, offset)}
    }
    func GetQueryBufferObjectuiv( id:UInt32, buffer:UInt32, pname:UInt32, offset:Int64):Unit
    { 
    let glGetQueryBufferObjectuiv=CFunc<( id:UInt32, buffer:UInt32, pname:UInt32, offset:Int64)->Unit>(openglGetQueryBufferObjectuiv)
    unsafe{glGetQueryBufferObjectuiv( id, buffer, pname, offset)}
    }
    func GetQueryIndexediv( target:UInt32, index:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetQueryIndexediv=CFunc<( target:UInt32, index:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetQueryIndexediv)
    unsafe{glGetQueryIndexediv( target, index, pname, params)}
    }
    func GetQueryObjecti64v( id:UInt32, pname:UInt32, params:CPointer<Int64>):Unit
    { 
    let glGetQueryObjecti64v=CFunc<( id:UInt32, pname:UInt32, params:CPointer<Int64>)->Unit>(openglGetQueryObjecti64v)
    unsafe{glGetQueryObjecti64v( id, pname, params)}
    }
    func GetQueryObjectiv( id:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetQueryObjectiv=CFunc<( id:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetQueryObjectiv)
    unsafe{glGetQueryObjectiv( id, pname, params)}
    }
    func GetQueryObjectui64v( id:UInt32, pname:UInt32, params:CPointer<UInt64>):Unit
    { 
    let glGetQueryObjectui64v=CFunc<( id:UInt32, pname:UInt32, params:CPointer<UInt64>)->Unit>(openglGetQueryObjectui64v)
    unsafe{glGetQueryObjectui64v( id, pname, params)}
    }
    func GetQueryObjectuiv( id:UInt32, pname:UInt32, params:CPointer<UInt32>):Unit
    { 
    let glGetQueryObjectuiv=CFunc<( id:UInt32, pname:UInt32, params:CPointer<UInt32>)->Unit>(openglGetQueryObjectuiv)
    unsafe{glGetQueryObjectuiv( id, pname, params)}
    }
    func GetQueryiv( target:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetQueryiv=CFunc<( target:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetQueryiv)
    unsafe{glGetQueryiv( target, pname, params)}
    }
    func GetRenderbufferParameteriv( target:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetRenderbufferParameteriv=CFunc<( target:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetRenderbufferParameteriv)
    unsafe{glGetRenderbufferParameteriv( target, pname, params)}
    }
    func GetSamplerParameterIiv( sampler:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetSamplerParameterIiv=CFunc<( sampler:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetSamplerParameterIiv)
    unsafe{glGetSamplerParameterIiv( sampler, pname, params)}
    }
    func GetSamplerParameterIuiv( sampler:UInt32, pname:UInt32, params:CPointer<UInt32>):Unit
    { 
    let glGetSamplerParameterIuiv=CFunc<( sampler:UInt32, pname:UInt32, params:CPointer<UInt32>)->Unit>(openglGetSamplerParameterIuiv)
    unsafe{glGetSamplerParameterIuiv( sampler, pname, params)}
    }
    func GetSamplerParameterfv( sampler:UInt32, pname:UInt32, params:CPointer<Float32>):Unit
    { 
    let glGetSamplerParameterfv=CFunc<( sampler:UInt32, pname:UInt32, params:CPointer<Float32>)->Unit>(openglGetSamplerParameterfv)
    unsafe{glGetSamplerParameterfv( sampler, pname, params)}
    }
    func GetSamplerParameteriv( sampler:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetSamplerParameteriv=CFunc<( sampler:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetSamplerParameteriv)
    unsafe{glGetSamplerParameteriv( sampler, pname, params)}
    }
    func GetShaderInfoLog( shader:UInt32, bufSize:Int32, length:CPointer<Int32>, infoLog:CPointer<UInt8>):Unit
    { 
    let glGetShaderInfoLog=CFunc<( shader:UInt32, bufSize:Int32, length:CPointer<Int32>, infoLog:CPointer<UInt8>)->Unit>(openglGetShaderInfoLog)
    unsafe{glGetShaderInfoLog( shader, bufSize, length, infoLog)}
    }
    func GetShaderPrecisionFormat( shadertype:UInt32, precisiontype:UInt32, range:CPointer<Int32>, precision:CPointer<Int32>):Unit
    { 
    let glGetShaderPrecisionFormat=CFunc<( shadertype:UInt32, precisiontype:UInt32, range:CPointer<Int32>, precision:CPointer<Int32>)->Unit>(openglGetShaderPrecisionFormat)
    unsafe{glGetShaderPrecisionFormat( shadertype, precisiontype, range, precision)}
    }
    func GetShaderSource( shader:UInt32, bufSize:Int32, length:CPointer<Int32>, source:CPointer<UInt8>):Unit
    { 
    let glGetShaderSource=CFunc<( shader:UInt32, bufSize:Int32, length:CPointer<Int32>, source:CPointer<UInt8>)->Unit>(openglGetShaderSource)
    unsafe{glGetShaderSource( shader, bufSize, length, source)}
    }
    func GetShaderiv( shader:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetShaderiv=CFunc<( shader:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetShaderiv)
    unsafe{glGetShaderiv( shader, pname, params)}
    }
    func GetString( name:UInt):String
    { 
    let glGetString=CFunc<( name:UInt)->CString>(openglGetString)
    let a=unsafe{glGetString(name)}
    return a.toString()
    }
    func GetStringi( name:UInt32, index:UInt32):CPointer<UInt8>
    { 
    let glGetStringi=CFunc<( name:UInt32, index:UInt32)->CPointer<UInt8>>(openglGetStringi)
    unsafe{glGetStringi( name, index)}
    }
    func GetSubroutineIndex( program:UInt32, shadertype:UInt32, name:CString):UInt32
    { 
    let glGetSubroutineIndex=CFunc<( program:UInt32, shadertype:UInt32, name:CString)->UInt32>(openglGetSubroutineIndex)
    unsafe{glGetSubroutineIndex( program, shadertype, name)}
    }
    func GetSubroutineUniformLocation( program:UInt32, shadertype:UInt32, name:CString):Int32
    { 
    let glGetSubroutineUniformLocation=CFunc<( program:UInt32, shadertype:UInt32, name:CString)->Int32>(openglGetSubroutineUniformLocation)
    unsafe{glGetSubroutineUniformLocation( program, shadertype, name)}
    }
    func GetSynciv( sync:UIntNative, pname:UInt32, count:Int32, length:CPointer<Int32>, values:CPointer<Int32>):Unit
    { 
    let glGetSynciv=CFunc<( sync:UIntNative, pname:UInt32, count:Int32, length:CPointer<Int32>, values:CPointer<Int32>)->Unit>(openglGetSynciv)
    unsafe{glGetSynciv( sync, pname, count, length, values)}
    }
    func GetTexImage( target:UInt32, level:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>):Unit
    { 
    let glGetTexImage=CFunc<( target:UInt32, level:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>)->Unit>(openglGetTexImage)
    unsafe{glGetTexImage( target, level, format,ttype, pixels)}
    }
    func GetTexLevelParameterfv( target:UInt32, level:Int32, pname:UInt32, params:CPointer<Float32>):Unit
    { 
    let glGetTexLevelParameterfv=CFunc<( target:UInt32, level:Int32, pname:UInt32, params:CPointer<Float32>)->Unit>(openglGetTexLevelParameterfv)
    unsafe{glGetTexLevelParameterfv( target, level, pname, params)}
    }
    func GetTexLevelParameteriv( target:UInt32, level:Int32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetTexLevelParameteriv=CFunc<( target:UInt32, level:Int32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetTexLevelParameteriv)
    unsafe{glGetTexLevelParameteriv( target, level, pname, params)}
    }
    func GetTexParameterIiv( target:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetTexParameterIiv=CFunc<( target:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetTexParameterIiv)
    unsafe{glGetTexParameterIiv( target, pname, params)}
    }
    func GetTexParameterIuiv( target:UInt32, pname:UInt32, params:CPointer<UInt32>):Unit
    { 
    let glGetTexParameterIuiv=CFunc<( target:UInt32, pname:UInt32, params:CPointer<UInt32>)->Unit>(openglGetTexParameterIuiv)
    unsafe{glGetTexParameterIuiv( target, pname, params)}
    }
    func GetTexParameterfv( target:UInt32, pname:UInt32, params:CPointer<Float32>):Unit
    { 
    let glGetTexParameterfv=CFunc<( target:UInt32, pname:UInt32, params:CPointer<Float32>)->Unit>(openglGetTexParameterfv)
    unsafe{glGetTexParameterfv( target, pname, params)}
    }
    func GetTexParameteriv( target:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetTexParameteriv=CFunc<( target:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetTexParameteriv)
    unsafe{glGetTexParameteriv( target, pname, params)}
    }
    func GetTextureImage( texture:UInt32, level:Int32, format:UInt32,ttype:UInt32, bufSize:Int32, pixels:CPointer<Unit>):Unit
    { 
    let glGetTextureImage=CFunc<( texture:UInt32, level:Int32, format:UInt32,ttype:UInt32, bufSize:Int32, pixels:CPointer<Unit>)->Unit>(openglGetTextureImage)
    unsafe{glGetTextureImage( texture, level, format,ttype, bufSize, pixels)}
    }
    func GetTextureLevelParameterfv( texture:UInt32, level:Int32, pname:UInt32, params:CPointer<Float32>):Unit
    { 
    let glGetTextureLevelParameterfv=CFunc<( texture:UInt32, level:Int32, pname:UInt32, params:CPointer<Float32>)->Unit>(openglGetTextureLevelParameterfv)
    unsafe{glGetTextureLevelParameterfv( texture, level, pname, params)}
    }
    func GetTextureLevelParameteriv( texture:UInt32, level:Int32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetTextureLevelParameteriv=CFunc<( texture:UInt32, level:Int32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetTextureLevelParameteriv)
    unsafe{glGetTextureLevelParameteriv( texture, level, pname, params)}
    }
    func GetTextureParameterIiv( texture:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetTextureParameterIiv=CFunc<( texture:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetTextureParameterIiv)
    unsafe{glGetTextureParameterIiv( texture, pname, params)}
    }
    func GetTextureParameterIuiv( texture:UInt32, pname:UInt32, params:CPointer<UInt32>):Unit
    { 
    let glGetTextureParameterIuiv=CFunc<( texture:UInt32, pname:UInt32, params:CPointer<UInt32>)->Unit>(openglGetTextureParameterIuiv)
    unsafe{glGetTextureParameterIuiv( texture, pname, params)}
    }
    func GetTextureParameterfv( texture:UInt32, pname:UInt32, params:CPointer<Float32>):Unit
    { 
    let glGetTextureParameterfv=CFunc<( texture:UInt32, pname:UInt32, params:CPointer<Float32>)->Unit>(openglGetTextureParameterfv)
    unsafe{glGetTextureParameterfv( texture, pname, params)}
    }
    func GetTextureParameteriv( texture:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetTextureParameteriv=CFunc<( texture:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetTextureParameteriv)
    unsafe{glGetTextureParameteriv( texture, pname, params)}
    }
    func GetTextureSubImage( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, width:Int32, height:Int32, depth:Int32, format:UInt32,ttype:UInt32, bufSize:Int32, pixels:CPointer<Unit>):Unit
    { 
    let glGetTextureSubImage=CFunc<( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, width:Int32, height:Int32, depth:Int32, format:UInt32,ttype:UInt32, bufSize:Int32, pixels:CPointer<Unit>)->Unit>(openglGetTextureSubImage)
    unsafe{glGetTextureSubImage( texture, level, xoffset, yoffset, zoffset, width, height, depth, format,ttype, bufSize, pixels)}
    }
    func GetTransformFeedbackVarying( program:UInt32, index:UInt32, bufSize:Int32, length:CPointer<Int32>, size:CPointer<Int32>,ttype:CPointer<UInt32>, name:CPointer<UInt8>):Unit
    { 
    let glGetTransformFeedbackVarying=CFunc<( program:UInt32, index:UInt32, bufSize:Int32, length:CPointer<Int32>, size:CPointer<Int32>,ttype:CPointer<UInt32>, name:CPointer<UInt8>)->Unit>(openglGetTransformFeedbackVarying)
    unsafe{glGetTransformFeedbackVarying( program, index, bufSize, length, size,ttype, name)}
    }
    func GetTransformFeedbacki64_v( xfb:UInt32, pname:UInt32, index:UInt32, param:CPointer<Int64>):Unit
    { 
    let glGetTransformFeedbacki64_v=CFunc<( xfb:UInt32, pname:UInt32, index:UInt32, param:CPointer<Int64>)->Unit>(openglGetTransformFeedbacki64_v)
    unsafe{glGetTransformFeedbacki64_v( xfb, pname, index, param)}
    }
    func GetTransformFeedbacki_v( xfb:UInt32, pname:UInt32, index:UInt32, param:CPointer<Int32>):Unit
    { 
    let glGetTransformFeedbacki_v=CFunc<( xfb:UInt32, pname:UInt32, index:UInt32, param:CPointer<Int32>)->Unit>(openglGetTransformFeedbacki_v)
    unsafe{glGetTransformFeedbacki_v( xfb, pname, index, param)}
    }
    func GetTransformFeedbackiv( xfb:UInt32, pname:UInt32, param:CPointer<Int32>):Unit
    { 
    let glGetTransformFeedbackiv=CFunc<( xfb:UInt32, pname:UInt32, param:CPointer<Int32>)->Unit>(openglGetTransformFeedbackiv)
    unsafe{glGetTransformFeedbackiv( xfb, pname, param)}
    }
    func GetUniformBlockIndex( program:UInt32, uniformBlockName:CString):UInt32
    { 
    let glGetUniformBlockIndex=CFunc<( program:UInt32, uniformBlockName:CString)->UInt32>(openglGetUniformBlockIndex)
    unsafe{glGetUniformBlockIndex( program, uniformBlockName)}
    }
    func GetUniformIndices( program:UInt32, uniformCount:Int32, uniformNames:CPointer<UInt8>, uniformIndices:CPointer<UInt32>):Unit
    { 
    let glGetUniformIndices=CFunc<( program:UInt32, uniformCount:Int32, uniformNames:CPointer<UInt8>, uniformIndices:CPointer<UInt32>)->Unit>(openglGetUniformIndices)
    unsafe{glGetUniformIndices( program, uniformCount, uniformNames, uniformIndices)}
    }
    func GetUniformLocation( program:UInt32, name:CString):Int32
    { 
    let glGetUniformLocation=CFunc<( program:UInt32, name:CString)->Int32>(openglGetUniformLocation)
    unsafe{glGetUniformLocation( program, name)}
    }
    func GetUniformSubroutineuiv( shadertype:UInt32, location:Int32, params:CPointer<UInt32>):Unit
    { 
    let glGetUniformSubroutineuiv=CFunc<( shadertype:UInt32, location:Int32, params:CPointer<UInt32>)->Unit>(openglGetUniformSubroutineuiv)
    unsafe{glGetUniformSubroutineuiv( shadertype, location, params)}
    }
    func GetUniformdv( program:UInt32, location:Int32, params:CPointer<Float64>):Unit
    { 
    let glGetUniformdv=CFunc<( program:UInt32, location:Int32, params:CPointer<Float64>)->Unit>(openglGetUniformdv)
    unsafe{glGetUniformdv( program, location, params)}
    }
    func GetUniformfv( program:UInt32, location:Int32, params:CPointer<Float32>):Unit
    { 
    let glGetUniformfv=CFunc<( program:UInt32, location:Int32, params:CPointer<Float32>)->Unit>(openglGetUniformfv)
    unsafe{glGetUniformfv( program, location, params)}
    }
    func GetUniformiv( program:UInt32, location:Int32, params:CPointer<Int32>):Unit
    { 
    let glGetUniformiv=CFunc<( program:UInt32, location:Int32, params:CPointer<Int32>)->Unit>(openglGetUniformiv)
    unsafe{glGetUniformiv( program, location, params)}
    }
    func GetUniformuiv( program:UInt32, location:Int32, params:CPointer<UInt32>):Unit
    { 
    let glGetUniformuiv=CFunc<( program:UInt32, location:Int32, params:CPointer<UInt32>)->Unit>(openglGetUniformuiv)
    unsafe{glGetUniformuiv( program, location, params)}
    }
    func GetVertexArrayIndexed64iv( vaobj:UInt32, index:UInt32, pname:UInt32, param:CPointer<Int64>):Unit
    { 
    let glGetVertexArrayIndexed64iv=CFunc<( vaobj:UInt32, index:UInt32, pname:UInt32, param:CPointer<Int64>)->Unit>(openglGetVertexArrayIndexed64iv)
    unsafe{glGetVertexArrayIndexed64iv( vaobj, index, pname, param)}
    }
    func GetVertexArrayIndexediv( vaobj:UInt32, index:UInt32, pname:UInt32, param:CPointer<Int32>):Unit
    { 
    let glGetVertexArrayIndexediv=CFunc<( vaobj:UInt32, index:UInt32, pname:UInt32, param:CPointer<Int32>)->Unit>(openglGetVertexArrayIndexediv)
    unsafe{glGetVertexArrayIndexediv( vaobj, index, pname, param)}
    }
    func GetVertexArrayiv( vaobj:UInt32, pname:UInt32, param:CPointer<Int32>):Unit
    { 
    let glGetVertexArrayiv=CFunc<( vaobj:UInt32, pname:UInt32, param:CPointer<Int32>)->Unit>(openglGetVertexArrayiv)
    unsafe{glGetVertexArrayiv( vaobj, pname, param)}
    }
    func GetVertexAttribIiv( index:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetVertexAttribIiv=CFunc<( index:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetVertexAttribIiv)
    unsafe{glGetVertexAttribIiv( index, pname, params)}
    }
    func GetVertexAttribIuiv( index:UInt32, pname:UInt32, params:CPointer<UInt32>):Unit
    { 
    let glGetVertexAttribIuiv=CFunc<( index:UInt32, pname:UInt32, params:CPointer<UInt32>)->Unit>(openglGetVertexAttribIuiv)
    unsafe{glGetVertexAttribIuiv( index, pname, params)}
    }
    func GetVertexAttribLdv( index:UInt32, pname:UInt32, params:CPointer<Float64>):Unit
    { 
    let glGetVertexAttribLdv=CFunc<( index:UInt32, pname:UInt32, params:CPointer<Float64>)->Unit>(openglGetVertexAttribLdv)
    unsafe{glGetVertexAttribLdv( index, pname, params)}
    }
    func GetVertexAttribPointerv( index:UInt32, pname:UInt32, pointer:CPointer<Unit>):Unit
    { 
    let glGetVertexAttribPointerv=CFunc<( index:UInt32, pname:UInt32, pointer:CPointer<Unit>)->Unit>(openglGetVertexAttribPointerv)
    unsafe{glGetVertexAttribPointerv( index, pname, pointer)}
    }
    func GetVertexAttribdv( index:UInt32, pname:UInt32, params:CPointer<Float64>):Unit
    { 
    let glGetVertexAttribdv=CFunc<( index:UInt32, pname:UInt32, params:CPointer<Float64>)->Unit>(openglGetVertexAttribdv)
    unsafe{glGetVertexAttribdv( index, pname, params)}
    }
    func GetVertexAttribfv( index:UInt32, pname:UInt32, params:CPointer<Float32>):Unit
    { 
    let glGetVertexAttribfv=CFunc<( index:UInt32, pname:UInt32, params:CPointer<Float32>)->Unit>(openglGetVertexAttribfv)
    unsafe{glGetVertexAttribfv( index, pname, params)}
    }
    func GetVertexAttribiv( index:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glGetVertexAttribiv=CFunc<( index:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglGetVertexAttribiv)
    unsafe{glGetVertexAttribiv( index, pname, params)}
    }
    func GetnCompressedTexImage( target:UInt32, lod:Int32, bufSize:Int32, pixels:CPointer<Unit>):Unit
    { 
    let glGetnCompressedTexImage=CFunc<( target:UInt32, lod:Int32, bufSize:Int32, pixels:CPointer<Unit>)->Unit>(openglGetnCompressedTexImage)
    unsafe{glGetnCompressedTexImage( target, lod, bufSize, pixels)}
    }
    func GetnTexImage( target:UInt32, level:Int32, format:UInt32,ttype:UInt32, bufSize:Int32, pixels:CPointer<Unit>):Unit
    { 
    let glGetnTexImage=CFunc<( target:UInt32, level:Int32, format:UInt32,ttype:UInt32, bufSize:Int32, pixels:CPointer<Unit>)->Unit>(openglGetnTexImage)
    unsafe{glGetnTexImage( target, level, format,ttype, bufSize, pixels)}
    }
    func GetnUniformdv( program:UInt32, location:Int32, bufSize:Int32, params:CPointer<Float64>):Unit
    { 
    let glGetnUniformdv=CFunc<( program:UInt32, location:Int32, bufSize:Int32, params:CPointer<Float64>)->Unit>(openglGetnUniformdv)
    unsafe{glGetnUniformdv( program, location, bufSize, params)}
    }
    func GetnUniformfv( program:UInt32, location:Int32, bufSize:Int32, params:CPointer<Float32>):Unit
    { 
    let glGetnUniformfv=CFunc<( program:UInt32, location:Int32, bufSize:Int32, params:CPointer<Float32>)->Unit>(openglGetnUniformfv)
    unsafe{glGetnUniformfv( program, location, bufSize, params)}
    }
    func GetnUniformiv( program:UInt32, location:Int32, bufSize:Int32, params:CPointer<Int32>):Unit
    { 
    let glGetnUniformiv=CFunc<( program:UInt32, location:Int32, bufSize:Int32, params:CPointer<Int32>)->Unit>(openglGetnUniformiv)
    unsafe{glGetnUniformiv( program, location, bufSize, params)}
    }
    func GetnUniformuiv( program:UInt32, location:Int32, bufSize:Int32, params:CPointer<UInt32>):Unit
    { 
    let glGetnUniformuiv=CFunc<( program:UInt32, location:Int32, bufSize:Int32, params:CPointer<UInt32>)->Unit>(openglGetnUniformuiv)
    unsafe{glGetnUniformuiv( program, location, bufSize, params)}
    }
    func Hint( target:UInt32, mode:UInt32):Unit
    { 
    let glHint=CFunc<( target:UInt32, mode:UInt32)->Unit>(openglHint)
    unsafe{glHint( target, mode)}
    }
    func InvalidateBufferData( buffer:UInt32):Unit
    { 
    let glInvalidateBufferData=CFunc<( buffer:UInt32)->Unit>(openglInvalidateBufferData)
    unsafe{glInvalidateBufferData( buffer)}
    }
    func InvalidateBufferSubData( buffer:UInt32, offset:Int64, length:Int64):Unit
    { 
    let glInvalidateBufferSubData=CFunc<( buffer:UInt32, offset:Int64, length:Int64)->Unit>(openglInvalidateBufferSubData)
    unsafe{glInvalidateBufferSubData( buffer, offset, length)}
    }
    func InvalidateFramebuffer( target:UInt32, numAttachments:Int32, attachments:CPointer<UInt32>):Unit
    { 
    let glInvalidateFramebuffer=CFunc<( target:UInt32, numAttachments:Int32, attachments:CPointer<UInt32>)->Unit>(openglInvalidateFramebuffer)
    unsafe{glInvalidateFramebuffer( target, numAttachments, attachments)}
    }
    func InvalidateNamedFramebufferData( framebuffer:UInt32, numAttachments:Int32, attachments:CPointer<UInt32>):Unit
    { 
    let glInvalidateNamedFramebufferData=CFunc<( framebuffer:UInt32, numAttachments:Int32, attachments:CPointer<UInt32>)->Unit>(openglInvalidateNamedFramebufferData)
    unsafe{glInvalidateNamedFramebufferData( framebuffer, numAttachments, attachments)}
    }
    func InvalidateNamedFramebufferSubData( framebuffer:UInt32, numAttachments:Int32, attachments:CPointer<UInt32>, x:Int32, y:Int32, width:Int32, height:Int32):Unit
    { 
    let glInvalidateNamedFramebufferSubData=CFunc<( framebuffer:UInt32, numAttachments:Int32, attachments:CPointer<UInt32>, x:Int32, y:Int32, width:Int32, height:Int32)->Unit>(openglInvalidateNamedFramebufferSubData)
    unsafe{glInvalidateNamedFramebufferSubData( framebuffer, numAttachments, attachments, x, y, width, height)}
    }
    func InvalidateSubFramebuffer( target:UInt32, numAttachments:Int32, attachments:CPointer<UInt32>, x:Int32, y:Int32, width:Int32, height:Int32):Unit
    { 
    let glInvalidateSubFramebuffer=CFunc<( target:UInt32, numAttachments:Int32, attachments:CPointer<UInt32>, x:Int32, y:Int32, width:Int32, height:Int32)->Unit>(openglInvalidateSubFramebuffer)
    unsafe{glInvalidateSubFramebuffer( target, numAttachments, attachments, x, y, width, height)}
    }
    func InvalidateTexImage( texture:UInt32, level:Int32):Unit
    { 
    let glInvalidateTexImage=CFunc<( texture:UInt32, level:Int32)->Unit>(openglInvalidateTexImage)
    unsafe{glInvalidateTexImage( texture, level)}
    }
    func InvalidateTexSubImage( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, width:Int32, height:Int32, depth:Int32):Unit
    { 
    let glInvalidateTexSubImage=CFunc<( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, width:Int32, height:Int32, depth:Int32)->Unit>(openglInvalidateTexSubImage)
    unsafe{glInvalidateTexSubImage( texture, level, xoffset, yoffset, zoffset, width, height, depth)}
    }
    func IsBuffer( buffer:UInt32):UInt8
    { 
    let glIsBuffer=CFunc<( buffer:UInt32)->UInt8>(openglIsBuffer)
    unsafe{glIsBuffer( buffer)}
    }
    func IsEnabled( cap:UInt32):UInt8
    { 
    let glIsEnabled=CFunc<( cap:UInt32)->UInt8>(openglIsEnabled)
    unsafe{glIsEnabled( cap)}
    }
    func IsEnabledi( target:UInt32, index:UInt32):UInt8
    { 
    let glIsEnabledi=CFunc<( target:UInt32, index:UInt32)->UInt8>(openglIsEnabledi)
    unsafe{glIsEnabledi( target, index)}
    }
    func IsFramebuffer( framebuffer:UInt32):UInt8
    { 
    let glIsFramebuffer=CFunc<( framebuffer:UInt32)->UInt8>(openglIsFramebuffer)
    unsafe{glIsFramebuffer( framebuffer)}
    }
    func IsProgram( program:UInt32):UInt8
    { 
    let glIsProgram=CFunc<( program:UInt32)->UInt8>(openglIsProgram)
    unsafe{glIsProgram( program)}
    }
    func IsProgramPipeline( pipeline:UInt32):UInt8
    { 
    let glIsProgramPipeline=CFunc<( pipeline:UInt32)->UInt8>(openglIsProgramPipeline)
    unsafe{glIsProgramPipeline( pipeline)}
    }
    func IsQuery( id:UInt32):UInt8
    { 
    let glIsQuery=CFunc<( id:UInt32)->UInt8>(openglIsQuery)
    unsafe{glIsQuery( id)}
    }
    func IsRenderbuffer( renderbuffer:UInt32):UInt8
    { 
    let glIsRenderbuffer=CFunc<( renderbuffer:UInt32)->UInt8>(openglIsRenderbuffer)
    unsafe{glIsRenderbuffer( renderbuffer)}
    }
    func IsSampler( sampler:UInt32):UInt8
    { 
    let glIsSampler=CFunc<( sampler:UInt32)->UInt8>(openglIsSampler)
    unsafe{glIsSampler( sampler)}
    }
    func IsShader( shader:UInt32):UInt8
    { 
    let glIsShader=CFunc<( shader:UInt32)->UInt8>(openglIsShader)
    unsafe{glIsShader( shader)}
    }
    func IsSync( sync:UIntNative):UInt8
    { 
    let glIsSync=CFunc<( sync:UIntNative)->UInt8>(openglIsSync)
    unsafe{glIsSync( sync)}
    }
    func IsTexture( texture:UInt32):UInt8
    { 
    let glIsTexture=CFunc<( texture:UInt32)->UInt8>(openglIsTexture)
    unsafe{glIsTexture( texture)}
    }
    func IsTransformFeedback( id:UInt32):UInt8
    { 
    let glIsTransformFeedback=CFunc<( id:UInt32)->UInt8>(openglIsTransformFeedback)
    unsafe{glIsTransformFeedback( id)}
    }
    func IsVertexArray( array:UInt32):UInt8
    { 
    let glIsVertexArray=CFunc<( array:UInt32)->UInt8>(openglIsVertexArray)
    unsafe{glIsVertexArray( array)}
    }
    func LineWidth( width:Float32):Unit
    { 
    let glLineWidth=CFunc<( width:Float32)->Unit>(openglLineWidth)
    unsafe{glLineWidth( width)}
    }
    func LinkProgram( program:UInt32):Unit
    { 
    let glLinkProgram=CFunc<( program:UInt32)->Unit>(openglLinkProgram)
    unsafe{glLinkProgram( program)}
    }
    func LogicOp( opcode:UInt32):Unit
    { 
    let glLogicOp=CFunc<( opcode:UInt32)->Unit>(openglLogicOp)
    unsafe{glLogicOp( opcode)}
    }
    func MapBuffer( target:UInt32, access:UInt32):CPointer<Unit>
    { 
    let glMapBuffer=CFunc<( target:UInt32, access:UInt32)->CPointer<Unit>>(openglMapBuffer)
    unsafe{glMapBuffer( target, access)}
    }
    func MapBufferRange( target:UInt32, offset:Int64, length:Int64, access:UInt32):CPointer<Unit>
    { 
    let glMapBufferRange=CFunc<( target:UInt32, offset:Int64, length:Int64, access:UInt32)->CPointer<Unit>>(openglMapBufferRange)
    unsafe{glMapBufferRange( target, offset, length, access)}
    }
    func MapNamedBuffer( buffer:UInt32, access:UInt32):CPointer<Unit>
    { 
    let glMapNamedBuffer=CFunc<( buffer:UInt32, access:UInt32)->CPointer<Unit>>(openglMapNamedBuffer)
    unsafe{glMapNamedBuffer( buffer, access)}
    }
    func MapNamedBufferRange( buffer:UInt32, offset:Int64, length:Int64, access:UInt32):CPointer<Unit>
    { 
    let glMapNamedBufferRange=CFunc<( buffer:UInt32, offset:Int64, length:Int64, access:UInt32)->CPointer<Unit>>(openglMapNamedBufferRange)
    unsafe{glMapNamedBufferRange( buffer, offset, length, access)}
    }
    func MemoryBarrier( barriers:UInt32):Unit
    { 
    let glMemoryBarrier=CFunc<( barriers:UInt32)->Unit>(openglMemoryBarrier)
    unsafe{glMemoryBarrier( barriers)}
    }
    func MemoryBarrierByRegion( barriers:UInt32):Unit
    { 
    let glMemoryBarrierByRegion=CFunc<( barriers:UInt32)->Unit>(openglMemoryBarrierByRegion)
    unsafe{glMemoryBarrierByRegion( barriers)}
    }
    func MinSampleShading( value:Float32):Unit
    { 
    let glMinSampleShading=CFunc<( value:Float32)->Unit>(openglMinSampleShading)
    unsafe{glMinSampleShading( value)}
    }
    func MultiDrawArrays( mode:UInt32, first:CPointer<Int32>, count:CPointer<Int32>, drawcount:Int32):Unit
    { 
    let glMultiDrawArrays=CFunc<( mode:UInt32, first:CPointer<Int32>, count:CPointer<Int32>, drawcount:Int32)->Unit>(openglMultiDrawArrays)
    unsafe{glMultiDrawArrays( mode, first, count, drawcount)}
    }
    func MultiDrawArraysIndirect( mode:UInt32, indirect:CPointer<Unit>, drawcount:Int32, stride:Int32):Unit
    { 
    let glMultiDrawArraysIndirect=CFunc<( mode:UInt32, indirect:CPointer<Unit>, drawcount:Int32, stride:Int32)->Unit>(openglMultiDrawArraysIndirect)
    unsafe{glMultiDrawArraysIndirect( mode, indirect, drawcount, stride)}
    }
    func MultiDrawArraysIndirectCount( mode:UInt32, indirect:CPointer<Unit>, drawcount:Int64, maxdrawcount:Int32, stride:Int32):Unit
    { 
    let glMultiDrawArraysIndirectCount=CFunc<( mode:UInt32, indirect:CPointer<Unit>, drawcount:Int64, maxdrawcount:Int32, stride:Int32)->Unit>(openglMultiDrawArraysIndirectCount)
    unsafe{glMultiDrawArraysIndirectCount( mode, indirect, drawcount, maxdrawcount, stride)}
    }
    func MultiDrawElements( mode:UInt32, count:CPointer<Int32>,ttype:UInt32, indices:CPointer<Unit>, drawcount:Int32):Unit
    { 
    let glMultiDrawElements=CFunc<( mode:UInt32, count:CPointer<Int32>,ttype:UInt32, indices:CPointer<Unit>, drawcount:Int32)->Unit>(openglMultiDrawElements)
    unsafe{glMultiDrawElements( mode, count,ttype, indices, drawcount)}
    }
    func MultiDrawElementsBaseVertex( mode:UInt32, count:CPointer<Int32>,ttype:UInt32, indices:CPointer<Unit>, drawcount:Int32, basevertex:CPointer<Int32>):Unit
    { 
    let glMultiDrawElementsBaseVertex=CFunc<( mode:UInt32, count:CPointer<Int32>,ttype:UInt32, indices:CPointer<Unit>, drawcount:Int32, basevertex:CPointer<Int32>)->Unit>(openglMultiDrawElementsBaseVertex)
    unsafe{glMultiDrawElementsBaseVertex( mode, count,ttype, indices, drawcount, basevertex)}
    }
    func MultiDrawElementsIndirect( mode:UInt32,ttype:UInt32, indirect:CPointer<Unit>, drawcount:Int32, stride:Int32):Unit
    { 
    let glMultiDrawElementsIndirect=CFunc<( mode:UInt32,ttype:UInt32, indirect:CPointer<Unit>, drawcount:Int32, stride:Int32)->Unit>(openglMultiDrawElementsIndirect)
    unsafe{glMultiDrawElementsIndirect( mode,ttype, indirect, drawcount, stride)}
    }
    func MultiDrawElementsIndirectCount( mode:UInt32,ttype:UInt32, indirect:CPointer<Unit>, drawcount:Int64, maxdrawcount:Int32, stride:Int32):Unit
    { 
    let glMultiDrawElementsIndirectCount=CFunc<( mode:UInt32,ttype:UInt32, indirect:CPointer<Unit>, drawcount:Int64, maxdrawcount:Int32, stride:Int32)->Unit>(openglMultiDrawElementsIndirectCount)
    unsafe{glMultiDrawElementsIndirectCount( mode,ttype, indirect, drawcount, maxdrawcount, stride)}
    }
    func NamedBufferData( buffer:UInt32, size:Int64, data:CPointer<Unit>, usage:UInt32):Unit
    { 
    let glNamedBufferData=CFunc<( buffer:UInt32, size:Int64, data:CPointer<Unit>, usage:UInt32)->Unit>(openglNamedBufferData)
    unsafe{glNamedBufferData( buffer, size, data, usage)}
    }
    func NamedBufferStorage( buffer:UInt32, size:Int64, data:CPointer<Unit>, flags:UInt32):Unit
    { 
    let glNamedBufferStorage=CFunc<( buffer:UInt32, size:Int64, data:CPointer<Unit>, flags:UInt32)->Unit>(openglNamedBufferStorage)
    unsafe{glNamedBufferStorage( buffer, size, data, flags)}
    }
    func NamedBufferSubData( buffer:UInt32, offset:Int64, size:Int64, data:CPointer<Unit>):Unit
    { 
    let glNamedBufferSubData=CFunc<( buffer:UInt32, offset:Int64, size:Int64, data:CPointer<Unit>)->Unit>(openglNamedBufferSubData)
    unsafe{glNamedBufferSubData( buffer, offset, size, data)}
    }
    func NamedFramebufferDrawBuffer( framebuffer:UInt32, buf:UInt32):Unit
    { 
    let glNamedFramebufferDrawBuffer=CFunc<( framebuffer:UInt32, buf:UInt32)->Unit>(openglNamedFramebufferDrawBuffer)
    unsafe{glNamedFramebufferDrawBuffer( framebuffer, buf)}
    }
    func NamedFramebufferDrawBuffers( framebuffer:UInt32, n:Int32, bufs:CPointer<UInt32>):Unit
    { 
    let glNamedFramebufferDrawBuffers=CFunc<( framebuffer:UInt32, n:Int32, bufs:CPointer<UInt32>)->Unit>(openglNamedFramebufferDrawBuffers)
    unsafe{glNamedFramebufferDrawBuffers( framebuffer, n, bufs)}
    }
    func NamedFramebufferParameteri( framebuffer:UInt32, pname:UInt32, param:Int32):Unit
    { 
    let glNamedFramebufferParameteri=CFunc<( framebuffer:UInt32, pname:UInt32, param:Int32)->Unit>(openglNamedFramebufferParameteri)
    unsafe{glNamedFramebufferParameteri( framebuffer, pname, param)}
    }
    func NamedFramebufferReadBuffer( framebuffer:UInt32, src:UInt32):Unit
    { 
    let glNamedFramebufferReadBuffer=CFunc<( framebuffer:UInt32, src:UInt32)->Unit>(openglNamedFramebufferReadBuffer)
    unsafe{glNamedFramebufferReadBuffer( framebuffer, src)}
    }
    func NamedFramebufferRenderbuffer( framebuffer:UInt32, attachment:UInt32, renderbuffertarget:UInt32, renderbuffer:UInt32):Unit
    { 
    let glNamedFramebufferRenderbuffer=CFunc<( framebuffer:UInt32, attachment:UInt32, renderbuffertarget:UInt32, renderbuffer:UInt32)->Unit>(openglNamedFramebufferRenderbuffer)
    unsafe{glNamedFramebufferRenderbuffer( framebuffer, attachment, renderbuffertarget, renderbuffer)}
    }
    func NamedFramebufferTexture( framebuffer:UInt32, attachment:UInt32, texture:UInt32, level:Int32):Unit
    { 
    let glNamedFramebufferTexture=CFunc<( framebuffer:UInt32, attachment:UInt32, texture:UInt32, level:Int32)->Unit>(openglNamedFramebufferTexture)
    unsafe{glNamedFramebufferTexture( framebuffer, attachment, texture, level)}
    }
    func NamedFramebufferTextureLayer( framebuffer:UInt32, attachment:UInt32, texture:UInt32, level:Int32, layer:Int32):Unit
    { 
    let glNamedFramebufferTextureLayer=CFunc<( framebuffer:UInt32, attachment:UInt32, texture:UInt32, level:Int32, layer:Int32)->Unit>(openglNamedFramebufferTextureLayer)
    unsafe{glNamedFramebufferTextureLayer( framebuffer, attachment, texture, level, layer)}
    }
    func NamedRenderbufferStorage( renderbuffer:UInt32, internalformat:UInt32, width:Int32, height:Int32):Unit
    { 
    let glNamedRenderbufferStorage=CFunc<( renderbuffer:UInt32, internalformat:UInt32, width:Int32, height:Int32)->Unit>(openglNamedRenderbufferStorage)
    unsafe{glNamedRenderbufferStorage( renderbuffer, internalformat, width, height)}
    }
    func NamedRenderbufferStorageMultisample( renderbuffer:UInt32, samples:Int32, internalformat:UInt32, width:Int32, height:Int32):Unit
    { 
    let glNamedRenderbufferStorageMultisample=CFunc<( renderbuffer:UInt32, samples:Int32, internalformat:UInt32, width:Int32, height:Int32)->Unit>(openglNamedRenderbufferStorageMultisample)
    unsafe{glNamedRenderbufferStorageMultisample( renderbuffer, samples, internalformat, width, height)}
    }
    func ObjectLabel( identifier:UInt32, name:UInt32, length:Int32, label:CString):Unit
    { 
    let glObjectLabel=CFunc<( identifier:UInt32, name:UInt32, length:Int32, label:CString)->Unit>(openglObjectLabel)
    unsafe{glObjectLabel( identifier, name, length, label)}
    }
    func ObjectPtrLabel( ptr:CPointer<Unit>, length:Int32, label:CString):Unit
    { 
    let glObjectPtrLabel=CFunc<( ptr:CPointer<Unit>, length:Int32, label:CString)->Unit>(openglObjectPtrLabel)
    unsafe{glObjectPtrLabel( ptr, length, label)}
    }
    func PatchParameterfv( pname:UInt32, values:CPointer<Float32>):Unit
    { 
    let glPatchParameterfv=CFunc<( pname:UInt32, values:CPointer<Float32>)->Unit>(openglPatchParameterfv)
    unsafe{glPatchParameterfv( pname, values)}
    }
    func PatchParameteri( pname:UInt32, value:Int32):Unit
    { 
    let glPatchParameteri=CFunc<( pname:UInt32, value:Int32)->Unit>(openglPatchParameteri)
    unsafe{glPatchParameteri( pname, value)}
    }
    func PauseTransformFeedback():Unit
    {
    let glPauseTransformFeedback=CFunc<()->Unit>(openglPauseTransformFeedback) 
    unsafe{glPauseTransformFeedback()}
    }
    func PixelStoref( pname:UInt32, param:Float32):Unit
    { 
    let glPixelStoref=CFunc<( pname:UInt32, param:Float32)->Unit>(openglPixelStoref)
    unsafe{glPixelStoref( pname, param)}
    }
    func PixelStorei( pname:UInt32, param:Int32):Unit
    { 
    let glPixelStorei=CFunc<( pname:UInt32, param:Int32)->Unit>(openglPixelStorei)
    unsafe{glPixelStorei( pname, param)}
    }
    func PointParameterf( pname:UInt32, param:Float32):Unit
    { 
    let glPointParameterf=CFunc<( pname:UInt32, param:Float32)->Unit>(openglPointParameterf)
    unsafe{glPointParameterf( pname, param)}
    }
    func PointParameterfv( pname:UInt32, params:CPointer<Float32>):Unit
    { 
    let glPointParameterfv=CFunc<( pname:UInt32, params:CPointer<Float32>)->Unit>(openglPointParameterfv)
    unsafe{glPointParameterfv( pname, params)}
    }
    func PointParameteri( pname:UInt32, param:Int32):Unit
    { 
    let glPointParameteri=CFunc<( pname:UInt32, param:Int32)->Unit>(openglPointParameteri)
    unsafe{glPointParameteri( pname, param)}
    }
    func PointParameteriv( pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glPointParameteriv=CFunc<( pname:UInt32, params:CPointer<Int32>)->Unit>(openglPointParameteriv)
    unsafe{glPointParameteriv( pname, params)}
    }
    func PointSize( size:Float32):Unit
    { 
    let glPointSize=CFunc<( size:Float32)->Unit>(openglPointSize)
    unsafe{glPointSize( size)}
    }
    func PolygonMode( face:UInt32, mode:UInt32):Unit
    { 
    let glPolygonMode=CFunc<( face:UInt32, mode:UInt32)->Unit>(openglPolygonMode)
    unsafe{glPolygonMode( face, mode)}
    }
    func PolygonOffset( factor:Float32, units:Float32):Unit
    { 
    let glPolygonOffset=CFunc<( factor:Float32, units:Float32)->Unit>(openglPolygonOffset)
    unsafe{glPolygonOffset( factor, units)}
    }
    func PolygonOffsetClamp( factor:Float32, units:Float32, clamp:Float32):Unit
    { 
    let glPolygonOffsetClamp=CFunc<( factor:Float32, units:Float32, clamp:Float32)->Unit>(openglPolygonOffsetClamp)
    unsafe{glPolygonOffsetClamp( factor, units, clamp)}
    }
    func PopDebugGroup():Unit
    {
    let glPopDebugGroup=CFunc<()->Unit>(openglPopDebugGroup) 
    unsafe{glPopDebugGroup()}
    }
    func PrimitiveRestartIndex( index:UInt32):Unit
    { 
    let glPrimitiveRestartIndex=CFunc<( index:UInt32)->Unit>(openglPrimitiveRestartIndex)
    unsafe{glPrimitiveRestartIndex( index)}
    }
    func ProgramBinary( program:UInt32, binaryFormat:UInt32, binary:CPointer<Unit>, length:Int32):Unit
    { 
    let glProgramBinary=CFunc<( program:UInt32, binaryFormat:UInt32, binary:CPointer<Unit>, length:Int32)->Unit>(openglProgramBinary)
    unsafe{glProgramBinary( program, binaryFormat, binary, length)}
    }
    func ProgramParameteri( program:UInt32, pname:UInt32, value:Int32):Unit
    { 
    let glProgramParameteri=CFunc<( program:UInt32, pname:UInt32, value:Int32)->Unit>(openglProgramParameteri)
    unsafe{glProgramParameteri( program, pname, value)}
    }
    func ProgramUniform1d( program:UInt32, location:Int32, v0:Float64):Unit
    { 
    let glProgramUniform1d=CFunc<( program:UInt32, location:Int32, v0:Float64)->Unit>(openglProgramUniform1d)
    unsafe{glProgramUniform1d( program, location, v0)}
    }
    func ProgramUniform1dv( program:UInt32, location:Int32, count:Int32, value:CPointer<Float64>):Unit
    { 
    let glProgramUniform1dv=CFunc<( program:UInt32, location:Int32, count:Int32, value:CPointer<Float64>)->Unit>(openglProgramUniform1dv)
    unsafe{glProgramUniform1dv( program, location, count, value)}
    }
    func ProgramUniform1f( program:UInt32, location:Int32, v0:Float32):Unit
    { 
    let glProgramUniform1f=CFunc<( program:UInt32, location:Int32, v0:Float32)->Unit>(openglProgramUniform1f)
    unsafe{glProgramUniform1f( program, location, v0)}
    }
    func ProgramUniform1fv( program:UInt32, location:Int32, count:Int32, value:CPointer<Float32>):Unit
    { 
    let glProgramUniform1fv=CFunc<( program:UInt32, location:Int32, count:Int32, value:CPointer<Float32>)->Unit>(openglProgramUniform1fv)
    unsafe{glProgramUniform1fv( program, location, count, value)}
    }
    func ProgramUniform1i( program:UInt32, location:Int32, v0:Int32):Unit
    { 
    let glProgramUniform1i=CFunc<( program:UInt32, location:Int32, v0:Int32)->Unit>(openglProgramUniform1i)
    unsafe{glProgramUniform1i( program, location, v0)}
    }
    func ProgramUniform1iv( program:UInt32, location:Int32, count:Int32, value:CPointer<Int32>):Unit
    { 
    let glProgramUniform1iv=CFunc<( program:UInt32, location:Int32, count:Int32, value:CPointer<Int32>)->Unit>(openglProgramUniform1iv)
    unsafe{glProgramUniform1iv( program, location, count, value)}
    }
    func ProgramUniform1ui( program:UInt32, location:Int32, v0:UInt32):Unit
    { 
    let glProgramUniform1ui=CFunc<( program:UInt32, location:Int32, v0:UInt32)->Unit>(openglProgramUniform1ui)
    unsafe{glProgramUniform1ui( program, location, v0)}
    }
    func ProgramUniform1uiv( program:UInt32, location:Int32, count:Int32, value:CPointer<UInt32>):Unit
    { 
    let glProgramUniform1uiv=CFunc<( program:UInt32, location:Int32, count:Int32, value:CPointer<UInt32>)->Unit>(openglProgramUniform1uiv)
    unsafe{glProgramUniform1uiv( program, location, count, value)}
    }
    func ProgramUniform2d( program:UInt32, location:Int32, v0:Float64, v1:Float64):Unit
    { 
    let glProgramUniform2d=CFunc<( program:UInt32, location:Int32, v0:Float64, v1:Float64)->Unit>(openglProgramUniform2d)
    unsafe{glProgramUniform2d( program, location, v0, v1)}
    }
    func ProgramUniform2dv( program:UInt32, location:Int32, count:Int32, value:CPointer<Float64>):Unit
    { 
    let glProgramUniform2dv=CFunc<( program:UInt32, location:Int32, count:Int32, value:CPointer<Float64>)->Unit>(openglProgramUniform2dv)
    unsafe{glProgramUniform2dv( program, location, count, value)}
    }
    func ProgramUniform2f( program:UInt32, location:Int32, v0:Float32, v1:Float32):Unit
    { 
    let glProgramUniform2f=CFunc<( program:UInt32, location:Int32, v0:Float32, v1:Float32)->Unit>(openglProgramUniform2f)
    unsafe{glProgramUniform2f( program, location, v0, v1)}
    }
    func ProgramUniform2fv( program:UInt32, location:Int32, count:Int32, value:CPointer<Float32>):Unit
    { 
    let glProgramUniform2fv=CFunc<( program:UInt32, location:Int32, count:Int32, value:CPointer<Float32>)->Unit>(openglProgramUniform2fv)
    unsafe{glProgramUniform2fv( program, location, count, value)}
    }
    func ProgramUniform2i( program:UInt32, location:Int32, v0:Int32, v1:Int32):Unit
    { 
    let glProgramUniform2i=CFunc<( program:UInt32, location:Int32, v0:Int32, v1:Int32)->Unit>(openglProgramUniform2i)
    unsafe{glProgramUniform2i( program, location, v0, v1)}
    }
    func ProgramUniform2iv( program:UInt32, location:Int32, count:Int32, value:CPointer<Int32>):Unit
    { 
    let glProgramUniform2iv=CFunc<( program:UInt32, location:Int32, count:Int32, value:CPointer<Int32>)->Unit>(openglProgramUniform2iv)
    unsafe{glProgramUniform2iv( program, location, count, value)}
    }
    func ProgramUniform2ui( program:UInt32, location:Int32, v0:UInt32, v1:UInt32):Unit
    { 
    let glProgramUniform2ui=CFunc<( program:UInt32, location:Int32, v0:UInt32, v1:UInt32)->Unit>(openglProgramUniform2ui)
    unsafe{glProgramUniform2ui( program, location, v0, v1)}
    }
    func ProgramUniform2uiv( program:UInt32, location:Int32, count:Int32, value:CPointer<UInt32>):Unit
    { 
    let glProgramUniform2uiv=CFunc<( program:UInt32, location:Int32, count:Int32, value:CPointer<UInt32>)->Unit>(openglProgramUniform2uiv)
    unsafe{glProgramUniform2uiv( program, location, count, value)}
    }
    func ProgramUniform3d( program:UInt32, location:Int32, v0:Float64, v1:Float64, v2:Float64):Unit
    { 
    let glProgramUniform3d=CFunc<( program:UInt32, location:Int32, v0:Float64, v1:Float64, v2:Float64)->Unit>(openglProgramUniform3d)
    unsafe{glProgramUniform3d( program, location, v0, v1, v2)}
    }
    func ProgramUniform3dv( program:UInt32, location:Int32, count:Int32, value:CPointer<Float64>):Unit
    { 
    let glProgramUniform3dv=CFunc<( program:UInt32, location:Int32, count:Int32, value:CPointer<Float64>)->Unit>(openglProgramUniform3dv)
    unsafe{glProgramUniform3dv( program, location, count, value)}
    }
    func ProgramUniform3f( program:UInt32, location:Int32, v0:Float32, v1:Float32, v2:Float32):Unit
    { 
    let glProgramUniform3f=CFunc<( program:UInt32, location:Int32, v0:Float32, v1:Float32, v2:Float32)->Unit>(openglProgramUniform3f)
    unsafe{glProgramUniform3f( program, location, v0, v1, v2)}
    }
    func ProgramUniform3fv( program:UInt32, location:Int32, count:Int32, value:CPointer<Float32>):Unit
    { 
    let glProgramUniform3fv=CFunc<( program:UInt32, location:Int32, count:Int32, value:CPointer<Float32>)->Unit>(openglProgramUniform3fv)
    unsafe{glProgramUniform3fv( program, location, count, value)}
    }
    func ProgramUniform3i( program:UInt32, location:Int32, v0:Int32, v1:Int32, v2:Int32):Unit
    { 
    let glProgramUniform3i=CFunc<( program:UInt32, location:Int32, v0:Int32, v1:Int32, v2:Int32)->Unit>(openglProgramUniform3i)
    unsafe{glProgramUniform3i( program, location, v0, v1, v2)}
    }
    func ProgramUniform3iv( program:UInt32, location:Int32, count:Int32, value:CPointer<Int32>):Unit
    { 
    let glProgramUniform3iv=CFunc<( program:UInt32, location:Int32, count:Int32, value:CPointer<Int32>)->Unit>(openglProgramUniform3iv)
    unsafe{glProgramUniform3iv( program, location, count, value)}
    }
    func ProgramUniform3ui( program:UInt32, location:Int32, v0:UInt32, v1:UInt32, v2:UInt32):Unit
    { 
    let glProgramUniform3ui=CFunc<( program:UInt32, location:Int32, v0:UInt32, v1:UInt32, v2:UInt32)->Unit>(openglProgramUniform3ui)
    unsafe{glProgramUniform3ui( program, location, v0, v1, v2)}
    }
    func ProgramUniform3uiv( program:UInt32, location:Int32, count:Int32, value:CPointer<UInt32>):Unit
    { 
    let glProgramUniform3uiv=CFunc<( program:UInt32, location:Int32, count:Int32, value:CPointer<UInt32>)->Unit>(openglProgramUniform3uiv)
    unsafe{glProgramUniform3uiv( program, location, count, value)}
    }
    func ProgramUniform4d( program:UInt32, location:Int32, v0:Float64, v1:Float64, v2:Float64, v3:Float64):Unit
    { 
    let glProgramUniform4d=CFunc<( program:UInt32, location:Int32, v0:Float64, v1:Float64, v2:Float64, v3:Float64)->Unit>(openglProgramUniform4d)
    unsafe{glProgramUniform4d( program, location, v0, v1, v2, v3)}
    }
    func ProgramUniform4dv( program:UInt32, location:Int32, count:Int32, value:CPointer<Float64>):Unit
    { 
    let glProgramUniform4dv=CFunc<( program:UInt32, location:Int32, count:Int32, value:CPointer<Float64>)->Unit>(openglProgramUniform4dv)
    unsafe{glProgramUniform4dv( program, location, count, value)}
    }
    func ProgramUniform4f( program:UInt32, location:Int32, v0:Float32, v1:Float32, v2:Float32, v3:Float32):Unit
    { 
    let glProgramUniform4f=CFunc<( program:UInt32, location:Int32, v0:Float32, v1:Float32, v2:Float32, v3:Float32)->Unit>(openglProgramUniform4f)
    unsafe{glProgramUniform4f( program, location, v0, v1, v2, v3)}
    }
    func ProgramUniform4fv( program:UInt32, location:Int32, count:Int32, value:CPointer<Float32>):Unit
    { 
    let glProgramUniform4fv=CFunc<( program:UInt32, location:Int32, count:Int32, value:CPointer<Float32>)->Unit>(openglProgramUniform4fv)
    unsafe{glProgramUniform4fv( program, location, count, value)}
    }
    func ProgramUniform4i( program:UInt32, location:Int32, v0:Int32, v1:Int32, v2:Int32, v3:Int32):Unit
    { 
    let glProgramUniform4i=CFunc<( program:UInt32, location:Int32, v0:Int32, v1:Int32, v2:Int32, v3:Int32)->Unit>(openglProgramUniform4i)
    unsafe{glProgramUniform4i( program, location, v0, v1, v2, v3)}
    }
    func ProgramUniform4iv( program:UInt32, location:Int32, count:Int32, value:CPointer<Int32>):Unit
    { 
    let glProgramUniform4iv=CFunc<( program:UInt32, location:Int32, count:Int32, value:CPointer<Int32>)->Unit>(openglProgramUniform4iv)
    unsafe{glProgramUniform4iv( program, location, count, value)}
    }
    func ProgramUniform4ui( program:UInt32, location:Int32, v0:UInt32, v1:UInt32, v2:UInt32, v3:UInt32):Unit
    { 
    let glProgramUniform4ui=CFunc<( program:UInt32, location:Int32, v0:UInt32, v1:UInt32, v2:UInt32, v3:UInt32)->Unit>(openglProgramUniform4ui)
    unsafe{glProgramUniform4ui( program, location, v0, v1, v2, v3)}
    }
    func ProgramUniform4uiv( program:UInt32, location:Int32, count:Int32, value:CPointer<UInt32>):Unit
    { 
    let glProgramUniform4uiv=CFunc<( program:UInt32, location:Int32, count:Int32, value:CPointer<UInt32>)->Unit>(openglProgramUniform4uiv)
    unsafe{glProgramUniform4uiv( program, location, count, value)}
    }
    func ProgramUniformMatrix2dv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glProgramUniformMatrix2dv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglProgramUniformMatrix2dv)
    unsafe{glProgramUniformMatrix2dv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix2fv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glProgramUniformMatrix2fv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglProgramUniformMatrix2fv)
    unsafe{glProgramUniformMatrix2fv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix2x3dv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glProgramUniformMatrix2x3dv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglProgramUniformMatrix2x3dv)
    unsafe{glProgramUniformMatrix2x3dv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix2x3fv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glProgramUniformMatrix2x3fv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglProgramUniformMatrix2x3fv)
    unsafe{glProgramUniformMatrix2x3fv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix2x4dv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glProgramUniformMatrix2x4dv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglProgramUniformMatrix2x4dv)
    unsafe{glProgramUniformMatrix2x4dv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix2x4fv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glProgramUniformMatrix2x4fv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglProgramUniformMatrix2x4fv)
    unsafe{glProgramUniformMatrix2x4fv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix3dv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glProgramUniformMatrix3dv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglProgramUniformMatrix3dv)
    unsafe{glProgramUniformMatrix3dv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix3fv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glProgramUniformMatrix3fv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglProgramUniformMatrix3fv)
    unsafe{glProgramUniformMatrix3fv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix3x2dv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glProgramUniformMatrix3x2dv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglProgramUniformMatrix3x2dv)
    unsafe{glProgramUniformMatrix3x2dv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix3x2fv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glProgramUniformMatrix3x2fv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglProgramUniformMatrix3x2fv)
    unsafe{glProgramUniformMatrix3x2fv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix3x4dv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glProgramUniformMatrix3x4dv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglProgramUniformMatrix3x4dv)
    unsafe{glProgramUniformMatrix3x4dv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix3x4fv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glProgramUniformMatrix3x4fv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglProgramUniformMatrix3x4fv)
    unsafe{glProgramUniformMatrix3x4fv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix4dv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glProgramUniformMatrix4dv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglProgramUniformMatrix4dv)
    unsafe{glProgramUniformMatrix4dv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix4fv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glProgramUniformMatrix4fv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglProgramUniformMatrix4fv)
    unsafe{glProgramUniformMatrix4fv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix4x2dv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glProgramUniformMatrix4x2dv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglProgramUniformMatrix4x2dv)
    unsafe{glProgramUniformMatrix4x2dv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix4x2fv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glProgramUniformMatrix4x2fv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglProgramUniformMatrix4x2fv)
    unsafe{glProgramUniformMatrix4x2fv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix4x3dv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glProgramUniformMatrix4x3dv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglProgramUniformMatrix4x3dv)
    unsafe{glProgramUniformMatrix4x3dv( program, location, count, transpose, value)}
    }
    func ProgramUniformMatrix4x3fv( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glProgramUniformMatrix4x3fv=CFunc<( program:UInt32, location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglProgramUniformMatrix4x3fv)
    unsafe{glProgramUniformMatrix4x3fv( program, location, count, transpose, value)}
    }
    func ProvokingVertex( mode:UInt32):Unit
    { 
    let glProvokingVertex=CFunc<( mode:UInt32)->Unit>(openglProvokingVertex)
    unsafe{glProvokingVertex( mode)}
    }
    func PushDebugGroup( source:UInt32, id:UInt32, length:Int32, message:CString):Unit
    { 
    let glPushDebugGroup=CFunc<( source:UInt32, id:UInt32, length:Int32, message:CString)->Unit>(openglPushDebugGroup)
    unsafe{glPushDebugGroup( source, id, length, message)}
    }
    func QueryCounter( id:UInt32, target:UInt32):Unit
    { 
    let glQueryCounter=CFunc<( id:UInt32, target:UInt32)->Unit>(openglQueryCounter)
    unsafe{glQueryCounter( id, target)}
    }
    func ReadBuffer( src:UInt32):Unit
    { 
    let glReadBuffer=CFunc<( src:UInt32)->Unit>(openglReadBuffer)
    unsafe{glReadBuffer( src)}
    }
    func ReadPixels( x:Int32, y:Int32, width:Int32, height:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>):Unit
    { 
    let glReadPixels=CFunc<( x:Int32, y:Int32, width:Int32, height:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>)->Unit>(openglReadPixels)
    unsafe{glReadPixels( x, y, width, height, format,ttype, pixels)}
    }
    func ReadnPixels( x:Int32, y:Int32, width:Int32, height:Int32, format:UInt32,ttype:UInt32, bufSize:Int32, data:CPointer<Unit>):Unit
    { 
    let glReadnPixels=CFunc<( x:Int32, y:Int32, width:Int32, height:Int32, format:UInt32,ttype:UInt32, bufSize:Int32, data:CPointer<Unit>)->Unit>(openglReadnPixels)
    unsafe{glReadnPixels( x, y, width, height, format,ttype, bufSize, data)}
    }
    func ReleaseShaderCompiler():Unit
    {
    let glReleaseShaderCompiler=CFunc<()->Unit>(openglReleaseShaderCompiler) 
    unsafe{glReleaseShaderCompiler()}
    }
    func RenderbufferStorage( target:UInt32, internalformat:UInt32, width:Int32, height:Int32):Unit
    { 
    let glRenderbufferStorage=CFunc<( target:UInt32, internalformat:UInt32, width:Int32, height:Int32)->Unit>(openglRenderbufferStorage)
    unsafe{glRenderbufferStorage( target, internalformat, width, height)}
    }
    func RenderbufferStorageMultisample( target:UInt32, samples:Int32, internalformat:UInt32, width:Int32, height:Int32):Unit
    { 
    let glRenderbufferStorageMultisample=CFunc<( target:UInt32, samples:Int32, internalformat:UInt32, width:Int32, height:Int32)->Unit>(openglRenderbufferStorageMultisample)
    unsafe{glRenderbufferStorageMultisample( target, samples, internalformat, width, height)}
    }
    func ResumeTransformFeedback():Unit
    {
    let glResumeTransformFeedback=CFunc<()->Unit>(openglResumeTransformFeedback) 
    unsafe{glResumeTransformFeedback()}
    }
    func SampleCoverage( value:Float32, invert:UInt8):Unit
    { 
    let glSampleCoverage=CFunc<( value:Float32, invert:UInt8)->Unit>(openglSampleCoverage)
    unsafe{glSampleCoverage( value, invert)}
    }
    func SampleMaski( maskNumber:UInt32, mask:UInt32):Unit
    { 
    let glSampleMaski=CFunc<( maskNumber:UInt32, mask:UInt32)->Unit>(openglSampleMaski)
    unsafe{glSampleMaski( maskNumber, mask)}
    }
    func SamplerParameterIiv( sampler:UInt32, pname:UInt32, param:CPointer<Int32>):Unit
    { 
    let glSamplerParameterIiv=CFunc<( sampler:UInt32, pname:UInt32, param:CPointer<Int32>)->Unit>(openglSamplerParameterIiv)
    unsafe{glSamplerParameterIiv( sampler, pname, param)}
    }
    func SamplerParameterIuiv( sampler:UInt32, pname:UInt32, param:CPointer<UInt32>):Unit
    { 
    let glSamplerParameterIuiv=CFunc<( sampler:UInt32, pname:UInt32, param:CPointer<UInt32>)->Unit>(openglSamplerParameterIuiv)
    unsafe{glSamplerParameterIuiv( sampler, pname, param)}
    }
    func SamplerParameterf( sampler:UInt32, pname:UInt32, param:Float32):Unit
    { 
    let glSamplerParameterf=CFunc<( sampler:UInt32, pname:UInt32, param:Float32)->Unit>(openglSamplerParameterf)
    unsafe{glSamplerParameterf( sampler, pname, param)}
    }
    func SamplerParameterfv( sampler:UInt32, pname:UInt32, param:CPointer<Float32>):Unit
    { 
    let glSamplerParameterfv=CFunc<( sampler:UInt32, pname:UInt32, param:CPointer<Float32>)->Unit>(openglSamplerParameterfv)
    unsafe{glSamplerParameterfv( sampler, pname, param)}
    }
    func SamplerParameteri( sampler:UInt32, pname:UInt32, param:Int32):Unit
    { 
    let glSamplerParameteri=CFunc<( sampler:UInt32, pname:UInt32, param:Int32)->Unit>(openglSamplerParameteri)
    unsafe{glSamplerParameteri( sampler, pname, param)}
    }
    func SamplerParameteriv( sampler:UInt32, pname:UInt32, param:CPointer<Int32>):Unit
    { 
    let glSamplerParameteriv=CFunc<( sampler:UInt32, pname:UInt32, param:CPointer<Int32>)->Unit>(openglSamplerParameteriv)
    unsafe{glSamplerParameteriv( sampler, pname, param)}
    }
    func Scissor( x:Int32, y:Int32, width:Int32, height:Int32):Unit
    { 
    let glScissor=CFunc<( x:Int32, y:Int32, width:Int32, height:Int32)->Unit>(openglScissor)
    unsafe{glScissor( x, y, width, height)}
    }
    func ScissorArrayv( first:UInt32, count:Int32, v:CPointer<Int32>):Unit
    { 
    let glScissorArrayv=CFunc<( first:UInt32, count:Int32, v:CPointer<Int32>)->Unit>(openglScissorArrayv)
    unsafe{glScissorArrayv( first, count, v)}
    }
    func ScissorIndexed( index:UInt32, left:Int32, bottom:Int32, width:Int32, height:Int32):Unit
    { 
    let glScissorIndexed=CFunc<( index:UInt32, left:Int32, bottom:Int32, width:Int32, height:Int32)->Unit>(openglScissorIndexed)
    unsafe{glScissorIndexed( index, left, bottom, width, height)}
    }
    func ScissorIndexedv( index:UInt32, v:CPointer<Int32>):Unit
    { 
    let glScissorIndexedv=CFunc<( index:UInt32, v:CPointer<Int32>)->Unit>(openglScissorIndexedv)
    unsafe{glScissorIndexedv( index, v)}
    }
    func ShaderBinary( count:Int32, shaders:CPointer<UInt32>, binaryFormat:UInt32, binary:CPointer<Unit>, length:Int32):Unit
    { 
    let glShaderBinary=CFunc<( count:Int32, shaders:CPointer<UInt32>, binaryFormat:UInt32, binary:CPointer<Unit>, length:Int32)->Unit>(openglShaderBinary)
    unsafe{glShaderBinary( count, shaders, binaryFormat, binary, length)}
    }
    func ShaderSource( shader:UInt32, count:Int32, string:CPointer<UInt8>, length:CPointer<Int32>):Unit
    { 
    let glShaderSource=CFunc<( shader:UInt32, count:Int32, string:CPointer<UInt8>, length:CPointer<Int32>)->Unit>(openglShaderSource)
    unsafe{glShaderSource( shader, count, string, length)}
    }
    func ShaderStorageBlockBinding( program:UInt32, storageBlockIndex:UInt32, storageBlockBinding:UInt32):Unit
    { 
    let glShaderStorageBlockBinding=CFunc<( program:UInt32, storageBlockIndex:UInt32, storageBlockBinding:UInt32)->Unit>(openglShaderStorageBlockBinding)
    unsafe{glShaderStorageBlockBinding( program, storageBlockIndex, storageBlockBinding)}
    }
    func SpecializeShader( shader:UInt32, pEntryPoint:CString, numSpecializationConstants:UInt32, pConstantIndex:CPointer<UInt32>, pConstantValue:CPointer<UInt32>):Unit
    { 
    let glSpecializeShader=CFunc<( shader:UInt32, pEntryPoint:CString, numSpecializationConstants:UInt32, pConstantIndex:CPointer<UInt32>, pConstantValue:CPointer<UInt32>)->Unit>(openglSpecializeShader)
    unsafe{glSpecializeShader( shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue)}
    }
    func StencilFunc( ffunc:UInt32, ref:Int32, mask:UInt32):Unit
    { 
    let glStencilFunc=CFunc<( ffunc:UInt32, ref:Int32, mask:UInt32)->Unit>(openglStencilFunc)
    unsafe{glStencilFunc( ffunc, ref, mask)}
    }
    func StencilFuncSeparate( face:UInt32, ffunc:UInt32, ref:Int32, mask:UInt32):Unit
    { 
    let glStencilFuncSeparate=CFunc<(face:UInt32,ffunc:UInt32,ref:Int32,mask:UInt32)->Unit>(openglStencilFuncSeparate)
    unsafe{glStencilFuncSeparate( face, ffunc, ref, mask)}
    }
    func StencilMask( mask:UInt32):Unit
    { 
    let glStencilMask=CFunc<( mask:UInt32)->Unit>(openglStencilMask)
    unsafe{glStencilMask( mask)}
    }
    func StencilMaskSeparate( face:UInt32, mask:UInt32):Unit
    { 
    let glStencilMaskSeparate=CFunc<( face:UInt32, mask:UInt32)->Unit>(openglStencilMaskSeparate)
    unsafe{glStencilMaskSeparate( face, mask)}
    }
    func StencilOp( fail:UInt32, zfail:UInt32, zpass:UInt32):Unit
    { 
    let glStencilOp=CFunc<( fail:UInt32, zfail:UInt32, zpass:UInt32)->Unit>(openglStencilOp)
    unsafe{glStencilOp( fail, zfail, zpass)}
    }
    func StencilOpSeparate( face:UInt32, sfail:UInt32, dpfail:UInt32, dppass:UInt32):Unit
    { 
    let glStencilOpSeparate=CFunc<( face:UInt32, sfail:UInt32, dpfail:UInt32, dppass:UInt32)->Unit>(openglStencilOpSeparate)
    unsafe{glStencilOpSeparate( face, sfail, dpfail, dppass)}
    }
    func TexBuffer( target:UInt32, internalformat:UInt32, buffer:UInt32):Unit
    { 
    let glTexBuffer=CFunc<( target:UInt32, internalformat:UInt32, buffer:UInt32)->Unit>(openglTexBuffer)
    unsafe{glTexBuffer( target, internalformat, buffer)}
    }
    func TexBufferRange( target:UInt32, internalformat:UInt32, buffer:UInt32, offset:Int64, size:Int64):Unit
    { 
    let glTexBufferRange=CFunc<( target:UInt32, internalformat:UInt32, buffer:UInt32, offset:Int64, size:Int64)->Unit>(openglTexBufferRange)
    unsafe{glTexBufferRange( target, internalformat, buffer, offset, size)}
    }
    func TexImage1D( target:UInt32, level:Int32, internalformat:Int32, width:Int32, border:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>):Unit
    { 
    let glTexImage1D=CFunc<( target:UInt32, level:Int32, internalformat:Int32, width:Int32, border:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>)->Unit>(openglTexImage1D)
    unsafe{glTexImage1D( target, level, internalformat, width, border, format,ttype, pixels)}
    }
    func TexImage2D( target:UInt32, level:Int32, internalformat:Int32, width:Int32, height:Int32, border:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>):Unit
    { 
    let glTexImage2D=CFunc<( target:UInt32, level:Int32, internalformat:Int32, width:Int32, height:Int32, border:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>)->Unit>(openglTexImage2D)
    unsafe{glTexImage2D( target, level, internalformat, width, height, border, format,ttype, pixels)}
    }
    func TexImage2DMultisample( target:UInt32, samples:Int32, internalformat:UInt32, width:Int32, height:Int32, fixedsamplelocations:UInt8):Unit
    { 
    let glTexImage2DMultisample=CFunc<( target:UInt32, samples:Int32, internalformat:UInt32, width:Int32, height:Int32, fixedsamplelocations:UInt8)->Unit>(openglTexImage2DMultisample)
    unsafe{glTexImage2DMultisample( target, samples, internalformat, width, height, fixedsamplelocations)}
    }
    func TexImage3D( target:UInt32, level:Int32, internalformat:Int32, width:Int32, height:Int32, depth:Int32, border:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>):Unit
    { 
    let glTexImage3D=CFunc<( target:UInt32, level:Int32, internalformat:Int32, width:Int32, height:Int32, depth:Int32, border:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>)->Unit>(openglTexImage3D)
    unsafe{glTexImage3D( target, level, internalformat, width, height, depth, border, format,ttype, pixels)}
    }
    func TexImage3DMultisample( target:UInt32, samples:Int32, internalformat:UInt32, width:Int32, height:Int32, depth:Int32, fixedsamplelocations:UInt8):Unit
    { 
    let glTexImage3DMultisample=CFunc<( target:UInt32, samples:Int32, internalformat:UInt32, width:Int32, height:Int32, depth:Int32, fixedsamplelocations:UInt8)->Unit>(openglTexImage3DMultisample)
    unsafe{glTexImage3DMultisample( target, samples, internalformat, width, height, depth, fixedsamplelocations)}
    }
    func TexParameterIiv( target:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glTexParameterIiv=CFunc<( target:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglTexParameterIiv)
    unsafe{glTexParameterIiv( target, pname, params)}
    }
    func TexParameterIuiv( target:UInt32, pname:UInt32, params:CPointer<UInt32>):Unit
    { 
    let glTexParameterIuiv=CFunc<( target:UInt32, pname:UInt32, params:CPointer<UInt32>)->Unit>(openglTexParameterIuiv)
    unsafe{glTexParameterIuiv( target, pname, params)}
    }
    func TexParameterf( target:UInt32, pname:UInt32, param:Float32):Unit
    { 
    let glTexParameterf=CFunc<( target:UInt32, pname:UInt32, param:Float32)->Unit>(openglTexParameterf)
    unsafe{glTexParameterf( target, pname, param)}
    }
    func TexParameterfv( target:UInt32, pname:UInt32, params:CPointer<Float32>):Unit
    { 
    let glTexParameterfv=CFunc<( target:UInt32, pname:UInt32, params:CPointer<Float32>)->Unit>(openglTexParameterfv)
    unsafe{glTexParameterfv( target, pname, params)}
    }
    func TexParameteri( target:UInt32, pname:UInt32, param:Int32):Unit
    { 
    let glTexParameteri=CFunc<( target:UInt32, pname:UInt32, param:Int32)->Unit>(openglTexParameteri)
    unsafe{glTexParameteri( target, pname, param)}
    }
    func TexParameteriv( target:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glTexParameteriv=CFunc<( target:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglTexParameteriv)
    unsafe{glTexParameteriv( target, pname, params)}
    }
    func TexStorage1D( target:UInt32, levels:Int32, internalformat:UInt32, width:Int32):Unit
    { 
    let glTexStorage1D=CFunc<( target:UInt32, levels:Int32, internalformat:UInt32, width:Int32)->Unit>(openglTexStorage1D)
    unsafe{glTexStorage1D( target, levels, internalformat, width)}
    }
    func TexStorage2D( target:UInt32, levels:Int32, internalformat:UInt32, width:Int32, height:Int32):Unit
    { 
    let glTexStorage2D=CFunc<( target:UInt32, levels:Int32, internalformat:UInt32, width:Int32, height:Int32)->Unit>(openglTexStorage2D)
    unsafe{glTexStorage2D( target, levels, internalformat, width, height)}
    }
    func TexStorage2DMultisample( target:UInt32, samples:Int32, internalformat:UInt32, width:Int32, height:Int32, fixedsamplelocations:UInt8):Unit
    { 
    let glTexStorage2DMultisample=CFunc<( target:UInt32, samples:Int32, internalformat:UInt32, width:Int32, height:Int32, fixedsamplelocations:UInt8)->Unit>(openglTexStorage2DMultisample)
    unsafe{glTexStorage2DMultisample( target, samples, internalformat, width, height, fixedsamplelocations)}
    }
    func TexStorage3D( target:UInt32, levels:Int32, internalformat:UInt32, width:Int32, height:Int32, depth:Int32):Unit
    { 
    let glTexStorage3D=CFunc<( target:UInt32, levels:Int32, internalformat:UInt32, width:Int32, height:Int32, depth:Int32)->Unit>(openglTexStorage3D)
    unsafe{glTexStorage3D( target, levels, internalformat, width, height, depth)}
    }
    func TexStorage3DMultisample( target:UInt32, samples:Int32, internalformat:UInt32, width:Int32, height:Int32, depth:Int32, fixedsamplelocations:UInt8):Unit
    { 
    let glTexStorage3DMultisample=CFunc<( target:UInt32, samples:Int32, internalformat:UInt32, width:Int32, height:Int32, depth:Int32, fixedsamplelocations:UInt8)->Unit>(openglTexStorage3DMultisample)
    unsafe{glTexStorage3DMultisample( target, samples, internalformat, width, height, depth, fixedsamplelocations)}
    }
    func TexSubImage1D( target:UInt32, level:Int32, xoffset:Int32, width:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>):Unit
    { 
    let glTexSubImage1D=CFunc<( target:UInt32, level:Int32, xoffset:Int32, width:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>)->Unit>(openglTexSubImage1D)
    unsafe{glTexSubImage1D( target, level, xoffset, width, format,ttype, pixels)}
    }
    func TexSubImage2D( target:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, width:Int32, height:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>):Unit
    { 
    let glTexSubImage2D=CFunc<( target:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, width:Int32, height:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>)->Unit>(openglTexSubImage2D)
    unsafe{glTexSubImage2D( target, level, xoffset, yoffset, width, height, format,ttype, pixels)}
    }
    func TexSubImage3D( target:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, width:Int32, height:Int32, depth:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>):Unit
    { 
    let glTexSubImage3D=CFunc<( target:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, width:Int32, height:Int32, depth:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>)->Unit>(openglTexSubImage3D)
    unsafe{glTexSubImage3D( target, level, xoffset, yoffset, zoffset, width, height, depth, format,ttype, pixels)}
    }
    func TextureBarrier():Unit
    {
    let glTextureBarrier=CFunc<()->Unit>(openglTextureBarrier) 
    unsafe{glTextureBarrier()}
    }
    func TextureBuffer( texture:UInt32, internalformat:UInt32, buffer:UInt32):Unit
    { 
    let glTextureBuffer=CFunc<( texture:UInt32, internalformat:UInt32, buffer:UInt32)->Unit>(openglTextureBuffer)
    unsafe{glTextureBuffer( texture, internalformat, buffer)}
    }
    func TextureBufferRange( texture:UInt32, internalformat:UInt32, buffer:UInt32, offset:Int64, size:Int64):Unit
    { 
    let glTextureBufferRange=CFunc<( texture:UInt32, internalformat:UInt32, buffer:UInt32, offset:Int64, size:Int64)->Unit>(openglTextureBufferRange)
    unsafe{glTextureBufferRange( texture, internalformat, buffer, offset, size)}
    }
    func TextureParameterIiv( texture:UInt32, pname:UInt32, params:CPointer<Int32>):Unit
    { 
    let glTextureParameterIiv=CFunc<( texture:UInt32, pname:UInt32, params:CPointer<Int32>)->Unit>(openglTextureParameterIiv)
    unsafe{glTextureParameterIiv( texture, pname, params)}
    }
    func TextureParameterIuiv( texture:UInt32, pname:UInt32, params:CPointer<UInt32>):Unit
    { 
    let glTextureParameterIuiv=CFunc<( texture:UInt32, pname:UInt32, params:CPointer<UInt32>)->Unit>(openglTextureParameterIuiv)
    unsafe{glTextureParameterIuiv( texture, pname, params)}
    }
    func TextureParameterf( texture:UInt32, pname:UInt32, param:Float32):Unit
    { 
    let glTextureParameterf=CFunc<( texture:UInt32, pname:UInt32, param:Float32)->Unit>(openglTextureParameterf)
    unsafe{glTextureParameterf( texture, pname, param)}
    }
    func TextureParameterfv( texture:UInt32, pname:UInt32, param:CPointer<Float32>):Unit
    { 
    let glTextureParameterfv=CFunc<( texture:UInt32, pname:UInt32, param:CPointer<Float32>)->Unit>(openglTextureParameterfv)
    unsafe{glTextureParameterfv( texture, pname, param)}
    }
    func TextureParameteri( texture:UInt32, pname:UInt32, param:Int32):Unit
    { 
    let glTextureParameteri=CFunc<( texture:UInt32, pname:UInt32, param:Int32)->Unit>(openglTextureParameteri)
    unsafe{glTextureParameteri( texture, pname, param)}
    }
    func TextureParameteriv( texture:UInt32, pname:UInt32, param:CPointer<Int32>):Unit
    { 
    let glTextureParameteriv=CFunc<( texture:UInt32, pname:UInt32, param:CPointer<Int32>)->Unit>(openglTextureParameteriv)
    unsafe{glTextureParameteriv( texture, pname, param)}
    }
    func TextureStorage1D( texture:UInt32, levels:Int32, internalformat:UInt32, width:Int32):Unit
    { 
    let glTextureStorage1D=CFunc<( texture:UInt32, levels:Int32, internalformat:UInt32, width:Int32)->Unit>(openglTextureStorage1D)
    unsafe{glTextureStorage1D( texture, levels, internalformat, width)}
    }
    func TextureStorage2D( texture:UInt32, levels:Int32, internalformat:UInt32, width:Int32, height:Int32):Unit
    { 
    let glTextureStorage2D=CFunc<( texture:UInt32, levels:Int32, internalformat:UInt32, width:Int32, height:Int32)->Unit>(openglTextureStorage2D)
    unsafe{glTextureStorage2D( texture, levels, internalformat, width, height)}
    }
    func TextureStorage2DMultisample( texture:UInt32, samples:Int32, internalformat:UInt32, width:Int32, height:Int32, fixedsamplelocations:UInt8):Unit
    { 
    let glTextureStorage2DMultisample=CFunc<( texture:UInt32, samples:Int32, internalformat:UInt32, width:Int32, height:Int32, fixedsamplelocations:UInt8)->Unit>(openglTextureStorage2DMultisample)
    unsafe{glTextureStorage2DMultisample( texture, samples, internalformat, width, height, fixedsamplelocations)}
    }
    func TextureStorage3D( texture:UInt32, levels:Int32, internalformat:UInt32, width:Int32, height:Int32, depth:Int32):Unit
    { 
    let glTextureStorage3D=CFunc<( texture:UInt32, levels:Int32, internalformat:UInt32, width:Int32, height:Int32, depth:Int32)->Unit>(openglTextureStorage3D)
    unsafe{glTextureStorage3D( texture, levels, internalformat, width, height, depth)}
    }
    func TextureStorage3DMultisample( texture:UInt32, samples:Int32, internalformat:UInt32, width:Int32, height:Int32, depth:Int32, fixedsamplelocations:UInt8):Unit
    { 
    let glTextureStorage3DMultisample=CFunc<( texture:UInt32, samples:Int32, internalformat:UInt32, width:Int32, height:Int32, depth:Int32, fixedsamplelocations:UInt8)->Unit>(openglTextureStorage3DMultisample)
    unsafe{glTextureStorage3DMultisample( texture, samples, internalformat, width, height, depth, fixedsamplelocations)}
    }
    func TextureSubImage1D( texture:UInt32, level:Int32, xoffset:Int32, width:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>):Unit
    { 
    let glTextureSubImage1D=CFunc<( texture:UInt32, level:Int32, xoffset:Int32, width:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>)->Unit>(openglTextureSubImage1D)
    unsafe{glTextureSubImage1D( texture, level, xoffset, width, format,ttype, pixels)}
    }
    func TextureSubImage2D( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, width:Int32, height:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>):Unit
    { 
    let glTextureSubImage2D=CFunc<( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, width:Int32, height:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>)->Unit>(openglTextureSubImage2D)
    unsafe{glTextureSubImage2D( texture, level, xoffset, yoffset, width, height, format,ttype, pixels)}
    }
    func TextureSubImage3D( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, width:Int32, height:Int32, depth:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>):Unit
    { 
    let glTextureSubImage3D=CFunc<( texture:UInt32, level:Int32, xoffset:Int32, yoffset:Int32, zoffset:Int32, width:Int32, height:Int32, depth:Int32, format:UInt32,ttype:UInt32, pixels:CPointer<Unit>)->Unit>(openglTextureSubImage3D)
    unsafe{glTextureSubImage3D( texture, level, xoffset, yoffset, zoffset, width, height, depth, format,ttype, pixels)}
    }
    func TextureView( texture:UInt32, target:UInt32, origtexture:UInt32, internalformat:UInt32, minlevel:UInt32, numlevels:UInt32, minlayer:UInt32, numlayers:UInt32):Unit
    { 
    let glTextureView=CFunc<( texture:UInt32, target:UInt32, origtexture:UInt32, internalformat:UInt32, minlevel:UInt32, numlevels:UInt32, minlayer:UInt32, numlayers:UInt32)->Unit>(openglTextureView)
    unsafe{glTextureView( texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers)}
    }
    func TransformFeedbackBufferBase( xfb:UInt32, index:UInt32, buffer:UInt32):Unit
    { 
    let glTransformFeedbackBufferBase=CFunc<( xfb:UInt32, index:UInt32, buffer:UInt32)->Unit>(openglTransformFeedbackBufferBase)
    unsafe{glTransformFeedbackBufferBase( xfb, index, buffer)}
    }
    func TransformFeedbackBufferRange( xfb:UInt32, index:UInt32, buffer:UInt32, offset:Int64, size:Int64):Unit
    { 
    let glTransformFeedbackBufferRange=CFunc<( xfb:UInt32, index:UInt32, buffer:UInt32, offset:Int64, size:Int64)->Unit>(openglTransformFeedbackBufferRange)
    unsafe{glTransformFeedbackBufferRange( xfb, index, buffer, offset, size)}
    }
    func TransformFeedbackVaryings( program:UInt32, count:Int32, varyings:CPointer<UInt8>, bufferMode:UInt32):Unit
    { 
    let glTransformFeedbackVaryings=CFunc<( program:UInt32, count:Int32, varyings:CPointer<UInt8>, bufferMode:UInt32)->Unit>(openglTransformFeedbackVaryings)
    unsafe{glTransformFeedbackVaryings( program, count, varyings, bufferMode)}
    }
    func Uniform1d( location:Int32, x:Float64):Unit
    { 
    let glUniform1d=CFunc<( location:Int32, x:Float64)->Unit>(openglUniform1d)
    unsafe{glUniform1d( location, x)}
    }
    func Uniform1dv( location:Int32, count:Int32, value:CPointer<Float64>):Unit
    { 
    let glUniform1dv=CFunc<( location:Int32, count:Int32, value:CPointer<Float64>)->Unit>(openglUniform1dv)
    unsafe{glUniform1dv( location, count, value)}
    }
    func Uniform1f( location:Int32, v0:Float32):Unit
    { 
    let glUniform1f=CFunc<( location:Int32, v0:Float32)->Unit>(openglUniform1f)
    unsafe{glUniform1f( location, v0)}
    }
    func Uniform1fv( location:Int32, count:Int32, value:CPointer<Float32>):Unit
    { 
    let glUniform1fv=CFunc<( location:Int32, count:Int32, value:CPointer<Float32>)->Unit>(openglUniform1fv)
    unsafe{glUniform1fv( location, count, value)}
    }
    func Uniform1i( location:Int32, v0:Int32):Unit
    { 
    let glUniform1i=CFunc<( location:Int32, v0:Int32)->Unit>(openglUniform1i)
    unsafe{glUniform1i( location, v0)}
    }
    func Uniform1iv( location:Int32, count:Int32, value:CPointer<Int32>):Unit
    { 
    let glUniform1iv=CFunc<( location:Int32, count:Int32, value:CPointer<Int32>)->Unit>(openglUniform1iv)
    unsafe{glUniform1iv( location, count, value)}
    }
    func Uniform1ui( location:Int32, v0:UInt32):Unit
    { 
    let glUniform1ui=CFunc<( location:Int32, v0:UInt32)->Unit>(openglUniform1ui)
    unsafe{glUniform1ui( location, v0)}
    }
    func Uniform1uiv( location:Int32, count:Int32, value:CPointer<UInt32>):Unit
    { 
    let glUniform1uiv=CFunc<( location:Int32, count:Int32, value:CPointer<UInt32>)->Unit>(openglUniform1uiv)
    unsafe{glUniform1uiv( location, count, value)}
    }
    func Uniform2d( location:Int32, x:Float64, y:Float64):Unit
    { 
    let glUniform2d=CFunc<( location:Int32, x:Float64, y:Float64)->Unit>(openglUniform2d)
    unsafe{glUniform2d( location, x, y)}
    }
    func Uniform2dv( location:Int32, count:Int32, value:CPointer<Float64>):Unit
    { 
    let glUniform2dv=CFunc<( location:Int32, count:Int32, value:CPointer<Float64>)->Unit>(openglUniform2dv)
    unsafe{glUniform2dv( location, count, value)}
    }
    func Uniform2f( location:Int32, v0:Float32, v1:Float32):Unit
    { 
    let glUniform2f=CFunc<( location:Int32, v0:Float32, v1:Float32)->Unit>(openglUniform2f)
    unsafe{glUniform2f( location, v0, v1)}
    }
    func Uniform2fv( location:Int32, count:Int32, value:CPointer<Float32>):Unit
    { 
    let glUniform2fv=CFunc<( location:Int32, count:Int32, value:CPointer<Float32>)->Unit>(openglUniform2fv)
    unsafe{glUniform2fv( location, count, value)}
    }
    func Uniform2i( location:Int32, v0:Int32, v1:Int32):Unit
    { 
    let glUniform2i=CFunc<( location:Int32, v0:Int32, v1:Int32)->Unit>(openglUniform2i)
    unsafe{glUniform2i( location, v0, v1)}
    }
    func Uniform2iv( location:Int32, count:Int32, value:CPointer<Int32>):Unit
    { 
    let glUniform2iv=CFunc<( location:Int32, count:Int32, value:CPointer<Int32>)->Unit>(openglUniform2iv)
    unsafe{glUniform2iv( location, count, value)}
    }
    func Uniform2ui( location:Int32, v0:UInt32, v1:UInt32):Unit
    { 
    let glUniform2ui=CFunc<( location:Int32, v0:UInt32, v1:UInt32)->Unit>(openglUniform2ui)
    unsafe{glUniform2ui( location, v0, v1)}
    }
    func Uniform2uiv( location:Int32, count:Int32, value:CPointer<UInt32>):Unit
    { 
    let glUniform2uiv=CFunc<( location:Int32, count:Int32, value:CPointer<UInt32>)->Unit>(openglUniform2uiv)
    unsafe{glUniform2uiv( location, count, value)}
    }
    func Uniform3d( location:Int32, x:Float64, y:Float64, z:Float64):Unit
    { 
    let glUniform3d=CFunc<( location:Int32, x:Float64, y:Float64, z:Float64)->Unit>(openglUniform3d)
    unsafe{glUniform3d( location, x, y, z)}
    }
    func Uniform3dv( location:Int32, count:Int32, value:CPointer<Float64>):Unit
    { 
    let glUniform3dv=CFunc<( location:Int32, count:Int32, value:CPointer<Float64>)->Unit>(openglUniform3dv)
    unsafe{glUniform3dv( location, count, value)}
    }
    func Uniform3f( location:Int32, v0:Float32, v1:Float32, v2:Float32):Unit
    { 
    let glUniform3f=CFunc<( location:Int32, v0:Float32, v1:Float32, v2:Float32)->Unit>(openglUniform3f)
    unsafe{glUniform3f( location, v0, v1, v2)}
    }
    func Uniform3fv( location:Int32, count:Int32, value:CPointer<Float32>):Unit
    { 
    let glUniform3fv=CFunc<( location:Int32, count:Int32, value:CPointer<Float32>)->Unit>(openglUniform3fv)
    unsafe{glUniform3fv( location, count, value)}
    }
    func Uniform3i( location:Int32, v0:Int32, v1:Int32, v2:Int32):Unit
    { 
    let glUniform3i=CFunc<( location:Int32, v0:Int32, v1:Int32, v2:Int32)->Unit>(openglUniform3i)
    unsafe{glUniform3i( location, v0, v1, v2)}
    }
    func Uniform3iv( location:Int32, count:Int32, value:CPointer<Int32>):Unit
    { 
    let glUniform3iv=CFunc<( location:Int32, count:Int32, value:CPointer<Int32>)->Unit>(openglUniform3iv)
    unsafe{glUniform3iv( location, count, value)}
    }
    func Uniform3ui( location:Int32, v0:UInt32, v1:UInt32, v2:UInt32):Unit
    { 
    let glUniform3ui=CFunc<( location:Int32, v0:UInt32, v1:UInt32, v2:UInt32)->Unit>(openglUniform3ui)
    unsafe{glUniform3ui( location, v0, v1, v2)}
    }
    func Uniform3uiv( location:Int32, count:Int32, value:CPointer<UInt32>):Unit
    { 
    let glUniform3uiv=CFunc<( location:Int32, count:Int32, value:CPointer<UInt32>)->Unit>(openglUniform3uiv)
    unsafe{glUniform3uiv( location, count, value)}
    }
    func Uniform4d( location:Int32, x:Float64, y:Float64, z:Float64, w:Float64):Unit
    { 
    let glUniform4d=CFunc<( location:Int32, x:Float64, y:Float64, z:Float64, w:Float64)->Unit>(openglUniform4d)
    unsafe{glUniform4d( location, x, y, z, w)}
    }
    func Uniform4dv( location:Int32, count:Int32, value:CPointer<Float64>):Unit
    { 
    let glUniform4dv=CFunc<( location:Int32, count:Int32, value:CPointer<Float64>)->Unit>(openglUniform4dv)
    unsafe{glUniform4dv( location, count, value)}
    }
    func Uniform4f( location:Int32, v0:Float32, v1:Float32, v2:Float32, v3:Float32):Unit
    { 
    let glUniform4f=CFunc<( location:Int32, v0:Float32, v1:Float32, v2:Float32, v3:Float32)->Unit>(openglUniform4f)
    unsafe{glUniform4f( location, v0, v1, v2, v3)}
    }
    func Uniform4fv( location:Int32, count:Int32, value:CPointer<Float32>):Unit
    { 
    let glUniform4fv=CFunc<( location:Int32, count:Int32, value:CPointer<Float32>)->Unit>(openglUniform4fv)
    unsafe{glUniform4fv( location, count, value)}
    }
    func Uniform4i( location:Int32, v0:Int32, v1:Int32, v2:Int32, v3:Int32):Unit
    { 
    let glUniform4i=CFunc<( location:Int32, v0:Int32, v1:Int32, v2:Int32, v3:Int32)->Unit>(openglUniform4i)
    unsafe{glUniform4i( location, v0, v1, v2, v3)}
    }
    func Uniform4iv( location:Int32, count:Int32, value:CPointer<Int32>):Unit
    { 
    let glUniform4iv=CFunc<( location:Int32, count:Int32, value:CPointer<Int32>)->Unit>(openglUniform4iv)
    unsafe{glUniform4iv( location, count, value)}
    }
    func Uniform4ui( location:Int32, v0:UInt32, v1:UInt32, v2:UInt32, v3:UInt32):Unit
    { 
    let glUniform4ui=CFunc<( location:Int32, v0:UInt32, v1:UInt32, v2:UInt32, v3:UInt32)->Unit>(openglUniform4ui)
    unsafe{glUniform4ui( location, v0, v1, v2, v3)}
    }
    func Uniform4uiv( location:Int32, count:Int32, value:CPointer<UInt32>):Unit
    { 
    let glUniform4uiv=CFunc<( location:Int32, count:Int32, value:CPointer<UInt32>)->Unit>(openglUniform4uiv)
    unsafe{glUniform4uiv( location, count, value)}
    }
    func UniformBlockBinding( program:UInt32, uniformBlockIndex:UInt32, uniformBlockBinding:UInt32):Unit
    { 
    let glUniformBlockBinding=CFunc<( program:UInt32, uniformBlockIndex:UInt32, uniformBlockBinding:UInt32)->Unit>(openglUniformBlockBinding)
    unsafe{glUniformBlockBinding( program, uniformBlockIndex, uniformBlockBinding)}
    }
    func UniformMatrix2dv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glUniformMatrix2dv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglUniformMatrix2dv)
    unsafe{glUniformMatrix2dv( location, count, transpose, value)}
    }
    func UniformMatrix2fv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glUniformMatrix2fv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglUniformMatrix2fv)
    unsafe{glUniformMatrix2fv( location, count, transpose, value)}
    }
    func UniformMatrix2x3dv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glUniformMatrix2x3dv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglUniformMatrix2x3dv)
    unsafe{glUniformMatrix2x3dv( location, count, transpose, value)}
    }
    func UniformMatrix2x3fv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glUniformMatrix2x3fv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglUniformMatrix2x3fv)
    unsafe{glUniformMatrix2x3fv( location, count, transpose, value)}
    }
    func UniformMatrix2x4dv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glUniformMatrix2x4dv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglUniformMatrix2x4dv)
    unsafe{glUniformMatrix2x4dv( location, count, transpose, value)}
    }
    func UniformMatrix2x4fv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glUniformMatrix2x4fv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglUniformMatrix2x4fv)
    unsafe{glUniformMatrix2x4fv( location, count, transpose, value)}
    }
    func UniformMatrix3dv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glUniformMatrix3dv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglUniformMatrix3dv)
    unsafe{glUniformMatrix3dv( location, count, transpose, value)}
    }
    func UniformMatrix3fv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glUniformMatrix3fv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglUniformMatrix3fv)
    unsafe{glUniformMatrix3fv( location, count, transpose, value)}
    }
    func UniformMatrix3x2dv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glUniformMatrix3x2dv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglUniformMatrix3x2dv)
    unsafe{glUniformMatrix3x2dv( location, count, transpose, value)}
    }
    func UniformMatrix3x2fv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glUniformMatrix3x2fv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglUniformMatrix3x2fv)
    unsafe{glUniformMatrix3x2fv( location, count, transpose, value)}
    }
    func UniformMatrix3x4dv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glUniformMatrix3x4dv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglUniformMatrix3x4dv)
    unsafe{glUniformMatrix3x4dv( location, count, transpose, value)}
    }
    func UniformMatrix3x4fv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glUniformMatrix3x4fv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglUniformMatrix3x4fv)
    unsafe{glUniformMatrix3x4fv( location, count, transpose, value)}
    }
    func UniformMatrix4dv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glUniformMatrix4dv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglUniformMatrix4dv)
    unsafe{glUniformMatrix4dv( location, count, transpose, value)}
    }
    func UniformMatrix4fv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glUniformMatrix4fv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglUniformMatrix4fv)
    unsafe{glUniformMatrix4fv( location, count, transpose, value)}
    }
    func UniformMatrix4x2dv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glUniformMatrix4x2dv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglUniformMatrix4x2dv)
    unsafe{glUniformMatrix4x2dv( location, count, transpose, value)}
    }
    func UniformMatrix4x2fv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glUniformMatrix4x2fv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglUniformMatrix4x2fv)
    unsafe{glUniformMatrix4x2fv( location, count, transpose, value)}
    }
    func UniformMatrix4x3dv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>):Unit
    { 
    let glUniformMatrix4x3dv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float64>)->Unit>(openglUniformMatrix4x3dv)
    unsafe{glUniformMatrix4x3dv( location, count, transpose, value)}
    }
    func UniformMatrix4x3fv( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>):Unit
    { 
    let glUniformMatrix4x3fv=CFunc<( location:Int32, count:Int32, transpose:UInt8, value:CPointer<Float32>)->Unit>(openglUniformMatrix4x3fv)
    unsafe{glUniformMatrix4x3fv( location, count, transpose, value)}
    }
    func UniformSubroutinesuiv( shadertype:UInt32, count:Int32, indices:CPointer<UInt32>):Unit
    { 
    let glUniformSubroutinesuiv=CFunc<( shadertype:UInt32, count:Int32, indices:CPointer<UInt32>)->Unit>(openglUniformSubroutinesuiv)
    unsafe{glUniformSubroutinesuiv( shadertype, count, indices)}
    }
    func UnmapBuffer( target:UInt32):UInt8
    { 
    let glUnmapBuffer=CFunc<( target:UInt32)->UInt8>(openglUnmapBuffer)
    unsafe{glUnmapBuffer( target)}
    }
    func UnmapNamedBuffer( buffer:UInt32):UInt8
    { 
    let glUnmapNamedBuffer=CFunc<( buffer:UInt32)->UInt8>(openglUnmapNamedBuffer)
    unsafe{glUnmapNamedBuffer( buffer)}
    }
    func UseProgram( program:UInt32):Unit
    { 
    let glUseProgram=CFunc<( program:UInt32)->Unit>(openglUseProgram)
    unsafe{glUseProgram( program)}
    }
    func UseProgramStages( pipeline:UInt32, stages:UInt32, program:UInt32):Unit
    { 
    let glUseProgramStages=CFunc<( pipeline:UInt32, stages:UInt32, program:UInt32)->Unit>(openglUseProgramStages)
    unsafe{glUseProgramStages( pipeline, stages, program)}
    }
    func ValidateProgram( program:UInt32):Unit
    { 
    let glValidateProgram=CFunc<( program:UInt32)->Unit>(openglValidateProgram)
    unsafe{glValidateProgram( program)}
    }
    func ValidateProgramPipeline( pipeline:UInt32):Unit
    { 
    let glValidateProgramPipeline=CFunc<( pipeline:UInt32)->Unit>(openglValidateProgramPipeline)
    unsafe{glValidateProgramPipeline( pipeline)}
    }
    func VertexArrayAttribBinding( vaobj:UInt32, attribindex:UInt32, bindingindex:UInt32):Unit
    { 
    let glVertexArrayAttribBinding=CFunc<( vaobj:UInt32, attribindex:UInt32, bindingindex:UInt32)->Unit>(openglVertexArrayAttribBinding)
    unsafe{glVertexArrayAttribBinding( vaobj, attribindex, bindingindex)}
    }
    func VertexArrayAttribFormat( vaobj:UInt32, attribindex:UInt32, size:Int32,ttype:UInt32, normalized:UInt8, relativeoffset:UInt32):Unit
    { 
    let glVertexArrayAttribFormat=CFunc<( vaobj:UInt32, attribindex:UInt32, size:Int32,ttype:UInt32, normalized:UInt8, relativeoffset:UInt32)->Unit>(openglVertexArrayAttribFormat)
    unsafe{glVertexArrayAttribFormat( vaobj, attribindex, size,ttype, normalized, relativeoffset)}
    }
    func VertexArrayAttribIFormat( vaobj:UInt32, attribindex:UInt32, size:Int32,ttype:UInt32, relativeoffset:UInt32):Unit
    { 
    let glVertexArrayAttribIFormat=CFunc<( vaobj:UInt32, attribindex:UInt32, size:Int32,ttype:UInt32, relativeoffset:UInt32)->Unit>(openglVertexArrayAttribIFormat)
    unsafe{glVertexArrayAttribIFormat( vaobj, attribindex, size,ttype, relativeoffset)}
    }
    func VertexArrayAttribLFormat( vaobj:UInt32, attribindex:UInt32, size:Int32,ttype:UInt32, relativeoffset:UInt32):Unit
    { 
    let glVertexArrayAttribLFormat=CFunc<( vaobj:UInt32, attribindex:UInt32, size:Int32,ttype:UInt32, relativeoffset:UInt32)->Unit>(openglVertexArrayAttribLFormat)
    unsafe{glVertexArrayAttribLFormat( vaobj, attribindex, size,ttype, relativeoffset)}
    }
    func VertexArrayBindingDivisor( vaobj:UInt32, bindingindex:UInt32, divisor:UInt32):Unit
    { 
    let glVertexArrayBindingDivisor=CFunc<( vaobj:UInt32, bindingindex:UInt32, divisor:UInt32)->Unit>(openglVertexArrayBindingDivisor)
    unsafe{glVertexArrayBindingDivisor( vaobj, bindingindex, divisor)}
    }
    func VertexArrayElementBuffer( vaobj:UInt32, buffer:UInt32):Unit
    { 
    let glVertexArrayElementBuffer=CFunc<( vaobj:UInt32, buffer:UInt32)->Unit>(openglVertexArrayElementBuffer)
    unsafe{glVertexArrayElementBuffer( vaobj, buffer)}
    }
    func VertexArrayVertexBuffer( vaobj:UInt32, bindingindex:UInt32, buffer:UInt32, offset:Int64, stride:Int32):Unit
    { 
    let glVertexArrayVertexBuffer=CFunc<( vaobj:UInt32, bindingindex:UInt32, buffer:UInt32, offset:Int64, stride:Int32)->Unit>(openglVertexArrayVertexBuffer)
    unsafe{glVertexArrayVertexBuffer( vaobj, bindingindex, buffer, offset, stride)}
    }
    func VertexArrayVertexBuffers( vaobj:UInt32, first:UInt32, count:Int32, buffers:CPointer<UInt32>, offsets:CPointer<Int64>, strides:CPointer<Int32>):Unit
    { 
    let glVertexArrayVertexBuffers=CFunc<( vaobj:UInt32, first:UInt32, count:Int32, buffers:CPointer<UInt32>, offsets:CPointer<Int64>, strides:CPointer<Int32>)->Unit>(openglVertexArrayVertexBuffers)
    unsafe{glVertexArrayVertexBuffers( vaobj, first, count, buffers, offsets, strides)}
    }
    func VertexAttrib1d( index:UInt32, x:Float64):Unit
    { 
    let glVertexAttrib1d=CFunc<( index:UInt32, x:Float64)->Unit>(openglVertexAttrib1d)
    unsafe{glVertexAttrib1d( index, x)}
    }
    func VertexAttrib1dv( index:UInt32, v:CPointer<Float64>):Unit
    { 
    let glVertexAttrib1dv=CFunc<( index:UInt32, v:CPointer<Float64>)->Unit>(openglVertexAttrib1dv)
    unsafe{glVertexAttrib1dv( index, v)}
    }
    func VertexAttrib1f( index:UInt32, x:Float32):Unit
    { 
    let glVertexAttrib1f=CFunc<( index:UInt32, x:Float32)->Unit>(openglVertexAttrib1f)
    unsafe{glVertexAttrib1f( index, x)}
    }
    func VertexAttrib1fv( index:UInt32, v:CPointer<Float32>):Unit
    { 
    let glVertexAttrib1fv=CFunc<( index:UInt32, v:CPointer<Float32>)->Unit>(openglVertexAttrib1fv)
    unsafe{glVertexAttrib1fv( index, v)}
    }
    func VertexAttrib1s( index:UInt32, x:Int16):Unit
    { 
    let glVertexAttrib1s=CFunc<( index:UInt32, x:Int16)->Unit>(openglVertexAttrib1s)
    unsafe{glVertexAttrib1s( index, x)}
    }
    func VertexAttrib1sv( index:UInt32, v:CPointer<Int16>):Unit
    { 
    let glVertexAttrib1sv=CFunc<( index:UInt32, v:CPointer<Int16>)->Unit>(openglVertexAttrib1sv)
    unsafe{glVertexAttrib1sv( index, v)}
    }
    func VertexAttrib2d( index:UInt32, x:Float64, y:Float64):Unit
    { 
    let glVertexAttrib2d=CFunc<( index:UInt32, x:Float64, y:Float64)->Unit>(openglVertexAttrib2d)
    unsafe{glVertexAttrib2d( index, x, y)}
    }
    func VertexAttrib2dv( index:UInt32, v:CPointer<Float64>):Unit
    { 
    let glVertexAttrib2dv=CFunc<( index:UInt32, v:CPointer<Float64>)->Unit>(openglVertexAttrib2dv)
    unsafe{glVertexAttrib2dv( index, v)}
    }
    func VertexAttrib2f( index:UInt32, x:Float32, y:Float32):Unit
    { 
    let glVertexAttrib2f=CFunc<( index:UInt32, x:Float32, y:Float32)->Unit>(openglVertexAttrib2f)
    unsafe{glVertexAttrib2f( index, x, y)}
    }
    func VertexAttrib2fv( index:UInt32, v:CPointer<Float32>):Unit
    { 
    let glVertexAttrib2fv=CFunc<( index:UInt32, v:CPointer<Float32>)->Unit>(openglVertexAttrib2fv)
    unsafe{glVertexAttrib2fv( index, v)}
    }
    func VertexAttrib2s( index:UInt32, x:Int16, y:Int16):Unit
    { 
    let glVertexAttrib2s=CFunc<( index:UInt32, x:Int16, y:Int16)->Unit>(openglVertexAttrib2s)
    unsafe{glVertexAttrib2s( index, x, y)}
    }
    func VertexAttrib2sv( index:UInt32, v:CPointer<Int16>):Unit
    { 
    let glVertexAttrib2sv=CFunc<( index:UInt32, v:CPointer<Int16>)->Unit>(openglVertexAttrib2sv)
    unsafe{glVertexAttrib2sv( index, v)}
    }
    func VertexAttrib3d( index:UInt32, x:Float64, y:Float64, z:Float64):Unit
    { 
    let glVertexAttrib3d=CFunc<( index:UInt32, x:Float64, y:Float64, z:Float64)->Unit>(openglVertexAttrib3d)
    unsafe{glVertexAttrib3d( index, x, y, z)}
    }
    func VertexAttrib3dv( index:UInt32, v:CPointer<Float64>):Unit
    { 
    let glVertexAttrib3dv=CFunc<( index:UInt32, v:CPointer<Float64>)->Unit>(openglVertexAttrib3dv)
    unsafe{glVertexAttrib3dv( index, v)}
    }
    func VertexAttrib3f( index:UInt32, x:Float32, y:Float32, z:Float32):Unit
    { 
    let glVertexAttrib3f=CFunc<( index:UInt32, x:Float32, y:Float32, z:Float32)->Unit>(openglVertexAttrib3f)
    unsafe{glVertexAttrib3f( index, x, y, z)}
    }
    func VertexAttrib3fv( index:UInt32, v:CPointer<Float32>):Unit
    { 
    let glVertexAttrib3fv=CFunc<( index:UInt32, v:CPointer<Float32>)->Unit>(openglVertexAttrib3fv)
    unsafe{glVertexAttrib3fv( index, v)}
    }
    func VertexAttrib3s( index:UInt32, x:Int16, y:Int16, z:Int16):Unit
    { 
    let glVertexAttrib3s=CFunc<( index:UInt32, x:Int16, y:Int16, z:Int16)->Unit>(openglVertexAttrib3s)
    unsafe{glVertexAttrib3s( index, x, y, z)}
    }
    func VertexAttrib3sv( index:UInt32, v:CPointer<Int16>):Unit
    { 
    let glVertexAttrib3sv=CFunc<( index:UInt32, v:CPointer<Int16>)->Unit>(openglVertexAttrib3sv)
    unsafe{glVertexAttrib3sv( index, v)}
    }
    func VertexAttrib4Nbv( index:UInt32, v:CPointer<Int8>):Unit
    { 
    let glVertexAttrib4Nbv=CFunc<( index:UInt32, v:CPointer<Int8>)->Unit>(openglVertexAttrib4Nbv)
    unsafe{glVertexAttrib4Nbv( index, v)}
    }
    func VertexAttrib4Niv( index:UInt32, v:CPointer<Int32>):Unit
    { 
    let glVertexAttrib4Niv=CFunc<( index:UInt32, v:CPointer<Int32>)->Unit>(openglVertexAttrib4Niv)
    unsafe{glVertexAttrib4Niv( index, v)}
    }
    func VertexAttrib4Nsv( index:UInt32, v:CPointer<Int16>):Unit
    { 
    let glVertexAttrib4Nsv=CFunc<( index:UInt32, v:CPointer<Int16>)->Unit>(openglVertexAttrib4Nsv)
    unsafe{glVertexAttrib4Nsv( index, v)}
    }
    func VertexAttrib4Nub( index:UInt32, x:UInt8, y:UInt8, z:UInt8, w:UInt8):Unit
    { 
    let glVertexAttrib4Nub=CFunc<( index:UInt32, x:UInt8, y:UInt8, z:UInt8, w:UInt8)->Unit>(openglVertexAttrib4Nub)
    unsafe{glVertexAttrib4Nub( index, x, y, z, w)}
    }
    func VertexAttrib4Nubv( index:UInt32, v:CPointer<UInt8>):Unit
    { 
    let glVertexAttrib4Nubv=CFunc<( index:UInt32, v:CPointer<UInt8>)->Unit>(openglVertexAttrib4Nubv)
    unsafe{glVertexAttrib4Nubv( index, v)}
    }
    func VertexAttrib4Nuiv( index:UInt32, v:CPointer<UInt32>):Unit
    { 
    let glVertexAttrib4Nuiv=CFunc<( index:UInt32, v:CPointer<UInt32>)->Unit>(openglVertexAttrib4Nuiv)
    unsafe{glVertexAttrib4Nuiv( index, v)}
    }
    func VertexAttrib4Nusv( index:UInt32, v:CPointer<Int16>):Unit
    { 
    let glVertexAttrib4Nusv=CFunc<( index:UInt32, v:CPointer<Int16>)->Unit>(openglVertexAttrib4Nusv)
    unsafe{glVertexAttrib4Nusv( index, v)}
    }
    func VertexAttrib4bv( index:UInt32, v:CPointer<Int8>):Unit
    { 
    let glVertexAttrib4bv=CFunc<( index:UInt32, v:CPointer<Int8>)->Unit>(openglVertexAttrib4bv)
    unsafe{glVertexAttrib4bv( index, v)}
    }
    func VertexAttrib4d( index:UInt32, x:Float64, y:Float64, z:Float64, w:Float64):Unit
    { 
    let glVertexAttrib4d=CFunc<( index:UInt32, x:Float64, y:Float64, z:Float64, w:Float64)->Unit>(openglVertexAttrib4d)
    unsafe{glVertexAttrib4d( index, x, y, z, w)}
    }
    func VertexAttrib4dv( index:UInt32, v:CPointer<Float64>):Unit
    { 
    let glVertexAttrib4dv=CFunc<( index:UInt32, v:CPointer<Float64>)->Unit>(openglVertexAttrib4dv)
    unsafe{glVertexAttrib4dv( index, v)}
    }
    func VertexAttrib4f( index:UInt32, x:Float32, y:Float32, z:Float32, w:Float32):Unit
    { 
    let glVertexAttrib4f=CFunc<( index:UInt32, x:Float32, y:Float32, z:Float32, w:Float32)->Unit>(openglVertexAttrib4f)
    unsafe{glVertexAttrib4f( index, x, y, z, w)}
    }
    func VertexAttrib4fv( index:UInt32, v:CPointer<Float32>):Unit
    { 
    let glVertexAttrib4fv=CFunc<( index:UInt32, v:CPointer<Float32>)->Unit>(openglVertexAttrib4fv)
    unsafe{glVertexAttrib4fv( index, v)}
    }
    func VertexAttrib4iv( index:UInt32, v:CPointer<Int32>):Unit
    { 
    let glVertexAttrib4iv=CFunc<( index:UInt32, v:CPointer<Int32>)->Unit>(openglVertexAttrib4iv)
    unsafe{glVertexAttrib4iv( index, v)}
    }
    func VertexAttrib4s( index:UInt32, x:Int16, y:Int16, z:Int16, w:Int16):Unit
    { 
    let glVertexAttrib4s=CFunc<( index:UInt32, x:Int16, y:Int16, z:Int16, w:Int16)->Unit>(openglVertexAttrib4s)
    unsafe{glVertexAttrib4s( index, x, y, z, w)}
    }
    func VertexAttrib4sv( index:UInt32, v:CPointer<Int16>):Unit
    { 
    let glVertexAttrib4sv=CFunc<( index:UInt32, v:CPointer<Int16>)->Unit>(openglVertexAttrib4sv)
    unsafe{glVertexAttrib4sv( index, v)}
    }
    func VertexAttrib4ubv( index:UInt32, v:CPointer<UInt8>):Unit
    { 
    let glVertexAttrib4ubv=CFunc<( index:UInt32, v:CPointer<UInt8>)->Unit>(openglVertexAttrib4ubv)
    unsafe{glVertexAttrib4ubv( index, v)}
    }
    func VertexAttrib4uiv( index:UInt32, v:CPointer<UInt32>):Unit
    { 
    let glVertexAttrib4uiv=CFunc<( index:UInt32, v:CPointer<UInt32>)->Unit>(openglVertexAttrib4uiv)
    unsafe{glVertexAttrib4uiv( index, v)}
    }
    func VertexAttrib4usv( index:UInt32, v:CPointer<Int16>):Unit
    { 
    let glVertexAttrib4usv=CFunc<( index:UInt32, v:CPointer<Int16>)->Unit>(openglVertexAttrib4usv)
    unsafe{glVertexAttrib4usv( index, v)}
    }
    func VertexAttribBinding( attribindex:UInt32, bindingindex:UInt32):Unit
    { 
    let glVertexAttribBinding=CFunc<( attribindex:UInt32, bindingindex:UInt32)->Unit>(openglVertexAttribBinding)
    unsafe{glVertexAttribBinding( attribindex, bindingindex)}
    }
    func VertexAttribDivisor( index:UInt32, divisor:UInt32):Unit
    { 
    let glVertexAttribDivisor=CFunc<( index:UInt32, divisor:UInt32)->Unit>(openglVertexAttribDivisor)
    unsafe{glVertexAttribDivisor( index, divisor)}
    }
    func VertexAttribFormat( attribindex:UInt32, size:Int32,ttype:UInt32, normalized:UInt8, relativeoffset:UInt32):Unit
    { 
    let glVertexAttribFormat=CFunc<( attribindex:UInt32, size:Int32,ttype:UInt32, normalized:UInt8, relativeoffset:UInt32)->Unit>(openglVertexAttribFormat)
    unsafe{glVertexAttribFormat( attribindex, size,ttype, normalized, relativeoffset)}
    }
    func VertexAttribI1i( index:UInt32, x:Int32):Unit
    { 
    let glVertexAttribI1i=CFunc<( index:UInt32, x:Int32)->Unit>(openglVertexAttribI1i)
    unsafe{glVertexAttribI1i( index, x)}
    }
    func VertexAttribI1iv( index:UInt32, v:CPointer<Int32>):Unit
    { 
    let glVertexAttribI1iv=CFunc<( index:UInt32, v:CPointer<Int32>)->Unit>(openglVertexAttribI1iv)
    unsafe{glVertexAttribI1iv( index, v)}
    }
    func VertexAttribI1ui( index:UInt32, x:UInt32):Unit
    { 
    let glVertexAttribI1ui=CFunc<( index:UInt32, x:UInt32)->Unit>(openglVertexAttribI1ui)
    unsafe{glVertexAttribI1ui( index, x)}
    }
    func VertexAttribI1uiv( index:UInt32, v:CPointer<UInt32>):Unit
    { 
    let glVertexAttribI1uiv=CFunc<( index:UInt32, v:CPointer<UInt32>)->Unit>(openglVertexAttribI1uiv)
    unsafe{glVertexAttribI1uiv( index, v)}
    }
    func VertexAttribI2i( index:UInt32, x:Int32, y:Int32):Unit
    { 
    let glVertexAttribI2i=CFunc<( index:UInt32, x:Int32, y:Int32)->Unit>(openglVertexAttribI2i)
    unsafe{glVertexAttribI2i( index, x, y)}
    }
    func VertexAttribI2iv( index:UInt32, v:CPointer<Int32>):Unit
    { 
    let glVertexAttribI2iv=CFunc<( index:UInt32, v:CPointer<Int32>)->Unit>(openglVertexAttribI2iv)
    unsafe{glVertexAttribI2iv( index, v)}
    }
    func VertexAttribI2ui( index:UInt32, x:UInt32, y:UInt32):Unit
    { 
    let glVertexAttribI2ui=CFunc<( index:UInt32, x:UInt32, y:UInt32)->Unit>(openglVertexAttribI2ui)
    unsafe{glVertexAttribI2ui( index, x, y)}
    }
    func VertexAttribI2uiv( index:UInt32, v:CPointer<UInt32>):Unit
    { 
    let glVertexAttribI2uiv=CFunc<( index:UInt32, v:CPointer<UInt32>)->Unit>(openglVertexAttribI2uiv)
    unsafe{glVertexAttribI2uiv( index, v)}
    }
    func VertexAttribI3i( index:UInt32, x:Int32, y:Int32, z:Int32):Unit
    { 
    let glVertexAttribI3i=CFunc<( index:UInt32, x:Int32, y:Int32, z:Int32)->Unit>(openglVertexAttribI3i)
    unsafe{glVertexAttribI3i( index, x, y, z)}
    }
    func VertexAttribI3iv( index:UInt32, v:CPointer<Int32>):Unit
    { 
    let glVertexAttribI3iv=CFunc<( index:UInt32, v:CPointer<Int32>)->Unit>(openglVertexAttribI3iv)
    unsafe{glVertexAttribI3iv( index, v)}
    }
    func VertexAttribI3ui( index:UInt32, x:UInt32, y:UInt32, z:UInt32):Unit
    { 
    let glVertexAttribI3ui=CFunc<( index:UInt32, x:UInt32, y:UInt32, z:UInt32)->Unit>(openglVertexAttribI3ui)
    unsafe{glVertexAttribI3ui( index, x, y, z)}
    }
    func VertexAttribI3uiv( index:UInt32, v:CPointer<UInt32>):Unit
    { 
    let glVertexAttribI3uiv=CFunc<( index:UInt32, v:CPointer<UInt32>)->Unit>(openglVertexAttribI3uiv)
    unsafe{glVertexAttribI3uiv( index, v)}
    }
    func VertexAttribI4bv( index:UInt32, v:CPointer<Int8>):Unit
    { 
    let glVertexAttribI4bv=CFunc<( index:UInt32, v:CPointer<Int8>)->Unit>(openglVertexAttribI4bv)
    unsafe{glVertexAttribI4bv( index, v)}
    }
    func VertexAttribI4i( index:UInt32, x:Int32, y:Int32, z:Int32, w:Int32):Unit
    { 
    let glVertexAttribI4i=CFunc<( index:UInt32, x:Int32, y:Int32, z:Int32, w:Int32)->Unit>(openglVertexAttribI4i)
    unsafe{glVertexAttribI4i( index, x, y, z, w)}
    }
    func VertexAttribI4iv( index:UInt32, v:CPointer<Int32>):Unit
    { 
    let glVertexAttribI4iv=CFunc<( index:UInt32, v:CPointer<Int32>)->Unit>(openglVertexAttribI4iv)
    unsafe{glVertexAttribI4iv( index, v)}
    }
    func VertexAttribI4sv( index:UInt32, v:CPointer<Int16>):Unit
    { 
    let glVertexAttribI4sv=CFunc<( index:UInt32, v:CPointer<Int16>)->Unit>(openglVertexAttribI4sv)
    unsafe{glVertexAttribI4sv( index, v)}
    }
    func VertexAttribI4ubv( index:UInt32, v:CPointer<UInt8>):Unit
    { 
    let glVertexAttribI4ubv=CFunc<( index:UInt32, v:CPointer<UInt8>)->Unit>(openglVertexAttribI4ubv)
    unsafe{glVertexAttribI4ubv( index, v)}
    }
    func VertexAttribI4ui( index:UInt32, x:UInt32, y:UInt32, z:UInt32, w:UInt32):Unit
    { 
    let glVertexAttribI4ui=CFunc<( index:UInt32, x:UInt32, y:UInt32, z:UInt32, w:UInt32)->Unit>(openglVertexAttribI4ui)
    unsafe{glVertexAttribI4ui( index, x, y, z, w)}
    }
    func VertexAttribI4uiv( index:UInt32, v:CPointer<UInt32>):Unit
    { 
    let glVertexAttribI4uiv=CFunc<( index:UInt32, v:CPointer<UInt32>)->Unit>(openglVertexAttribI4uiv)
    unsafe{glVertexAttribI4uiv( index, v)}
    }
    func VertexAttribI4usv( index:UInt32, v:CPointer<Int16>):Unit
    { 
    let glVertexAttribI4usv=CFunc<( index:UInt32, v:CPointer<Int16>)->Unit>(openglVertexAttribI4usv)
    unsafe{glVertexAttribI4usv( index, v)}
    }
    func VertexAttribIFormat( attribindex:UInt32, size:Int32,ttype:UInt32, relativeoffset:UInt32):Unit
    { 
    let glVertexAttribIFormat=CFunc<( attribindex:UInt32, size:Int32,ttype:UInt32, relativeoffset:UInt32)->Unit>(openglVertexAttribIFormat)
    unsafe{glVertexAttribIFormat( attribindex, size,ttype, relativeoffset)}
    }
    func VertexAttribIPointer( index:UInt32, size:Int32,ttype:UInt32, stride:Int32, pointer:CPointer<Unit>):Unit
    { 
    let glVertexAttribIPointer=CFunc<( index:UInt32, size:Int32,ttype:UInt32, stride:Int32, pointer:CPointer<Unit>)->Unit>(openglVertexAttribIPointer)
    unsafe{glVertexAttribIPointer( index, size,ttype, stride, pointer)}
    }
    func VertexAttribL1d( index:UInt32, x:Float64):Unit
    { 
    let glVertexAttribL1d=CFunc<( index:UInt32, x:Float64)->Unit>(openglVertexAttribL1d)
    unsafe{glVertexAttribL1d( index, x)}
    }
    func VertexAttribL1dv( index:UInt32, v:CPointer<Float64>):Unit
    { 
    let glVertexAttribL1dv=CFunc<( index:UInt32, v:CPointer<Float64>)->Unit>(openglVertexAttribL1dv)
    unsafe{glVertexAttribL1dv( index, v)}
    }
    func VertexAttribL2d( index:UInt32, x:Float64, y:Float64):Unit
    { 
    let glVertexAttribL2d=CFunc<( index:UInt32, x:Float64, y:Float64)->Unit>(openglVertexAttribL2d)
    unsafe{glVertexAttribL2d( index, x, y)}
    }
    func VertexAttribL2dv( index:UInt32, v:CPointer<Float64>):Unit
    { 
    let glVertexAttribL2dv=CFunc<( index:UInt32, v:CPointer<Float64>)->Unit>(openglVertexAttribL2dv)
    unsafe{glVertexAttribL2dv( index, v)}
    }
    func VertexAttribL3d( index:UInt32, x:Float64, y:Float64, z:Float64):Unit
    { 
    let glVertexAttribL3d=CFunc<( index:UInt32, x:Float64, y:Float64, z:Float64)->Unit>(openglVertexAttribL3d)
    unsafe{glVertexAttribL3d( index, x, y, z)}
    }
    func VertexAttribL3dv( index:UInt32, v:CPointer<Float64>):Unit
    { 
    let glVertexAttribL3dv=CFunc<( index:UInt32, v:CPointer<Float64>)->Unit>(openglVertexAttribL3dv)
    unsafe{glVertexAttribL3dv( index, v)}
    }
    func VertexAttribL4d( index:UInt32, x:Float64, y:Float64, z:Float64, w:Float64):Unit
    { 
    let glVertexAttribL4d=CFunc<( index:UInt32, x:Float64, y:Float64, z:Float64, w:Float64)->Unit>(openglVertexAttribL4d)
    unsafe{glVertexAttribL4d( index, x, y, z, w)}
    }
    func VertexAttribL4dv( index:UInt32, v:CPointer<Float64>):Unit
    { 
    let glVertexAttribL4dv=CFunc<( index:UInt32, v:CPointer<Float64>)->Unit>(openglVertexAttribL4dv)
    unsafe{glVertexAttribL4dv( index, v)}
    }
    func VertexAttribLFormat( attribindex:UInt32, size:Int32,ttype:UInt32, relativeoffset:UInt32):Unit
    { 
    let glVertexAttribLFormat=CFunc<( attribindex:UInt32, size:Int32,ttype:UInt32, relativeoffset:UInt32)->Unit>(openglVertexAttribLFormat)
    unsafe{glVertexAttribLFormat( attribindex, size,ttype, relativeoffset)}
    }
    func VertexAttribLPointer( index:UInt32, size:Int32,ttype:UInt32, stride:Int32, pointer:CPointer<Unit>):Unit
    { 
    let glVertexAttribLPointer=CFunc<( index:UInt32, size:Int32,ttype:UInt32, stride:Int32, pointer:CPointer<Unit>)->Unit>(openglVertexAttribLPointer)
    unsafe{glVertexAttribLPointer( index, size,ttype, stride, pointer)}
    }
    func VertexAttribP1ui( index:UInt32,ttype:UInt32, normalized:UInt8, value:UInt32):Unit
    { 
    let glVertexAttribP1ui=CFunc<( index:UInt32,ttype:UInt32, normalized:UInt8, value:UInt32)->Unit>(openglVertexAttribP1ui)
    unsafe{glVertexAttribP1ui( index,ttype, normalized, value)}
    }
    func VertexAttribP1uiv( index:UInt32,ttype:UInt32, normalized:UInt8, value:CPointer<UInt32>):Unit
    { 
    let glVertexAttribP1uiv=CFunc<( index:UInt32,ttype:UInt32, normalized:UInt8, value:CPointer<UInt32>)->Unit>(openglVertexAttribP1uiv)
    unsafe{glVertexAttribP1uiv( index,ttype, normalized, value)}
    }
    func VertexAttribP2ui( index:UInt32,ttype:UInt32, normalized:UInt8, value:UInt32):Unit
    { 
    let glVertexAttribP2ui=CFunc<( index:UInt32,ttype:UInt32, normalized:UInt8, value:UInt32)->Unit>(openglVertexAttribP2ui)
    unsafe{glVertexAttribP2ui( index,ttype, normalized, value)}
    }
    func VertexAttribP2uiv( index:UInt32,ttype:UInt32, normalized:UInt8, value:CPointer<UInt32>):Unit
    { 
    let glVertexAttribP2uiv=CFunc<( index:UInt32,ttype:UInt32, normalized:UInt8, value:CPointer<UInt32>)->Unit>(openglVertexAttribP2uiv)
    unsafe{glVertexAttribP2uiv( index,ttype, normalized, value)}
    }
    func VertexAttribP3ui( index:UInt32,ttype:UInt32, normalized:UInt8, value:UInt32):Unit
    { 
    let glVertexAttribP3ui=CFunc<( index:UInt32,ttype:UInt32, normalized:UInt8, value:UInt32)->Unit>(openglVertexAttribP3ui)
    unsafe{glVertexAttribP3ui( index,ttype, normalized, value)}
    }
    func VertexAttribP3uiv( index:UInt32,ttype:UInt32, normalized:UInt8, value:CPointer<UInt32>):Unit
    { 
    let glVertexAttribP3uiv=CFunc<( index:UInt32,ttype:UInt32, normalized:UInt8, value:CPointer<UInt32>)->Unit>(openglVertexAttribP3uiv)
    unsafe{glVertexAttribP3uiv( index,ttype, normalized, value)}
    }
    func VertexAttribP4ui( index:UInt32,ttype:UInt32, normalized:UInt8, value:UInt32):Unit
    { 
    let glVertexAttribP4ui=CFunc<( index:UInt32,ttype:UInt32, normalized:UInt8, value:UInt32)->Unit>(openglVertexAttribP4ui)
    unsafe{glVertexAttribP4ui( index,ttype, normalized, value)}
    }
    func VertexAttribP4uiv( index:UInt32,ttype:UInt32, normalized:UInt8, value:CPointer<UInt32>):Unit
    { 
    let glVertexAttribP4uiv=CFunc<( index:UInt32,ttype:UInt32, normalized:UInt8, value:CPointer<UInt32>)->Unit>(openglVertexAttribP4uiv)
    unsafe{glVertexAttribP4uiv( index,ttype, normalized, value)}
    }
    func VertexAttribPointer( index:UInt32, size:Int32,ttype:UInt32, normalized:UInt8, stride:Int32, pointer:CPointer<Unit>):Unit
    { 
    let glVertexAttribPointer=CFunc<( index:UInt32, size:Int32,ttype:UInt32, normalized:UInt8, stride:Int32, pointer:CPointer<Unit>)->Unit>(openglVertexAttribPointer)
    unsafe{glVertexAttribPointer( index, size,ttype, normalized, stride, pointer)}
    }
    func VertexBindingDivisor( bindingindex:UInt32, divisor:UInt32):Unit
    { 
    let glVertexBindingDivisor=CFunc<( bindingindex:UInt32, divisor:UInt32)->Unit>(openglVertexBindingDivisor)
    unsafe{glVertexBindingDivisor( bindingindex, divisor)}
    }
    func Viewport( x:Int32, y:Int32, width:Int32, height:Int32):Unit
    { 
    let glViewport=CFunc<( x:Int32, y:Int32, width:Int32, height:Int32)->Unit>(openglViewport)
    unsafe{glViewport( x, y, width, height)}
    }
    func ViewportArrayv( first:UInt32, count:Int32, v:CPointer<Float32>):Unit
    { 
    let glViewportArrayv=CFunc<( first:UInt32, count:Int32, v:CPointer<Float32>)->Unit>(openglViewportArrayv)
    unsafe{glViewportArrayv( first, count, v)}
    }
    func ViewportIndexedf( index:UInt32, x:Float32, y:Float32, w:Float32, h:Float32):Unit
    { 
    let glViewportIndexedf=CFunc<( index:UInt32, x:Float32, y:Float32, w:Float32, h:Float32)->Unit>(openglViewportIndexedf)
    unsafe{glViewportIndexedf( index, x, y, w, h)}
    }
    func ViewportIndexedfv( index:UInt32, v:CPointer<Float32>):Unit
    { 
    let glViewportIndexedfv=CFunc<( index:UInt32, v:CPointer<Float32>)->Unit>(openglViewportIndexedfv)
    unsafe{glViewportIndexedfv( index, v)}
    }
    func WaitSync( sync:UIntNative, flags:UInt32, timeout:UInt64):Unit
    { 
    let glWaitSync=CFunc<( sync:UIntNative, flags:UInt32, timeout:UInt64)->Unit>(openglWaitSync)
    unsafe{glWaitSync( sync, flags, timeout)}
    }
}